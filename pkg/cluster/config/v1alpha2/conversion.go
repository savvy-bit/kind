/*
Copyright 2019 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha2

import (
	conversion "k8s.io/apimachinery/pkg/conversion"
	config "sigs.k8s.io/kind/pkg/cluster/config"
)

func Convert_v1alpha2_Config_To_config_Cluster(in *Config, out *config.Cluster, s conversion.Scope) error {
	// TODO(bentheelder): try to convert kubeadm config patches?
	for _, node := range in.Nodes {
		convertedNode := config.Node{}
		if err := Convert_v1alpha2_Node_To_config_Node(&node, &convertedNode, s); err != nil {
			return err
		}
		out.Nodes = append(out.Nodes, convertedNode)
		// handle additional replicas
		if node.Replicas != nil && *node.Replicas > 1 {
			for i := int32(1); i < *node.Replicas; i++ {
				out.Nodes = append(out.Nodes, *convertedNode.DeepCopy())
			}
		}
	}
	return nil
}

func Convert_v1alpha2_Node_To_config_Node(in *Node, out *config.Node, s conversion.Scope) error {
	return autoConvert_v1alpha2_Node_To_config_Node(in, out, s)
}

func Convert_config_Cluster_To_v1alpha2_Config(in *config.Cluster, out *Config, s conversion.Scope) error {
	// TODO(bentheelder): try to convert kubeadm config patches?
	for _, node := range in.Nodes {
		convertedNode := Node{}
		if err := Convert_config_Node_To_v1alpha2_Node(&node, &convertedNode, s); err != nil {
			return err
		}
		out.Nodes = append(out.Nodes, convertedNode)
	}
	return nil
}

func Convert_config_Node_To_v1alpha2_Node(in *config.Node, out *Node, s conversion.Scope) error {
	return autoConvert_config_Node_To_v1alpha2_Node(in, out, s)
}
