// Code generated by go-bindata.
// sources:
// ../../../../images/base/Dockerfile
// ../../../../images/base/clean-install
// ../../../../images/base/entrypoint
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xfb\x6f\xdb\x46\xf2\xff\x9d\x7f\xc5\x40\x0a\x52\x3b\x15\x49\x3f\xe2\xd6\xcd\x17\xee\x17\xaa\xe2\xa4\x42\x1d\x29\x90\x94\x14\xc1\xdd\x21\x58\x2e\x47\xe4\x56\xcb\x5d\xde\x3e\x44\x2b\x69\xfe\xf7\xc3\x2c\xa9\x97\x93\xf4\x7a\xe8\x5d\x51\x40\x31\x77\x1e\x9f\x79\xcf\xf4\x61\xa4\xeb\x8d\x11\x45\xe9\xe0\xe2\xec\xfc\x1a\x16\x25\xc2\x2f\x3e\x43\xa3\xd0\xa1\x85\xa1\x77\xa5\x36\x36\x89\xfa\x51\x1f\xee\x04\x47\x65\x31\x07\xaf\x72\x34\xe0\x4a\x84\x61\xcd\x78\x89\xdb\x97\x01\xbc\x45\x63\x85\x56\x70\x91\x9c\xc1\x09\x11\xf4\xba\xa7\xde\xe9\xff\x45\x7d\xd8\x68\x0f\x15\xdb\x80\xd2\x0e\xbc\x45\x70\xa5\xb0\xb0\x14\x12\x01\xef\x39\xd6\x0e\x84\x02\xae\xab\x5a\x0a\xa6\x38\x42\x23\x5c\x19\xd4\x74\x42\x92\xa8\x0f\xef\x3a\x11\x3a\x73\x4c\x28\x60\xc0\x75\xbd\x01\xbd\x3c\xa4\x03\xe6\x02\x60\xfa\xaf\x74\xae\x7e\x96\xa6\x4d\xd3\x24\x2c\x80\x4d\xb4\x29\x52\xd9\x12\xda\xf4\x6e\x3c\xba\x9d\xcc\x6f\xe3\x8b\xe4\x2c\xb0\xbc\x51\x12\xad\x05\x83\xff\xf4\xc2\x60\x0e\xd9\x06\x58\x5d\x4b\xc1\x59\x26\x11\x24\x6b\x40\x1b\x60\x85\x41\xcc\xc1\x69\xc2\xdb\x18\xe1\x84\x2a\x06\x60\xf5\xd2\x35\xcc\x60\xd4\x87\x5c\x58\x67\x44\xe6\xdd\x91\xb3\xb6\xe8\x84\x3d\x22\xd0\x0a\x98\x82\xde\x70\x0e\xe3\x79\x0f\x7e\x1a\xce\xc7\xf3\x41\xd4\x87\x5f\xc7\x8b\x9f\xa7\x6f\x16\xf0\xeb\x70\x36\x1b\x4e\x16\xe3\xdb\x39\x4c\x67\x30\x9a\x4e\x9e\x8f\x17\xe3\xe9\x64\x0e\xd3\x17\x30\x9c\xbc\x83\x5f\xc6\x93\xe7\x03\x40\xe1\x4a\x34\x80\xf7\xb5\x21\xfc\xda\x80\x20\x37\x62\x4e\x3e\x9b\x23\x1e\x01\x58\xea\x16\x90\xad\x91\x8b\xa5\xe0\x20\x99\x2a\x3c\x2b\x10\x0a\xbd\x46\xa3\x84\x2a\xa0\x46\x53\x09\x4b\xc1\xb4\xc0\x54\x1e\xf5\x41\x8a\x4a\x38\xe6\xc2\x97\xcf\x8c\x4a\xa2\xa8\x0f\x2b\xa1\x72\xe0\xd2\x5b\x87\x06\x32\x46\xa6\x56\xac\xc0\xe0\xd8\x17\xda\x80\xdd\x58\x87\x55\x0e\xdf\x42\xae\xf9\x0a\x0d\x70\xad\x96\xa2\xf0\x26\x48\xa5\x8c\xc8\x21\x43\xa9\x9b\x01\xd8\x0e\xf2\x52\x4b\xa9\x1b\x02\x64\x70\x89\x06\x15\x47\xfb\x2c\xea\x87\xb0\xda\x2e\xae\x4b\x8a\x06\xda\x95\xd3\x75\x08\x6e\x23\x56\x22\x9d\x77\xd1\x48\x3b\xa5\xe9\x48\x2b\xca\x18\x34\x63\xe5\xd0\x2c\x19\xc7\xf4\x40\x4e\x8e\x6b\x94\xba\x46\x63\x13\x83\x79\xc9\x5c\xc2\x75\x95\x66\x52\x17\xe9\xc5\xd9\xf9\xd3\xf4\xec\x8a\xfe\x37\x5e\x91\x73\xe2\x4e\x66\x4c\x09\x2a\x54\xdc\x5a\x13\xf3\xad\x86\x3f\x2f\xf8\xbb\xf4\xec\x87\xf4\xfc\xf2\x33\xc1\x42\xc5\x2c\x56\x5a\xc5\xb5\x11\x6b\x21\xb1\xc0\xfc\x50\x7c\x34\x9c\xbd\xa4\x4c\xb9\x7d\x3f\x7e\x35\x7c\x79\x7b\xd3\xf3\x99\x57\xce\x3f\x3b\xff\x21\x39\x7b\xda\x8b\x5e\xcc\xa6\xaf\xe0\xd1\xc7\x3d\xc1\x27\x8a\x8e\x45\x47\x89\x0a\xcf\x6f\x7f\x1a\x0f\x27\xef\x5f\xcc\xa6\x93\xc5\xed\xe4\xf9\x8d\xd2\x4a\x90\x4b\x18\x77\x62\x8d\x60\x9d\xae\x2d\x58\x5d\x21\xb0\xda\x41\xc3\x42\x3e\xd8\x41\x5b\xac\xc2\x86\xe2\x8d\xfa\xc0\xc0\x20\x93\xc0\x4c\xe1\x2b\x54\x6e\x00\x0d\x7e\x63\x10\x4e\x58\x76\xea\x2d\xe9\x21\x8c\x4e\x43\x81\x0e\x18\x38\xac\x6a\x6d\x98\xd9\xc0\xed\xe4\x2d\xb0\x82\x09\x95\x04\x2b\xfe\x18\x4d\x14\x8d\xa6\xaf\xdf\x01\x97\xc8\x54\x2c\x94\x75\x4c\x4a\x48\xbd\x35\xa9\xd4\x9c\xc9\x34\x13\x2a\x3d\x7a\x8c\x66\x6f\x26\xc0\xcb\x4a\xe7\xf0\xed\xfd\x1f\x53\x46\x7d\x78\x89\x0e\x72\xac\x51\xe5\xa8\xb8\x40\x1b\xf5\x43\x03\xdc\xa7\x2e\x30\x69\x90\xe5\x1b\x28\x99\x7d\x06\xd6\x96\x03\x72\xca\x00\xac\x62\x75\x1e\xa8\x5b\x9f\x64\x46\xaf\x50\x41\xae\x1b\x05\x42\x39\x0d\x27\xc8\x78\x19\x4a\x1b\xa4\x50\x78\x4a\x39\x1b\x43\xcd\xf8\x8a\x15\x68\x41\x51\xc6\x86\x0e\x62\xbc\x02\x8b\x66\x2d\x38\x5a\x38\xe9\xe2\x7f\x1a\xa8\x47\xb3\x31\x9c\xec\xa2\xde\x7d\x7c\x28\x82\x6a\x79\xb5\x6f\xd8\xd4\x3d\xb5\x42\xe5\x6c\xa0\xae\x84\xe5\x7b\x96\x50\x9f\xde\xa2\x05\xe1\x2c\xca\x65\x6b\xae\x82\x06\x5b\x0f\xfb\x1a\x4e\x0c\x56\x7a\x4d\xe1\xf3\xaa\x61\x8a\xfa\xd3\xb6\x6a\xb7\x28\x09\xc7\x0b\xa1\x98\x94\x1b\xe2\xcc\x85\x0d\xbd\x71\x55\xd9\x82\xfa\xe1\x6f\xda\x1b\xc5\x64\xfe\xbf\x2b\xae\x10\xe2\xa3\x8c\xf8\x7b\x14\x7a\xfd\x1e\x6a\x27\xc2\x6e\xec\x1a\xa4\xc8\xba\xbf\xcf\x76\x84\x7b\xaf\x1e\x7e\x52\xce\x30\xbe\x02\x51\x3b\xb2\xc8\x82\xa8\x8d\xf6\x0e\x2f\x00\x5d\xe9\xb4\x96\x60\x35\x67\x0e\xbc\x13\x32\x96\x42\xf9\x7b\xa8\xb4\x57\x0e\x30\xeb\x18\x7c\x8e\x6b\x58\x51\xf2\x6d\xa5\x66\xcc\x96\xc0\x59\xcc\xd1\x38\x6a\xb5\x2c\x04\xc9\x1b\x09\xc6\x6e\x14\xef\xe8\x1e\x3f\x86\x25\xc5\x26\x95\x22\xdb\x35\xac\xf6\x97\x7e\x84\x12\x2e\x71\xcc\x14\xe8\x12\x0a\x8a\x4d\x21\x56\xac\x42\xe8\x6d\x0d\x75\x55\x4d\x63\xd4\xc6\x16\x9d\xaf\x93\x2e\x54\x3d\x88\x73\x94\xe8\x70\xaf\xc6\x54\x10\x2f\xbf\xa8\xa7\xf2\xd2\x89\xd8\x5b\x34\xc7\xaa\x9e\x7c\xc6\x8c\x8e\x3f\x64\x7e\xf2\x55\xe2\x2f\x68\x0a\x05\x19\x2f\xed\xbf\xd3\xf3\x25\x67\x50\x32\xb8\x87\x9c\xe4\xf6\xbf\xc0\x4e\xee\xe5\x4e\xfe\x29\x09\x19\xb3\x82\x7f\x15\x38\xf2\x52\x43\x6f\x86\x2c\xff\xe5\x95\x2d\x6e\x94\xee\xc1\x8f\x3f\x1e\x3b\x6c\x5b\x1e\x09\xcd\xbe\x3d\x67\xfb\xcc\x9d\x04\x54\xa1\x9c\x3e\xcb\xd0\x9d\xf8\x5c\x2b\x84\x2e\xf3\xc3\xa4\xee\xca\xbb\x47\x1d\x2d\xc7\xcc\x17\x87\xcc\xeb\x6e\x23\x63\x34\x9a\x0d\x32\x87\x90\xe3\x92\x79\xe9\xba\xe9\xdb\x96\xd3\x9e\x21\x8e\xb7\x2c\x3b\xbd\xd5\x2a\x17\x06\xe2\xba\xb5\xe4\x80\xf6\xf1\xe3\x43\xce\x56\xde\x4e\xfc\x8f\x0f\xc9\xd3\x96\x20\x71\xba\x0a\xdd\x77\xdc\x55\xef\x68\x32\x86\x4c\x28\x66\x04\x5a\x6a\x89\xa9\xae\x5d\xca\x95\xa0\x9e\x4d\x2d\x6a\xfa\x7c\x7a\x92\xa1\x72\x25\xa2\xcc\xd1\x9c\x3e\xa3\xf5\x01\x9a\x72\x03\x29\x34\x25\x73\x50\xa2\xc1\x30\x4c\x46\x93\xf1\xfb\xb7\xb7\xb3\xf9\x78\x3a\xb9\xe9\x9d\x25\xdf\x27\x57\xbd\xdd\xf7\x30\x0d\xdf\xcc\xee\x6e\x7a\xdb\xb6\x64\x9d\x36\xac\xc0\xa4\xd0\xba\x90\xc8\x6a\x61\x43\x5f\xda\x77\xd3\xd8\xa0\x44\x66\x31\x55\xe8\x1a\x6d\x56\x71\x2d\x7d\x21\x94\x4d\x7b\xc1\x69\x78\x5f\x6b\xe3\x60\x38\x1b\xfd\x7c\xf3\xe8\x24\xaf\x57\x05\xc4\x34\xb0\x95\x8b\x99\xe1\xa5\x70\xc8\x9d\x37\xf8\x3b\xd0\x5e\xf3\x8d\x4d\xeb\x9a\x7f\xf7\x14\x65\xfb\x2b\x31\xfd\xe6\xf4\x20\xb4\xad\x2c\x02\xba\x18\xce\x7e\x1a\xde\xdd\xdd\xf4\xb8\x12\x5b\x8d\xf1\xa3\x8f\xa4\xe6\x53\xbc\x7e\xf4\xf1\xc0\xc8\x4f\x89\x2b\x3e\xf4\xbe\x28\x25\x58\xda\x12\x6f\x2d\xff\xd4\xfe\xd9\xc9\xff\x74\xc0\x17\x1a\x52\x6c\xe7\x77\x10\xc7\x06\x9d\xd9\xc0\x15\xc4\xb1\xf6\xae\xf6\x0e\x52\x57\xd5\x14\x0e\xd2\x05\x9d\x48\x92\x76\xc0\x6f\x4b\x76\x71\xf5\x9d\xf5\xd5\x31\xf1\x17\x12\xe8\x20\xb4\xfb\x67\xc7\x0c\xc4\xa3\xe3\xc7\xf8\xfe\xc3\xf2\x2b\xd2\xa8\x3a\xcd\xf1\xe3\x61\x3a\x71\x23\xa8\x8e\x28\x91\x8e\xc6\x7f\x9b\x09\xb3\xf1\x68\x71\xb7\x4f\x92\xf5\x79\x72\xfe\x34\x39\xfb\x8f\x02\x7a\xfa\xd0\x71\xcb\xf9\x1d\xec\xb2\xaa\x10\xae\xf4\xd9\xc3\x4c\xb2\xa2\xb0\x29\x37\x22\xa6\x39\x62\xd3\x2e\xb1\x6c\x4a\x1b\x83\xd4\x2c\x4f\x1f\x7d\x3c\x86\xf6\x29\x6d\xed\x88\x3f\x7b\x68\x47\xcf\x36\x23\xa8\x17\x25\x94\x04\xbf\x07\x37\xde\x7f\x18\x3d\x34\x3b\xea\x83\x43\x29\x77\xc3\xd1\x51\xc9\x08\x47\x6b\x8b\x50\xdb\x4d\xfc\x44\x38\x68\x04\x79\xaf\x44\xbe\xda\x5d\x08\xbb\xe2\x05\x54\xeb\xd3\xff\xda\xde\x4d\x3b\xe0\x5e\x74\x0b\x81\x36\xd4\x0e\x21\xde\x0b\x67\x69\x79\x9a\x8f\x5f\xce\x16\xaf\xc6\x93\x6f\x2f\x07\x61\xed\x9c\x8f\x5f\x2e\x6e\x67\xaf\xe0\xa4\x29\x05\x2f\xc1\x60\x8c\xf7\xc8\xbd\x0b\x1b\xcd\x21\xbc\xcc\x17\x1f\x84\x94\xec\x70\xdf\xb0\xa5\x6e\xde\x67\xbe\x48\x78\x21\xfe\x5f\xe4\x37\xe7\xb4\x7f\x5f\x7d\x1f\xcd\x17\xd3\xd7\xf3\xf1\xcb\xc9\xf0\xee\x40\x1f\x79\xad\x31\xac\xde\x61\x0a\xb7\xa8\xf6\xa6\x3d\x9a\x18\xf5\x69\x67\x36\xb5\x16\xb4\xfa\xd2\xb5\x52\xaf\x8a\x34\xf3\x42\xb6\x2b\x59\xa9\x9b\xdd\xc2\x4c\x5f\x5d\xd4\x87\x30\x3b\xc2\xda\x14\x5e\x7e\xf3\xd6\x81\x44\x67\xc1\x5b\x5a\xce\xc1\xd7\xed\xda\x4d\x6b\x4f\x61\x21\xc3\xa5\x36\x6d\x08\x84\xf2\xd4\xe9\xb5\xa2\xac\xee\x10\x11\xc0\x92\x4e\x67\xba\xf8\x68\xde\xab\xa2\x0d\xed\x16\xb1\xb0\xf0\x7a\xfc\xfc\x3c\xea\xef\x00\x35\x08\x12\xd7\x48\x4d\x2f\x40\xd8\x03\xef\x8e\xb6\x76\xdb\xfe\x1b\xf4\xf6\xc6\xf5\x06\xd0\x7b\xb0\x46\xf7\xe0\x1f\x74\x9f\x62\x58\x41\xf7\x69\xa5\x21\xc3\xa0\x71\xbb\xd6\x52\x02\xad\x99\x11\x3a\xd8\xb7\x5d\x71\xdb\x68\x0f\xc2\xd2\x2a\xd1\x0d\x00\x1d\x4f\x28\x76\x93\xe9\xe2\xf6\xd9\xce\x69\x4f\xb4\x92\x9b\x27\x01\x7a\xae\x79\x38\x31\xc2\x95\x38\x08\x62\xf7\xf8\x88\x96\x8e\x56\x23\xf2\x1c\x15\xdd\xeb\xf4\xae\x74\xbe\x3d\x3e\x6f\x27\x8b\xd9\xbb\xd7\xd3\xf1\x64\x41\x86\x3d\x30\xe5\x81\x9d\x96\xbe\xd1\x3a\x40\x26\x7e\x65\xf4\xd0\xd1\x13\x92\x61\x6b\xf8\xab\xe1\x08\x58\x9e\x87\xbb\x9b\x59\x2b\x0a\x45\x60\x0f\x92\xf1\xa0\x23\x1c\x6f\x13\x79\x2a\xac\xf5\x68\xd3\xcb\xcb\xef\x9f\xf6\xc3\xbf\xb9\xae\x88\x3b\xbe\xb8\xbe\xbe\xbe\xbe\xb8\xbc\xba\xfa\x8b\x72\x2e\x2f\x7f\xb8\xb8\xba\x7e\x7a\x7d\x19\xfd\x2b\x00\x00\xff\xff\xff\x22\x99\x5c\xeb\x11\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseCleanInstall = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x51\x6f\xdb\x36\x14\x85\xdf\xf9\x2b\xce\xac\x62\xd8\x8a\xc8\x4a\xf3\x32\x60\xc5\x86\x79\x49\x86\x19\x2d\x6c\x20\x76\x57\x14\xdb\x1e\xae\xa8\x2b\xe9\x22\x12\xc9\x91\x57\x75\xfc\xef\x07\x2a\x71\x10\xa3\xd1\x93\xc8\x73\xc8\xf3\xf1\x90\xc5\x77\x55\x2d\xae\x4a\xbd\x31\x05\xae\x7d\x38\x46\xe9\x7a\xc5\xd5\xe5\xbb\x9f\xb0\xef\x19\x1f\xa6\x9a\xa3\x63\xe5\x84\xd5\xa4\xbd\x8f\x69\x69\x0a\x53\xe0\xa3\x58\x76\x89\x1b\x4c\xae\xe1\x08\xed\x19\xab\x40\xb6\xe7\x93\x72\x81\xbf\x38\x26\xf1\x0e\x57\xcb\x4b\xfc\x90\x0d\x8b\x27\x69\xf1\xe3\x7b\x53\xe0\xe8\x27\x8c\x74\x84\xf3\x8a\x29\x31\xb4\x97\x84\x56\x06\x06\x3f\x58\x0e\x0a\x71\xb0\x7e\x0c\x83\x90\xb3\x8c\x83\x68\x3f\xc7\x3c\x6d\xb2\x34\x05\xbe\x3c\x6d\xe1\x6b\x25\x71\x20\x58\x1f\x8e\xf0\xed\x4b\x1f\x48\x67\xe0\xfc\xf5\xaa\xe1\xe7\xaa\x3a\x1c\x0e\x4b\x9a\x61\x97\x3e\x76\xd5\xf0\x68\x4c\xd5\xc7\xf5\xf5\xed\x66\x77\x5b\x5e\x2d\x2f\xe7\x25\x9f\xdc\xc0\x29\x21\xf2\x7f\x93\x44\x6e\x50\x1f\x41\x21\x0c\x62\xa9\x1e\x18\x03\x1d\xe0\x23\xa8\x8b\xcc\x0d\xd4\x67\xde\x43\x14\x15\xd7\x5d\x20\xf9\x56\x0f\x14\xd9\x14\x68\x24\x69\x94\x7a\xd2\xb3\xb2\x4e\x74\x92\xce\x0c\xde\x81\x1c\x16\xab\x1d\xd6\xbb\x05\x7e\x5f\xed\xd6\xbb\x0b\x53\xe0\xf3\x7a\xff\xe7\xf6\xd3\x1e\x9f\x57\x77\x77\xab\xcd\x7e\x7d\xbb\xc3\xf6\x0e\xd7\xdb\xcd\xcd\x7a\xbf\xde\x6e\x76\xd8\xfe\x81\xd5\xe6\x0b\x3e\xac\x37\x37\x17\x60\xd1\x9e\x23\xf8\x21\xc4\xcc\xef\x23\x24\xd7\xc8\x4d\xee\x6c\xc7\x7c\x06\xd0\xfa\x47\xa0\x14\xd8\x4a\x2b\x16\x03\xb9\x6e\xa2\x8e\xd1\xf9\xaf\x1c\x9d\xb8\x0e\x81\xe3\x28\x29\x5f\x66\x02\xb9\xc6\x14\x18\x64\x14\x25\x9d\x67\xbe\x39\xd4\x32\xbf\xa5\x15\x92\x8d\x12\x14\xec\x2c\x85\x34\x0d\x94\x9b\x99\xef\x68\x1c\xbd\xc3\x8d\xb7\xf7\x1c\x65\xcc\x49\x81\x54\x39\xba\x99\x45\x5c\x52\x1a\x86\x39\x96\xec\x3d\x75\x9c\x4c\x91\x53\x73\x82\x83\x1d\x98\x66\xa6\x29\xcc\x91\x93\x73\x6c\x39\x25\x8a\xc7\xd3\x52\x50\x54\x69\xc9\x6a\x7e\xaa\xe0\x65\xb7\x7c\x5c\x55\x9e\x74\x09\x9a\x6f\x30\x81\xeb\xa7\x1f\xeb\x9d\xd3\x48\xf6\xde\x98\xc4\x8a\xd2\x83\x63\xe4\x07\x51\x63\xa4\xc5\xdf\x78\x53\xe0\x17\x5c\xe2\xdf\xf7\x33\x84\x01\xd8\xf6\x1e\xbf\x7e\x7f\x85\xc5\xc6\x3f\x73\x9e\x3a\xe4\x66\x91\x2d\x0f\xa2\x78\x67\x5a\x31\x86\x82\x96\x1d\x2b\xa6\xd0\x90\xf2\xf3\xf0\xc4\x53\x1e\x51\x96\xce\x9f\xf8\xca\xc8\xb9\x23\x76\x4d\xc2\xe2\xcd\x6f\x8b\x67\xff\x7c\x0a\x94\x47\x13\x47\x94\xb1\xc5\x3f\x06\x40\xf5\x95\x62\x65\xf3\x63\xae\x1a\xae\xad\x77\x6d\xf5\xf6\x85\x32\x48\x5d\x51\xd0\x6a\x90\xa4\xe9\x5c\xf1\xdd\xf3\x58\xc7\x70\xa6\xbd\x1c\x4f\x29\x56\xa9\xa7\xc8\x55\xe3\xed\x2b\xb3\x23\xb9\x57\x66\x07\x6f\x69\xa8\xde\x9a\xff\x03\x00\x00\xff\xff\x02\x8e\x04\x89\x60\x04\x00\x00")

func imagesBaseCleanInstallBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseCleanInstall,
		"images/base/clean-install",
	)
}

func imagesBaseCleanInstall() (*asset, error) {
	bytes, err := imagesBaseCleanInstallBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/clean-install", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypoint = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xdf\x8f\xd3\x46\x10\x7e\xf7\x5f\x31\x4d\x78\x00\x29\xb6\xe1\x54\x55\x2a\x05\xd4\xf4\xee\x10\x11\x28\x41\x97\x50\x8a\xaa\xea\x58\xef\x8e\xed\x51\xec\x59\x77\x77\x7d\x4e\x84\xf8\xdf\xab\x59\x27\xb9\x0b\xb4\x52\xf3\x12\xef\xee\xfc\xf8\x76\xbe\x6f\x66\xa7\x3f\xe4\x05\x71\x5e\x28\x5f\x27\xc9\x14\x2e\x6d\xb7\x77\x54\xd5\x01\x2e\x9e\x3e\xfb\x19\x36\x35\xc2\xdb\xbe\x40\xc7\x18\xd0\xc3\xbc\x0f\xb5\x75\x3e\x4b\xa6\xc9\x14\xde\x91\x46\xf6\x68\xa0\x67\x83\x0e\x42\x8d\x30\xef\x94\xae\xf1\x78\x32\x83\xdf\xd1\x79\xb2\x0c\x17\xd9\x53\x78\x2c\x06\x93\xc3\xd1\xe4\xc9\x2f\xc9\x14\xf6\xb6\x87\x56\xed\x81\x6d\x80\xde\x23\x84\x9a\x3c\x94\xd4\x20\xe0\x4e\x63\x17\x80\x18\xb4\x6d\xbb\x86\x14\x6b\x84\x81\x42\x1d\xd3\x1c\x82\x64\xc9\x14\x3e\x1d\x42\xd8\x22\x28\x62\x50\xa0\x6d\xb7\x07\x5b\x3e\xb4\x03\x15\x22\x60\xf9\xd5\x21\x74\xcf\xf3\x7c\x18\x86\x4c\x45\xb0\x99\x75\x55\xde\x8c\x86\x3e\x7f\xb7\xb8\xbc\x5e\xae\xaf\xd3\x8b\xec\x69\x74\xf9\xc0\x0d\x7a\x0f\x0e\xff\xee\xc9\xa1\x81\x62\x0f\xaa\xeb\x1a\xd2\xaa\x68\x10\x1a\x35\x80\x75\xa0\x2a\x87\x68\x20\x58\xc1\x3b\x38\x0a\xc4\xd5\x0c\xbc\x2d\xc3\xa0\x1c\x26\x53\x30\xe4\x83\xa3\xa2\x0f\x67\xc5\x3a\xa2\x23\x7f\x66\x60\x19\x14\xc3\x64\xbe\x86\xc5\x7a\x02\xbf\xcd\xd7\x8b\xf5\x2c\x99\xc2\xc7\xc5\xe6\xcd\xea\xc3\x06\x3e\xce\x6f\x6e\xe6\xcb\xcd\xe2\x7a\x0d\xab\x1b\xb8\x5c\x2d\xaf\x16\x9b\xc5\x6a\xb9\x86\xd5\x6b\x98\x2f\x3f\xc1\xdb\xc5\xf2\x6a\x06\x48\xa1\x46\x07\xb8\xeb\x9c\xe0\xb7\x0e\x48\xca\x88\x46\x6a\xb6\x46\x3c\x03\x50\xda\x11\x90\xef\x50\x53\x49\x1a\x1a\xc5\x55\xaf\x2a\x84\xca\xde\xa1\x63\xe2\x0a\x3a\x74\x2d\x79\x21\xd3\x83\x62\x93\x4c\xa1\xa1\x96\x82\x0a\x71\xe7\xbb\x4b\x65\x49\xe2\x31\x40\x6a\x01\x9d\xc3\x1d\x85\xe3\x92\x6d\xcf\x1e\x4f\xcb\x8e\x3a\x2c\x15\x35\x49\xa2\x2d\x97\x54\xf5\x0e\x6f\x3b\x67\x77\xfb\xc7\x4f\xe0\x4b\x02\xd0\x6e\x0d\x39\x48\x3b\xc8\x31\xe8\xdc\xef\x7d\xc0\xd6\x1c\xfe\x73\x6d\x59\x48\x47\x67\x32\x8f\xee\x8e\x34\x66\x26\x4f\x00\xb4\x0a\xf0\xe2\xc5\xf5\xea\x35\xbc\xfa\xdf\x6e\xa2\x8b\x34\x66\xce\x04\x49\xf2\xe7\x7a\x3c\xfa\x2b\xb9\xe6\x3b\x72\x96\x5b\xe4\xf0\x72\xf2\x66\xb3\x79\x7f\xfb\xfe\x66\xf5\xc7\xa7\x97\x8f\xbe\xdc\x2f\x9e\xa7\x5f\x27\xdf\x1b\xae\xcf\x2c\xd7\xff\x65\xba\x5c\x9d\xec\x8e\x9f\xa3\xd1\xea\x75\xf2\x35\x49\x4a\xda\xdd\xb6\xb6\xe7\x70\x28\xc9\x14\x18\x35\x7a\xaf\xdc\x1e\x2c\x37\x7b\x18\x6a\x64\x69\x1f\xc7\x3e\x75\xd8\xaa\x4e\x14\x85\x2c\x0a\x8d\x6a\x12\x5a\x6a\xeb\xc3\x0c\x8a\x3e\x40\xad\x5c\x2b\x9a\x8e\x91\xa4\xbd\x0b\x62\x09\x15\xa7\x40\xcc\x03\xbe\xb6\x7d\x63\xa0\x40\xb0\x03\x8f\xa2\x77\xd6\x06\xe1\x1d\x6a\x75\x37\x8a\xc7\x63\xe8\xc9\x40\x41\x41\x2a\x5e\xdb\x81\xa3\xd1\xf3\x68\x79\x1f\x2c\x1e\xb6\xd6\x40\xea\x1f\xee\xc6\xec\x07\x5e\x52\xe2\x54\xa5\x27\x56\x8e\xe9\x63\x26\x87\xca\x8c\xb7\x14\xf6\xa2\x97\x30\xe5\x0f\x2d\x5c\x4a\xe3\xa1\xdf\x06\xdb\xc5\x3e\x1e\x68\x4b\xf9\xfa\xd0\x78\x27\xde\x2f\x8f\xa1\x17\x1c\xd0\x95\x4a\x63\x3e\x46\xb2\x03\xde\xa1\x9b\xc1\x80\xc0\xd2\xc1\x36\x36\x4d\xa8\x89\x2b\x0f\xa5\xb3\x2d\x7c\x36\x56\x6f\xd1\x81\xeb\x19\xd2\xb4\x73\x74\x47\x0d\x56\x68\x3e\x43\x96\x65\x31\x88\x14\x65\x9c\x5b\x8d\xaa\x40\x35\xde\x42\xad\xba\x0e\xd9\xcb\x40\x68\xd5\x16\x23\x74\x70\xc3\x0c\x54\x6b\xb9\xf2\xe1\x2c\x8f\x88\x3c\x56\x3d\xb5\xe0\x30\x7e\xce\x9c\x1d\xaf\x7b\x64\x5f\xe9\x9a\x18\x6f\xc9\x9c\x24\x70\x85\x4d\x1c\xc8\xc2\xc4\xe1\x38\x25\x03\xd8\x16\x68\x0c\x1a\x19\x44\x72\xc4\xd6\x20\x50\x2b\xad\x2c\x38\x2b\x64\x74\x4a\xfc\x14\x30\x0e\x60\x19\xb3\x83\x0e\xc8\x8b\x6a\xee\x95\x55\xa0\x56\x32\x92\x0b\x1b\x6a\xd8\xf6\x85\xe4\x8b\x31\x46\xec\x32\x95\x2d\x23\x07\x0f\x0d\x6d\x11\x06\x14\xb6\x18\x43\x0c\x27\x8e\x0f\x50\x91\x94\x9d\x55\xd3\xec\xa5\x24\x32\xeb\x88\xab\x9e\x7c\x1d\xf1\x79\x81\xe0\x5a\x48\xcb\xb1\xc9\xef\x1d\x13\x38\x49\xe4\x7e\x33\x15\xe1\x75\xc7\xd2\x74\xce\x9a\x5e\x87\x5b\x56\x2d\x9e\x8a\x13\x0e\xb7\x51\xe0\x5b\xd5\x34\x50\xd2\x4e\x12\xd7\x64\x46\xe9\xc6\x69\xd5\xec\x65\xac\xd5\xca\x19\xd1\x4a\xbc\x9a\xd8\x91\xf7\x3d\xc2\xf4\xc7\x8b\x9f\xce\xc4\x56\x51\xa8\xfb\x22\xd3\xb6\xcd\xb7\xa7\xe7\x30\xf5\x54\xf9\x7c\x4b\x6c\xf2\xe8\xe6\xf3\xd1\x0d\x75\x6d\x61\x22\xfb\x13\x78\x05\xa3\xc1\x43\xa0\x67\x94\xdb\x59\x41\x6c\xfe\xc5\x2a\x4a\x20\xd7\x8d\xf2\x3e\x37\x2d\xe5\xf4\x4d\x90\xaf\xf2\x5c\x8b\x2e\x3b\x87\x29\x31\x05\xc1\xdf\x77\xfe\x7e\x60\x7c\x23\x9e\xef\x0a\xf6\xed\xcc\x95\x80\x03\xc2\xa0\x38\xc4\x3a\x69\xdb\xb6\x52\x97\xc7\xb8\xeb\x50\x87\xf1\x89\x2b\xf0\x48\xca\x93\xc3\xf2\xfd\xe2\xea\x99\x3c\x77\x80\x3b\xd4\xf1\x15\x0c\x49\xfc\x9c\x3c\xfa\x75\x92\xfc\x13\x00\x00\xff\xff\x65\xe1\x86\xcd\x60\x08\x00\x00")

func imagesBaseEntrypointBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypoint,
		"images/base/entrypoint",
	)
}

func imagesBaseEntrypoint() (*asset, error) {
	bytes, err := imagesBaseEntrypointBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":    imagesBaseDockerfile,
	"images/base/clean-install": imagesBaseCleanInstall,
	"images/base/entrypoint":    imagesBaseEntrypoint,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile":    {imagesBaseDockerfile, map[string]*bintree{}},
			"clean-install": {imagesBaseCleanInstall, map[string]*bintree{}},
			"entrypoint":    {imagesBaseEntrypoint, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
