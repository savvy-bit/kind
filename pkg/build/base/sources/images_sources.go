// Code generated by go-bindata.
// sources:
// ../../../../images/base/10-restart.conf
// ../../../../images/base/Dockerfile
// ../../../../images/base/clean-install
// ../../../../images/base/entrypoint
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBase10RestartConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcb\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4e\xf1\x20\x17\xd0\x03\xe4\x00\x82\x95\x8b\x55\x48\x31\x26\x0f\x1d\x58\xb7\x98\x19\x23\xde\x5e\x96\x90\xf2\x7d\xbc\x7f\x00\x5b\x7c\x9c\xc8\x17\x11\xf4\xcd\x16\xc2\x02\xce\x48\xf5\xe4\x2a\x53\xd9\x75\x96\xdb\x6e\xa3\xd6\xaf\xfe\xe2\x98\x85\xcb\x78\x16\x19\xb0\x5a\xe8\xa3\x12\xae\x49\x54\x7b\x5b\x5a\x7b\xca\x74\x6f\x96\xb3\x94\x7e\xbd\x76\xbc\xb4\xa4\x6f\x5a\x7b\x77\x92\x7f\x00\x00\x00\xff\xff\xf0\x1c\x60\xa0\x80\x00\x00\x00")

func imagesBase10RestartConfBytes() ([]byte, error) {
	return bindataRead(
		_imagesBase10RestartConf,
		"images/base/10-restart.conf",
	)
}

func imagesBase10RestartConf() (*asset, error) {
	bytes, err := imagesBase10RestartConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/10-restart.conf", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xfb\x6e\xdb\x46\xb3\xff\x5f\x4f\x31\x90\x82\xc6\x76\x45\x52\xbe\xc5\x4e\x4e\x9d\x03\xc5\x51\x52\xa1\x8e\x14\x48\x4a\x8b\xa0\xa7\x08\x96\xcb\x11\xb9\xd5\x72\x97\x67\x2f\x92\x95\x34\xef\xfe\x61\x96\xd4\xc5\x8e\xd3\xf4\x43\x5b\xc3\x80\x24\xee\xec\xdc\xe7\x37\x33\xec\xc0\xb5\xae\xd6\x46\xe4\x85\x83\x93\xde\xf1\x25\xcc\x0a\x84\x9f\x7c\x8a\x46\xa1\x43\x0b\x7d\xef\x0a\x6d\x6c\xdc\xea\xb4\x3a\x70\x23\x38\x2a\x8b\x19\x78\x95\xa1\x01\x57\x20\xf4\x2b\xc6\x0b\xdc\x9c\x74\xe1\x67\x34\x56\x68\x05\x27\x71\x0f\x0e\x88\xa0\xdd\x1c\xb5\x0f\xff\xa7\xd5\x81\xb5\xf6\x50\xb2\x35\x28\xed\xc0\x5b\x04\x57\x08\x0b\x73\x21\x11\xf0\x96\x63\xe5\x40\x28\xe0\xba\xac\xa4\x60\x8a\x23\xac\x84\x2b\x82\x98\x86\x49\xdc\xea\xc0\xfb\x86\x85\x4e\x1d\x13\x0a\x18\x70\x5d\xad\x41\xcf\xf7\xe9\x80\xb9\xa0\x30\xfd\x15\xce\x55\xcf\x92\x64\xb5\x5a\xc5\x2c\x28\x1b\x6b\x93\x27\xb2\x26\xb4\xc9\xcd\xf0\x7a\x30\x9a\x0e\xa2\x93\xb8\x17\xae\xbc\x53\x12\xad\x05\x83\xff\xef\x85\xc1\x0c\xd2\x35\xb0\xaa\x92\x82\xb3\x54\x22\x48\xb6\x02\x6d\x80\xe5\x06\x31\x03\xa7\x49\xdf\x95\x11\x4e\xa8\xbc\x0b\x56\xcf\xdd\x8a\x19\x6c\x75\x20\x13\xd6\x19\x91\x7a\x77\xc7\x59\x1b\xed\x84\xbd\x43\xa0\x15\x30\x05\xed\xfe\x14\x86\xd3\x36\xbc\xe8\x4f\x87\xd3\x6e\xab\x03\xbf\x0c\x67\x3f\x8e\xdf\xcd\xe0\x97\xfe\x64\xd2\x1f\xcd\x86\x83\x29\x8c\x27\x70\x3d\x1e\xbd\x1c\xce\x86\xe3\xd1\x14\xc6\xaf\xa0\x3f\x7a\x0f\x3f\x0d\x47\x2f\xbb\x80\xc2\x15\x68\x00\x6f\x2b\x43\xfa\x6b\x03\x82\xdc\x88\x19\xf9\x6c\x8a\x78\x47\x81\xb9\xae\x15\xb2\x15\x72\x31\x17\x1c\x24\x53\xb9\x67\x39\x42\xae\x97\x68\x94\x50\x39\x54\x68\x4a\x61\x29\x98\x16\x98\xca\x5a\x1d\x90\xa2\x14\x8e\xb9\xf0\xe4\x0b\xa3\xe2\x56\xab\x03\x0b\xa1\x32\xe0\xd2\x5b\x87\x06\x52\x46\xa6\x96\x2c\xc7\xe0\xd8\x57\xda\x80\x5d\x5b\x87\x65\x06\xdf\x43\xa6\xf9\x02\x0d\x70\xad\xe6\x22\xf7\x26\x70\xa5\x8c\xc8\x20\x45\xa9\x57\x5d\xb0\x8d\xca\x73\x2d\xa5\x5e\x91\x42\x06\xe7\x68\x50\x71\xb4\xcf\x5a\x9d\x10\x56\xdb\xc4\x75\x4e\xd1\x40\xbb\x70\xba\x0a\xc1\x5d\x89\x85\x48\xa6\x4d\x34\x92\x46\x68\x72\xad\x15\x65\x0c\x9a\xa1\x72\x68\xe6\x8c\x63\xb2\xc7\x27\xc3\x25\x4a\x5d\xa1\xb1\xb1\xc1\xac\x60\x2e\xe6\xba\x4c\x52\xa9\xf3\xe4\xa4\x77\x7c\x96\xf4\xce\xe9\xdf\x78\x45\xce\x89\x1a\x9e\x11\x25\xa8\x50\x51\x6d\x4d\xc4\x37\x12\xfe\x3a\xe3\x27\x49\xef\x69\x72\x7c\xfa\x05\x63\xa1\x22\x16\x29\xad\xa2\xca\x88\xa5\x90\x98\x63\xb6\xcf\xbe\xd5\x9f\xbc\xa6\x4c\x19\x7c\x18\xbe\xe9\xbf\x1e\x5c\xb5\x7d\xea\x95\xf3\xcf\x8e\x9f\xc6\xbd\xb3\x76\xeb\xd5\x64\xfc\x06\x1e\x7d\xda\x11\x7c\xa6\xe8\x58\x74\x94\xa8\xf0\x72\xf0\x62\xd8\x1f\x7d\x78\x35\x19\x8f\x66\x83\xd1\xcb\x2b\xa5\x95\x20\x97\x30\xee\xc4\x12\xc1\x3a\x5d\x59\xb0\xba\x44\x60\x95\x83\x15\x0b\xf9\x60\xbb\x75\xb1\x0a\x1b\x8a\xb7\xd5\x01\x06\x06\x99\x04\x66\x72\x5f\xa2\x72\x5d\x58\xe1\x63\x83\x70\xc0\xd2\x43\x6f\x49\x0e\xe9\xe8\x34\xe4\xe8\x80\x81\xc3\xb2\xd2\x86\x99\x35\x0c\x46\x3f\x03\xcb\x99\x50\x71\xb0\xe2\xcf\xb5\x69\xb5\xae\xc7\x6f\xdf\x03\x97\xc8\x54\x24\x94\x75\x4c\x4a\x48\xbc\x35\x89\xd4\x9c\xc9\x24\x15\x2a\xb9\x73\xd8\x9a\xbc\x1b\x01\x2f\x4a\x9d\xc1\xf7\xb7\x7f\x4e\xd9\xea\xc0\x6b\x74\x90\x61\x85\x2a\x43\xc5\x05\xda\x56\x27\x00\xe0\x2e\x75\x81\x49\x83\x2c\x5b\x43\xc1\xec\x33\xb0\xb6\xe8\x92\x53\xba\x60\x15\xab\xb2\x40\x5d\xfb\x24\x35\x7a\x81\x0a\x32\xbd\x52\x20\x94\xd3\x70\x80\x8c\x17\xa1\xb4\x41\x0a\x85\x87\x94\xb3\x11\x54\x8c\x2f\x58\x8e\x16\x14\x65\x6c\x40\x10\xe3\x15\x58\x34\x4b\xc1\xd1\xc2\x41\x13\xff\xc3\x40\x7d\x3d\x19\xc2\xc1\x36\xea\xcd\xc3\xfb\x2c\xa8\x96\x17\x3b\xc0\x26\xf4\xd4\x0a\x95\xb3\x81\xba\x14\x96\xef\xae\x84\xfa\xf4\x16\x2d\x08\x67\x51\xce\x6b\x73\x15\xac\xb0\xf6\xb0\xaf\xe0\xc0\x60\xa9\x97\x14\x3e\xaf\x56\x4c\x11\x3e\x6d\xaa\x76\xa3\xe5\xe1\xde\xb5\x4c\xd8\x00\x8c\x8b\xd2\xe6\x04\x86\xbf\x6b\x6f\x14\x93\x59\x00\x7f\x8b\x20\x75\x0e\xa8\x9c\x11\x68\x61\xa5\xbd\xa4\xfa\x0e\x55\x1f\x52\xe4\x30\x20\xc3\xd1\x37\xfe\x7e\x98\x0d\xde\xbc\x1d\x4f\xfa\x93\xf7\xcf\xbf\x45\x7a\x74\x74\x14\x58\xfe\x12\xc0\xa3\x8e\x87\xd4\x2c\xa3\x36\xe1\x0c\xa4\x42\x51\x06\x86\xb6\xc2\xc0\x09\xb5\x06\x96\x65\x82\xc0\x87\x49\x98\x23\x73\x3e\xc0\xf7\x0a\x9b\xee\xc4\xdc\x26\xe1\xd7\xe8\xa0\x44\x93\x63\x06\xc9\xc6\xa1\x59\xdd\x16\xa7\x88\xcf\xb6\xe5\x9e\x0b\x57\xf8\x34\xd4\xf8\x2e\x72\xfb\x5f\x2b\x2f\x65\x72\x7a\x72\xfe\x34\xdc\x0d\xf9\xd3\xa8\x45\xdf\xbc\x90\xae\xd6\xaf\x60\x7c\x91\xd0\xef\x2c\xe1\xce\x10\x40\xc4\xb6\x20\x69\xda\x1b\xc2\xc0\x87\x24\xbe\x40\x35\x2b\x70\x20\x33\x34\xfb\x22\x9d\x41\x4c\x28\xf6\xad\x0e\xf4\x77\xf6\x72\x5d\x96\xc2\xed\x83\xe9\xb7\x59\xd5\x77\x12\x9e\x5e\xf0\x8b\xcb\x1e\x9b\x9f\x9c\x3e\x3d\x63\x69\xef\x32\x3b\xcf\x2e\xd9\xe9\xd3\xd3\x13\xce\x2e\xce\x4e\x2f\x7a\x17\x67\x0c\x8f\x2f\x1a\x1b\xc7\x2f\xc7\x07\x29\x2a\x57\x20\x12\xbf\xc3\x67\x10\x92\xac\x69\xff\x9a\x3a\x7d\x14\x29\x1d\x79\x45\x8e\x25\x3f\x6c\x1c\x0c\xbe\xb2\xce\x20\x2b\xe3\xbf\x92\x29\x3f\x24\xff\x7d\xa6\xfc\x4b\xf8\x1f\x50\xe8\x0e\x68\xfd\x5f\x2b\x8c\x23\xbb\x6a\x6a\x58\xd8\xb5\x5d\x82\x14\x69\xf3\xbb\xb7\x25\xdc\x79\x7d\xff\x91\x72\x26\xf8\xa8\x72\x54\x77\x16\x44\x65\xb4\x77\x78\x02\xe8\x0a\xa7\xb5\x04\xab\x39\x73\xe0\x9d\x90\x91\x14\xca\xdf\x42\xa9\xbd\x72\x80\x69\x73\xc1\x67\xb8\x84\x05\xe1\xe3\x86\x6b\xca\x6c\x01\x9c\x45\x1c\x8d\xa3\x69\x80\x05\x1c\xf1\x46\x82\xb1\x6b\xc5\x1b\xba\xef\xbe\x83\x39\xc1\x47\x22\x45\xba\xed\xa9\xf5\x27\x7d\x08\x25\x5c\xec\x98\xc9\xd1\xc5\x84\x1b\x36\x81\x48\xb1\x12\xa1\xbd\x31\xd4\x95\x15\x4d\x7a\x36\xb2\xe8\x7c\x15\x37\x68\xd2\x86\x28\x43\x89\x0e\x77\x62\x4c\x09\xd1\xfc\x41\x39\xa5\x97\x4e\x44\xde\xa2\xb9\x2b\xea\xe8\x8b\xcb\xe8\xf8\xfd\xcb\x47\x5f\x25\x7e\x40\x52\xe8\x19\xd1\xdc\x7e\x4b\xce\x43\xce\xa0\x64\x70\xf7\x6f\x92\xdb\xff\xc6\x75\x72\x2f\x77\xf2\x2f\x71\x48\x99\x15\xfc\xab\x8a\x23\x2f\x34\xb4\x27\xc8\xb2\x9f\xde\xd8\xfc\x4a\xe9\x36\x3c\x7f\x7e\xd7\x61\x1b\x10\x8f\x09\xa8\x77\x37\xeb\x63\xee\x24\xa0\x0a\xa0\xff\x45\x86\x12\xfb\xdb\x4a\x1b\x07\xfd\xc9\xf5\x8f\x57\x8f\x0e\xb2\x6a\x91\x43\x44\x43\x8c\x72\x11\x33\xbc\x10\x0e\x39\x81\x2c\xfc\x01\x34\xec\x3d\xb6\x49\x55\xf1\x27\x67\x28\xeb\x4f\x89\xc9\xe3\xc3\x1d\xb3\x90\x84\xd1\x7c\x7a\x03\x91\xfe\xa2\x97\x3b\xb3\xcd\xe0\xf6\xa6\x8a\xad\xd3\x86\xe5\x18\xe7\x5a\xe7\x12\x59\x25\x6c\x5d\xc6\x3b\xf0\x89\x08\x07\xa3\x0c\x97\xfb\xa8\x16\x0a\x25\x79\xf4\x89\xb4\xfe\x4c\x9c\xdb\x7b\x3a\x7c\x6d\x96\xd8\xca\xdf\x3a\x35\xd3\x0a\xa1\xa9\xf7\x30\x42\x37\x7d\xb7\x4d\xa3\x06\xcb\x32\x30\x68\x1d\x33\x0e\x68\xc8\x36\x22\x43\xea\xff\x3b\x35\xea\x51\xe7\xb8\x17\x35\x64\xb5\xfb\x1f\x4a\xe5\xdd\x9d\x4d\x19\xc5\x59\x42\x42\x32\x4c\x7d\xbe\x1f\x97\x65\xb3\x8f\x31\x1a\xcc\x0d\x32\x87\x90\xe1\x9c\x79\xe9\x9a\xd9\xbb\xd6\xac\x69\x09\x72\xdd\xdd\x76\xf4\x30\x00\x56\xd2\xe7\x42\xd9\xd0\xe9\xb5\x7a\x5c\x2f\x6d\x09\x58\x5f\x51\x94\x6b\x94\xdb\x09\x8b\xa2\x8d\xb8\xad\x63\xca\x45\x26\x0c\x44\x55\x6d\xc6\x83\x09\x43\xae\x7b\xdc\x48\xcd\x3e\x6c\x24\x5e\xc1\xaf\x6d\xe6\xe7\xb6\xdd\x85\x76\xea\x4c\xfd\xe5\xe3\xdc\xb6\x7f\x7b\x0c\xcf\xef\x73\x4b\x6a\x5b\x62\xa7\x4b\xb9\x17\xb9\x9d\xb4\xfa\x7c\x6b\xfa\xf3\x3f\xe5\x40\x8e\x1c\x36\xa8\x7d\x3d\x1a\xd6\xed\x99\x06\x18\xa7\x21\xd1\x95\x4b\xb8\x12\x94\x02\x0f\xb7\xb6\x4c\x73\x58\x15\x6b\x48\x60\x45\xe3\x43\x81\x06\xc3\x9c\x7b\x3d\x1a\x7e\xf8\x79\x30\x99\x0e\xc7\xa3\xab\x76\x2f\xbe\x88\xcf\xdb\xdb\xe7\x61\x50\x7f\x37\xb9\xb9\xfa\x56\x22\xef\x06\xbd\xc8\xa0\x44\x66\x31\x51\xe8\x56\xda\x2c\xa2\xc6\x71\x49\x3b\x44\xe5\x1f\x2d\xc3\x86\x19\x69\x3a\xeb\x4f\x5e\xf4\x6f\x6e\xae\xda\x5c\x89\x8d\xc8\xa8\x29\x9c\x68\xf9\xe8\xd3\x9e\x95\x9f\x63\x97\x7f\x6c\x3f\xc8\x25\x98\x5a\x13\x6f\x4c\xff\x5c\xff\x6c\xf8\x7f\x6e\xdf\x07\x01\x4b\x20\x10\x19\x74\x66\x0d\xe7\x10\x45\xda\xbb\xca\x3b\x48\x5c\x59\x51\x3c\x48\x16\x34\x2c\x89\xdb\xde\x7d\x5b\xb0\x93\xf3\x27\xd6\x97\x77\x89\x1f\x48\xd1\xbd\xd8\xee\x8e\x1d\x33\x10\x5d\xdf\x3d\x8c\x6e\x3f\xce\xbf\xc2\x8d\x60\xd9\xdc\x3d\xdc\xcf\x27\x6e\x04\x01\xa8\xbb\x0f\x67\x75\x2a\x4c\x86\xd7\xb3\x9b\x5d\x96\x2c\x8f\xe3\xe3\xb3\xb8\xf7\x2f\x44\x74\x07\xac\xed\x07\x66\xbf\xbd\x2c\xb3\x22\xb7\x09\x37\x22\xa2\xd9\xc2\x26\x4d\xd2\xd9\x64\x33\x58\x27\x8f\x3e\xdd\xd5\xfa\x73\x52\x9b\x18\x7d\x71\x50\x8f\x23\x9b\x64\xa1\xfe\x14\x53\x7e\xfc\x11\x3c\x7c\xfb\xf1\xfa\xbe\x47\x5a\x1d\x70\x28\xe5\x76\x60\xaa\xa7\xf1\x30\x90\x0b\xb5\x79\x81\x70\x20\x68\x5c\x26\xc7\x16\xc8\x17\xdb\x17\x1b\xdb\xc2\x06\x54\xcb\xc3\x7f\xec\x75\x01\xad\xae\x3b\xd6\xb5\x0a\xb4\x58\x37\x1a\xe2\xad\x70\x34\xcf\xc2\x74\xf8\x7a\x32\x7b\x33\x1c\x7d\x7f\xda\x0d\xcb\xc3\x74\xf8\x7a\x36\x98\xbc\x81\x83\x55\x21\x78\x01\x06\x23\xbc\x45\xee\x5d\x58\xc4\xf6\xd5\x4b\x7d\xfe\x51\x48\xc9\xf6\x67\x50\x5b\xe8\xd5\x87\xd4\xe7\x31\xcf\xc5\xff\x8a\xec\xea\xf8\xa4\x77\xfc\xe4\xfc\xa2\x35\x9d\x8d\xdf\x4e\x87\xaf\x47\xfd\x9b\x3d\x79\xe4\xb5\x95\x61\xd5\x56\xa7\xb0\x4b\x68\x6f\xea\x77\x3d\x4c\x86\x6d\x6c\x5d\x69\x41\x1b\xbb\x45\x84\x6a\x91\xd7\x6b\x46\x70\x5e\xa1\x57\xdb\x3d\x3f\x2c\x23\xad\x0e\x84\x79\x82\x9a\x43\x7d\xf2\xbb\xb7\x0e\x24\x3a\x0b\xde\x82\x45\x07\xbe\xaa\x9b\x05\x8d\xc2\xb9\x85\x14\xe7\xda\xd4\x21\x10\xca\x53\x1f\xd4\x8a\x12\xbe\xd1\x88\x14\x2c\x84\x44\xa8\x0c\x86\xe6\xa5\xf2\x3a\xb4\x1b\x8d\x85\x85\xb7\xc3\x97\xc7\xad\xce\x56\xa1\x15\x82\xc4\x25\x12\x20\x06\x15\x76\x8a\x37\xef\x9a\xea\xce\xf9\x2b\xb4\x77\xc6\x51\xbb\xb8\xd7\xb1\xdb\xf0\x5b\xbd\x1a\xd2\xe6\xbc\x4b\x2b\x4d\x2b\x29\x49\xdc\x6c\xe3\x94\x40\x4b\x66\x84\x0e\xf6\x6d\x36\xf3\x3a\xda\xdd\xb0\x6b\x4b\x74\x5d\x40\xc7\x63\x8a\xdd\x68\x3c\x1b\x3c\xdb\x3a\xed\x48\x2b\xb9\x3e\x0a\xaa\x67\x9a\x87\x37\x23\xe1\xe5\x56\x37\xb0\xdd\xe9\x47\xb4\xcd\x18\x90\xa1\x82\x74\x1d\xce\x95\xce\x36\xef\xcc\x06\xa3\xd9\xe4\xfd\xdb\xf1\x70\x34\x23\xc3\xee\x99\x72\xcf\x4e\x4b\xcf\x68\x44\x24\x13\xbf\xd2\x96\x90\xc9\x3a\x19\x36\x86\xbf\xe9\x5f\x53\xeb\x0f\xaf\x0b\x99\xb5\x22\x57\xa4\xec\xc3\xdb\xe0\xdd\xf9\x23\x4b\x84\xb5\x1e\x6d\x72\x7a\x7a\x71\xd6\x09\xdf\x69\x2f\x44\xe5\xa2\x93\xcb\xcb\xcb\xcb\x93\xd3\xf3\xf3\xbf\xc9\xe7\xf4\xf4\xe9\xc9\xf9\xe5\xd9\xe5\x69\xeb\x3f\x01\x00\x00\xff\xff\x7b\x19\x42\xeb\xa2\x16\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseCleanInstall = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x51\x6f\xdb\x36\x14\x85\xdf\xf9\x2b\xce\xac\x62\xd8\x8a\xc8\x4a\xf3\x32\x60\xc5\x86\x79\x49\x86\x19\x2d\x6c\x20\x76\x57\x14\xdb\x1e\xae\xa8\x2b\xe9\x22\x12\xc9\x91\x57\x75\xfc\xef\x07\x2a\x71\x10\xa3\xd1\x93\xc8\x73\xc8\xf3\xf1\x90\xc5\x77\x55\x2d\xae\x4a\xbd\x31\x05\xae\x7d\x38\x46\xe9\x7a\xc5\xd5\xe5\xbb\x9f\xb0\xef\x19\x1f\xa6\x9a\xa3\x63\xe5\x84\xd5\xa4\xbd\x8f\x69\x69\x0a\x53\xe0\xa3\x58\x76\x89\x1b\x4c\xae\xe1\x08\xed\x19\xab\x40\xb6\xe7\x93\x72\x81\xbf\x38\x26\xf1\x0e\x57\xcb\x4b\xfc\x90\x0d\x8b\x27\x69\xf1\xe3\x7b\x53\xe0\xe8\x27\x8c\x74\x84\xf3\x8a\x29\x31\xb4\x97\x84\x56\x06\x06\x3f\x58\x0e\x0a\x71\xb0\x7e\x0c\x83\x90\xb3\x8c\x83\x68\x3f\xc7\x3c\x6d\xb2\x34\x05\xbe\x3c\x6d\xe1\x6b\x25\x71\x20\x58\x1f\x8e\xf0\xed\x4b\x1f\x48\x67\xe0\xfc\xf5\xaa\xe1\xe7\xaa\x3a\x1c\x0e\x4b\x9a\x61\x97\x3e\x76\xd5\xf0\x68\x4c\xd5\xc7\xf5\xf5\xed\x66\x77\x5b\x5e\x2d\x2f\xe7\x25\x9f\xdc\xc0\x29\x21\xf2\x7f\x93\x44\x6e\x50\x1f\x41\x21\x0c\x62\xa9\x1e\x18\x03\x1d\xe0\x23\xa8\x8b\xcc\x0d\xd4\x67\xde\x43\x14\x15\xd7\x5d\x20\xf9\x56\x0f\x14\xd9\x14\x68\x24\x69\x94\x7a\xd2\xb3\xb2\x4e\x74\x92\xce\x0c\xde\x81\x1c\x16\xab\x1d\xd6\xbb\x05\x7e\x5f\xed\xd6\xbb\x0b\x53\xe0\xf3\x7a\xff\xe7\xf6\xd3\x1e\x9f\x57\x77\x77\xab\xcd\x7e\x7d\xbb\xc3\xf6\x0e\xd7\xdb\xcd\xcd\x7a\xbf\xde\x6e\x76\xd8\xfe\x81\xd5\xe6\x0b\x3e\xac\x37\x37\x17\x60\xd1\x9e\x23\xf8\x21\xc4\xcc\xef\x23\x24\xd7\xc8\x4d\xee\x6c\xc7\x7c\x06\xd0\xfa\x47\xa0\x14\xd8\x4a\x2b\x16\x03\xb9\x6e\xa2\x8e\xd1\xf9\xaf\x1c\x9d\xb8\x0e\x81\xe3\x28\x29\x5f\x66\x02\xb9\xc6\x14\x18\x64\x14\x25\x9d\x67\xbe\x39\xd4\x32\xbf\xa5\x15\x92\x8d\x12\x14\xec\x2c\x85\x34\x0d\x94\x9b\x99\xef\x68\x1c\xbd\xc3\x8d\xb7\xf7\x1c\x65\xcc\x49\x81\x54\x39\xba\x99\x45\x5c\x52\x1a\x86\x39\x96\xec\x3d\x75\x9c\x4c\x91\x53\x73\x82\x83\x1d\x98\x66\xa6\x29\xcc\x91\x93\x73\x6c\x39\x25\x8a\xc7\xd3\x52\x50\x54\x69\xc9\x6a\x7e\xaa\xe0\x65\xb7\x7c\x5c\x55\x9e\x74\x09\x9a\x6f\x30\x81\xeb\xa7\x1f\xeb\x9d\xd3\x48\xf6\xde\x98\xc4\x8a\xd2\x83\x63\xe4\x07\x51\x63\xa4\xc5\xdf\x78\x53\xe0\x17\x5c\xe2\xdf\xf7\x33\x84\x01\xd8\xf6\x1e\xbf\x7e\x7f\x85\xc5\xc6\x3f\x73\x9e\x3a\xe4\x66\x91\x2d\x0f\xa2\x78\x67\x5a\x31\x86\x82\x96\x1d\x2b\xa6\xd0\x90\xf2\xf3\xf0\xc4\x53\x1e\x51\x96\xce\x9f\xf8\xca\xc8\xb9\x23\x76\x4d\xc2\xe2\xcd\x6f\x8b\x67\xff\x7c\x0a\x94\x47\x13\x47\x94\xb1\xc5\x3f\x06\x40\xf5\x95\x62\x65\xf3\x63\xae\x1a\xae\xad\x77\x6d\xf5\xf6\x85\x32\x48\x5d\x51\xd0\x6a\x90\xa4\xe9\x5c\xf1\xdd\xf3\x58\xc7\x70\xa6\xbd\x1c\x4f\x29\x56\xa9\xa7\xc8\x55\xe3\xed\x2b\xb3\x23\xb9\x57\x66\x07\x6f\x69\xa8\xde\x9a\xff\x03\x00\x00\xff\xff\x02\x8e\x04\x89\x60\x04\x00\x00")

func imagesBaseCleanInstallBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseCleanInstall,
		"images/base/clean-install",
	)
}

func imagesBaseCleanInstall() (*asset, error) {
	bytes, err := imagesBaseCleanInstallBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/clean-install", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypoint = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x7f\x6f\xdb\x38\x12\xfd\x5f\x9f\xe2\x9d\x1d\xa0\x09\x60\x49\x69\x70\x38\xe0\x72\x6d\x71\xde\x24\x45\x8d\x06\x76\x11\xbb\xdb\x2d\x16\x8b\x94\x12\xc7\xd2\xc0\x12\xa9\x25\x29\xcb\x46\x36\xdf\x7d\x41\xca\x3f\xe2\x76\x17\xd8\xfc\x13\x91\x9c\x1f\x8f\x33\x8f\x6f\x3c\xfc\x57\x9a\xb1\x4a\x33\x61\xcb\x28\x1a\xe2\x46\x37\x5b\xc3\x45\xe9\x70\x75\xf9\xfa\xbf\x58\x94\x84\x8f\x6d\x46\x46\x91\x23\x8b\x71\xeb\x4a\x6d\x6c\x12\x0d\xa3\x21\xee\x39\x27\x65\x49\xa2\x55\x92\x0c\x5c\x49\x18\x37\x22\x2f\x69\x7f\x32\xc2\xcf\x64\x2c\x6b\x85\xab\xe4\x12\xe7\xde\x60\xb0\x3b\x1a\x5c\xfc\x2f\x1a\x62\xab\x5b\xd4\x62\x0b\xa5\x1d\x5a\x4b\x70\x25\x5b\x2c\xb9\x22\xd0\x26\xa7\xc6\x81\x15\x72\x5d\x37\x15\x0b\x95\x13\x3a\x76\x65\x48\xb3\x0b\x92\x44\x43\x7c\xdd\x85\xd0\x99\x13\xac\x20\x90\xeb\x66\x0b\xbd\x7c\x69\x07\xe1\x02\x60\xff\x57\x3a\xd7\x5c\xa7\x69\xd7\x75\x89\x08\x60\x13\x6d\x8a\xb4\xea\x0d\x6d\x7a\x3f\xb9\xb9\x9b\xce\xef\xe2\xab\xe4\x32\xb8\x7c\x56\x15\x59\x0b\x43\xbf\xb7\x6c\x48\x22\xdb\x42\x34\x4d\xc5\xb9\xc8\x2a\x42\x25\x3a\x68\x03\x51\x18\x22\x09\xa7\x3d\xde\xce\xb0\x63\x55\x8c\x60\xf5\xd2\x75\xc2\x50\x34\x84\x64\xeb\x0c\x67\xad\x3b\x29\xd6\x1e\x1d\xdb\x13\x03\xad\x20\x14\x06\xe3\x39\x26\xf3\x01\x7e\x1a\xcf\x27\xf3\x51\x34\xc4\x97\xc9\xe2\xc3\xec\xf3\x02\x5f\xc6\x0f\x0f\xe3\xe9\x62\x72\x37\xc7\xec\x01\x37\xb3\xe9\xed\x64\x31\x99\x4d\xe7\x98\xbd\xc7\x78\xfa\x15\x1f\x27\xd3\xdb\x11\x88\x5d\x49\x06\xb4\x69\x8c\xc7\xaf\x0d\xd8\x97\x91\xa4\xaf\xd9\x9c\xe8\x04\xc0\x52\xf7\x80\x6c\x43\x39\x2f\x39\x47\x25\x54\xd1\x8a\x82\x50\xe8\x35\x19\xc5\xaa\x40\x43\xa6\x66\xeb\x9b\x69\x21\x94\x8c\x86\xa8\xb8\x66\x27\x5c\xd8\xf9\xe1\x52\x49\x14\x59\x72\x88\x35\xc8\x18\xda\xb0\xdb\x2f\x95\x6e\x95\xa5\xc3\xb2\xe1\x86\x96\x82\xab\x28\xca\xb5\x5a\x72\xd1\x1a\x7a\x6c\x8c\xde\x6c\xcf\x2f\xf0\x14\x01\x43\xdc\x6a\xf5\xaa\x67\x47\xd8\x3f\x80\xad\x74\x2e\x2a\x28\x72\x9d\x36\xab\x08\xb8\x9f\xdd\x8c\xef\x1f\xa7\x77\x8b\x2f\xb3\x87\x8f\x6f\xcf\xce\xb9\x81\xd1\xad\x23\x54\x6c\x1d\x24\xad\x41\xae\xbc\xf4\x41\x9c\xc6\xca\x13\xba\xc2\x1f\x10\xdd\x0a\xaf\x9e\xd0\x18\x56\x0e\x67\xaf\xf1\xfc\xea\x22\x8a\x80\x7a\x25\xd9\x20\x6e\x90\x92\xcb\x53\xbb\xb5\x8e\x6a\xb9\xfb\x9f\xe6\x5a\x79\xae\x91\x91\x89\x25\xb3\xe6\x9c\x12\x99\x46\x40\x2e\x1c\xde\xbc\xb9\x9b\xbd\xc7\xbb\x7f\xec\xe6\xe9\x18\x87\x8b\x25\xbe\x00\xd1\xaf\xf3\xfe\xe8\xb7\xe8\x4e\xad\xd9\x68\x55\x93\x72\x6f\x07\x1f\x16\x8b\x4f\x8f\x9f\x1e\x66\xbf\x7c\x7d\x7b\xf6\x74\x5c\x5c\xc7\xcf\x83\x1f\x0d\xe7\x27\x96\xf3\xbf\x33\x9d\xce\x0e\x76\xfb\xcf\xeb\x38\x54\xb5\xd4\xd6\x3d\x8f\xce\x9e\x4e\x4a\xea\xdd\x67\xef\xa3\xe7\x28\x5a\xf2\xe6\xb1\xd6\xad\x72\x87\x1e\x29\xca\xc9\x5a\x61\xb6\xd0\xaa\xda\xa2\x2b\x49\xf9\x8e\x19\x65\x63\x43\xb5\x68\x3c\xc5\x49\xf9\x27\x13\xe8\xed\xdb\xe7\x73\x8c\x90\xb5\x0e\xa5\x30\xb5\x7f\x64\x21\x92\xd7\x9b\x8c\x95\x0f\x15\x64\x29\xe4\x81\x2d\x75\x5b\x49\x64\x04\xdd\xa9\xfe\x15\x1a\xad\x9d\x27\x22\x4a\xb1\xee\xd9\x6c\xc9\xb5\x2c\x91\xb1\xf3\xbd\x28\x75\xa7\x82\xd1\x75\xb0\x3c\x06\x0b\x87\xb5\x96\x88\xed\xcb\xdd\x90\x7d\xd7\xb1\x98\x55\x2c\xe2\x43\xbf\xf6\xe9\x43\x26\x43\x42\xf6\xb7\xf4\x7d\x0d\x5e\xbe\x87\x76\xa7\x29\x4b\xaf\x04\x64\x57\x4e\x37\x41\x58\x3a\x5e\x71\x3a\xdf\x29\xc1\x81\x11\x37\xfb\xd0\x13\xe5\xc8\x2c\x45\x4e\x69\x1f\x49\x77\xb4\x26\x33\x42\x47\x50\x5e\x52\x74\x78\xc5\xae\x64\x55\x58\x2c\x8d\xae\xf1\x4d\xea\x7c\x45\x06\xa6\x55\x88\xe3\xc6\xf0\x9a\x2b\x2a\x48\x7e\x43\x92\x24\x21\x88\x2f\x4a\x2f\xa4\x95\x28\x20\x2a\xab\x51\x8a\xa6\x21\x65\xbd\x42\xd5\x62\x45\x01\x3a\x4c\x37\x82\xa8\xb5\x2a\xac\x3b\xc9\xe3\xe9\x1f\xaa\x1e\x6b\x18\x0a\x9f\x23\xa3\xfb\xeb\xee\xbb\x2f\xf2\x92\x15\x3d\xb2\x3c\x3e\x53\xaa\xc2\x84\xf0\x9d\xd8\x1d\xc7\x2c\x41\x75\x46\x52\x92\xf4\xca\xe8\x8f\x94\x96\x04\xae\xbd\xb6\x78\x9c\x05\x29\x32\xc2\xfb\x09\x28\xea\xa0\x15\x25\x3b\x1e\xb0\xf5\xac\x39\x32\x2b\xa3\x5c\x78\x15\xc8\xb4\x2b\xb1\x6a\x33\x9f\x2f\xc4\xe8\xb1\xfb\x31\xa1\x15\x29\x67\x51\xf1\x8a\xd0\x91\xef\x96\x22\x17\xc2\x79\xc7\x17\xa8\xd8\x97\x5d\x89\xaa\xda\xfa\x92\x78\xf1\x65\x55\xb4\x6c\xcb\x80\xcf\x7a\x08\xa6\x46\xbc\xec\x9f\xff\xd1\x31\xc2\x81\x22\xc7\xcd\xd8\x13\xaf\xd9\x97\xa6\x31\x5a\xb6\xb9\x7b\x54\xa2\xa6\x43\x71\xdc\xee\x36\x02\xb6\x16\x55\x85\x25\x6f\x7c\xe2\x92\x65\x4f\xdd\x20\x9f\xd5\xd6\xeb\x6c\x29\x8c\xf4\x5c\x09\x57\xf3\x76\x6c\x6d\x4b\x18\xfe\xfb\xea\x3f\x27\x64\x2b\xd8\x95\x6d\x96\xe4\xba\x4e\x57\x87\xf9\x1c\x5b\x2e\x6c\xba\x62\x25\xd3\xe0\x66\xd3\xde\x8d\xf2\x52\x63\xe0\xf7\x07\x78\x87\xde\xe0\x25\xd0\x93\x96\xeb\x51\xc6\x4a\xfe\x85\x55\xa0\x40\x9a\x57\xc2\xda\x54\xd6\x9c\xf2\x77\x41\x9e\xfd\xef\x07\xcf\xcb\xc6\x50\xcc\x8a\x9d\xc7\xdf\x36\xf6\x28\x18\xdf\x91\xe7\x87\x82\x7d\x3f\x04\x7c\xc0\x8e\xd0\x09\xe5\x42\x9d\x72\x5d\xd7\xbe\x2e\xe7\xb4\x69\x28\x77\xfd\xcc\xcd\x68\xdf\x94\x8b\xdd\xf2\xd3\xe4\xf6\xb5\x9f\xbf\xa0\x0d\xe5\x61\x2c\xbb\x28\x7c\x0e\xce\xfe\x3f\x88\xfe\x0c\x00\x00\xff\xff\x85\x1a\x0b\x2a\xf1\x08\x00\x00")

func imagesBaseEntrypointBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypoint,
		"images/base/entrypoint",
	)
}

func imagesBaseEntrypoint() (*asset, error) {
	bytes, err := imagesBaseEntrypointBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/10-restart.conf": imagesBase10RestartConf,
	"images/base/Dockerfile":      imagesBaseDockerfile,
	"images/base/clean-install":   imagesBaseCleanInstall,
	"images/base/entrypoint":      imagesBaseEntrypoint,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"10-restart.conf": {imagesBase10RestartConf, map[string]*bintree{}},
			"Dockerfile":      {imagesBaseDockerfile, map[string]*bintree{}},
			"clean-install":   {imagesBaseCleanInstall, map[string]*bintree{}},
			"entrypoint":      {imagesBaseEntrypoint, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
