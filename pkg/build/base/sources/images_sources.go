// Code generated by go-bindata.
// sources:
// ../../../../images/base/Dockerfile
// ../../../../images/base/clean-install
// ../../../../images/base/entrypoint/main.go
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x6d\x6f\xdb\xb8\xb2\xfe\xae\x5f\x31\x90\x83\x36\xe9\x5a\x56\x9a\xb4\xdd\x6c\x16\xd9\x7b\xdd\xc4\xcd\x1a\x4d\xec\xc2\x76\x5a\x14\x7b\x17\x01\x25\x8d\x25\xae\x29\x52\x97\xa4\xac\xb8\xbd\xbd\xbf\xfd\x60\xa8\x17\xdb\x69\xbb\x67\x71\xf6\x9c\x20\x80\x6d\x89\x9c\x19\xce\xcb\x33\xcf\xb0\x07\x97\xaa\xd8\x68\x9e\x66\x16\x4e\x8e\x9f\x9f\xc1\x22\x43\x78\x5b\x46\xa8\x25\x5a\x34\x30\x2c\x6d\xa6\xb4\x19\x78\x3d\xaf\x07\x37\x3c\x46\x69\x30\x81\x52\x26\xa8\xc1\x66\x08\xc3\x82\xc5\x19\xb6\x6f\xfa\xf0\x1e\xb5\xe1\x4a\xc2\xc9\xe0\x18\x0e\x69\x81\xdf\xbc\xf2\x8f\x7e\xf6\x7a\xb0\x51\x25\xe4\x6c\x03\x52\x59\x28\x0d\x82\xcd\xb8\x81\x25\x17\x08\xf8\x10\x63\x61\x81\x4b\x88\x55\x5e\x08\xce\x64\x8c\x50\x71\x9b\x39\x35\x8d\x90\x81\xd7\x83\x8f\x8d\x08\x15\x59\xc6\x25\x30\x88\x55\xb1\x01\xb5\xdc\x5d\x07\xcc\x3a\x83\xe9\x2f\xb3\xb6\x38\x0f\xc3\xaa\xaa\x06\xcc\x19\x3b\x50\x3a\x0d\x45\xbd\xd0\x84\x37\xe3\xcb\xd1\x64\x3e\x0a\x4e\x06\xc7\x6e\xcb\x9d\x14\x68\x0c\x68\xfc\xdf\x92\x6b\x4c\x20\xda\x00\x2b\x0a\xc1\x63\x16\x09\x04\xc1\x2a\x50\x1a\x58\xaa\x11\x13\xb0\x8a\xec\xad\x34\xb7\x5c\xa6\x7d\x30\x6a\x69\x2b\xa6\xd1\xeb\x41\xc2\x8d\xd5\x3c\x2a\xed\x9e\xb3\x5a\xeb\xb8\xd9\x5b\xa0\x24\x30\x09\xfe\x70\x0e\xe3\xb9\x0f\xaf\x87\xf3\xf1\xbc\xef\xf5\xe0\xc3\x78\xf1\xeb\xf4\x6e\x01\x1f\x86\xb3\xd9\x70\xb2\x18\x8f\xe6\x30\x9d\xc1\xe5\x74\x72\x35\x5e\x8c\xa7\x93\x39\x4c\xdf\xc0\x70\xf2\x11\xde\x8e\x27\x57\x7d\x40\x6e\x33\xd4\x80\x0f\x85\x26\xfb\x95\x06\x4e\x6e\xc4\x84\x7c\x36\x47\xdc\x33\x60\xa9\x6a\x83\x4c\x81\x31\x5f\xf2\x18\x04\x93\x69\xc9\x52\x84\x54\xad\x51\x4b\x2e\x53\x28\x50\xe7\xdc\x50\x30\x0d\x30\x99\x78\x3d\x10\x3c\xe7\x96\x59\xf7\xe4\xab\x43\x0d\x3c\xaf\x07\x2b\x2e\x13\x88\x45\x69\x2c\x6a\x88\x18\x1d\x35\x67\x29\xf6\x21\x2a\xb9\xb0\x74\xd0\x6d\x6a\x3d\x35\x90\x60\xc4\x99\x0c\x68\xa1\xd7\x83\x2a\xe3\x71\x46\xbe\x89\x98\xe1\x31\x13\x62\x03\x0c\xd6\xa8\x37\x40\xae\x2a\x0a\x4c\x20\x51\x95\x6c\x76\xd5\x92\xe1\xf0\xff\x5f\x9c\xde\xbe\x3e\xf2\x7a\x60\x33\x66\xc1\x64\xbc\x30\x75\xda\x30\x30\x39\x13\x02\x4a\xcb\x05\xb7\x1b\x78\x1a\x0b\x64\x32\xe0\xd2\x58\x26\xc4\xd3\xad\x3a\x92\x95\x20\x13\x90\x68\x55\x50\x40\x97\x4a\x7b\x3d\x60\x85\x0d\x52\xb4\x50\x16\x09\xb3\x08\x4f\x9e\x74\x4f\x1a\x11\x70\xf0\xdf\xe0\xf5\xc0\x20\xba\x1c\x33\xe7\x61\x98\x72\x9b\x95\xd1\x20\x56\x79\xb8\xea\x0e\xba\xfb\xd5\x6a\xc4\x30\x67\xe4\x9f\x90\x7c\x92\x84\x7b\x3e\xf0\x7a\xb0\x50\x75\x51\x54\x08\x2c\x49\xc0\x6c\x8c\xc5\x3c\xe9\xc3\xe5\x64\xdc\xa7\x38\x80\x72\x71\xb6\x4a\x09\x03\x12\x31\xa9\xf3\x50\x97\xb5\x6f\x59\x92\x3b\x31\x6f\x94\x6e\xf7\xc2\x0f\x90\xa8\x78\x85\x1a\x62\x25\x97\x3c\x2d\xb5\x8b\x21\xd5\x5f\x02\x11\x0a\x55\xf5\xdd\x21\x28\x98\x4b\x25\x84\xaa\x28\xfc\x1a\x97\xa8\x51\xc6\x68\xce\xbd\x5e\x77\x40\xaa\xa2\x25\xe5\x3e\x9a\x95\x55\x85\x2b\xa5\x8a\xaf\x78\x38\x6f\x72\x3f\x6c\x94\x86\x97\x4a\x52\x7d\xa2\x1e\x4b\x8b\x7a\xc9\x62\x0c\x77\xe4\x24\xb8\x46\xa1\x0a\xd4\x66\xa0\x31\xc9\x98\x75\x3e\x8b\x84\x4a\xc3\x93\xe3\xe7\x2f\xc2\xe3\x97\xf4\xaf\x4b\x49\xa9\x18\x34\x32\x03\x8a\x2b\x97\x41\x7d\x9a\x20\x6e\x35\xfc\x75\xc1\xaf\xc2\xe3\x9f\xc2\xe7\xa7\x5f\x09\xe6\x32\x60\x81\x54\x32\x28\x34\x5f\x73\x81\x29\x26\xbb\xe2\xbd\xe1\xec\x9a\xea\x72\x74\x3f\xbe\x1d\x5e\x8f\x2e\xfc\x32\x2a\xa5\x2d\xcf\x9f\x9f\x0d\x8e\x5f\xf8\xde\x9b\xd9\xf4\x16\x0e\x3e\x6f\x17\x7c\xa1\x5a\x98\x4c\x17\xa3\x73\x18\xce\x2e\x7f\x85\xbc\x34\x16\x22\x84\x04\x97\x5c\x62\x02\x2c\x75\xc8\xb5\xa4\x2a\xa1\xcd\xbb\xf6\xab\xd8\x0c\xea\x03\x3a\xcb\x51\xa6\x5c\x62\xd8\x45\xa3\xce\x1a\xd4\x61\xcf\xc4\xaa\x40\x67\x19\xe9\xb8\xf0\x59\x9e\xbc\x7a\xe1\x7b\x2e\x23\x2d\x01\x12\x5c\x8d\x5e\x8f\x87\x93\xfb\x37\xb3\xe9\x64\x31\x9a\x5c\x5d\x48\x25\x39\x05\x83\xc5\x96\xaf\x11\x8c\x55\x85\x01\xa3\x72\xa4\xcc\x86\x8a\xb9\xba\x37\xfd\x3a\xff\xb8\x71\x20\x4d\x85\x00\x9a\xaa\x83\xe9\xb4\xcc\x51\xda\x3e\x54\xf8\x54\x23\x1c\xb2\xe8\xa8\x34\xa4\x87\x6c\xb0\x0a\xa8\x34\x18\x58\xcc\x0b\xa5\x99\xde\xc0\x68\xf2\xbe\x3e\xe9\xc0\x59\xf9\xe7\xd6\x78\xde\xe5\xf4\xdd\x47\xd8\xab\x51\x08\x4b\xa3\x43\xa1\x62\x26\xc2\x88\xcb\x70\xef\xa5\x37\xbb\x9b\x40\x9c\xe5\x2a\x81\x1f\x1e\xfe\x7c\xa5\xd7\x83\x6b\xb4\x90\x60\x81\x32\x41\x19\x73\x34\x54\x68\x19\xee\x40\x14\x30\xa1\x91\x25\x1b\xc8\x98\x39\x07\x63\xb2\x3e\x39\xa5\x0f\x46\xb2\x22\x71\xab\x6b\x9f\x44\x5a\xad\x50\xd6\x40\xc4\xa5\x55\x70\x88\x2c\xce\x1c\x84\x83\xe0\x12\x8f\xa8\x5a\x02\x28\x58\xbc\x62\x29\x52\x85\xc6\x68\x0c\xb9\x83\x30\xb7\xb1\x88\x9c\x56\xc7\xf8\xf1\xe2\xdd\x72\x36\xa8\xd7\x3c\x46\x03\x87\x4d\x9a\x1e\x7d\x73\x35\xc9\x6d\xea\x3b\x84\x6c\x53\xa0\x26\xbc\x81\x10\xb6\xb0\xe3\x5a\xaa\x92\x28\xad\x71\x22\x72\x6e\xe2\xad\x9c\xc3\x1a\x21\x39\x3a\xd0\xa1\xae\xcc\x25\xa8\x52\x03\x9d\x91\x70\x86\xcb\xf4\xa8\x76\x98\xa4\x15\xce\xb9\x65\x01\x87\x1a\x73\xb5\xa6\xb3\x94\xb2\x62\x92\x3a\x59\x8b\x38\xad\xe9\xb4\xed\x0d\x97\x0e\xcb\x2b\xa4\xa6\xe7\xba\xe8\x2a\x37\x29\x29\xf9\x43\x95\x5a\x32\x91\xfc\xe7\x80\xc1\x25\xc9\x5e\x4e\xfd\x8f\xe7\x58\x81\x03\x73\xab\x99\x34\x85\xd2\x36\x70\xea\x21\x66\x41\x8c\xda\x52\x47\x64\xce\x6d\xa5\x16\x5d\x57\x0f\x0a\x4d\x76\x91\x9f\x82\x58\xe5\xb9\x92\x90\xca\xb2\x48\x4f\x40\x98\x28\xd0\x28\x90\x92\xa9\x15\xdf\x79\xa2\xb1\xd0\x6c\xcc\x1a\x04\x8f\x9a\xdf\xc7\xdd\xc2\x58\x49\x69\x35\x8b\x57\xc0\x0b\x4b\xde\x31\xc0\x0b\xad\x4a\x8b\x27\x80\x36\x23\xff\x83\x51\x31\xb3\xae\x91\x05\x82\xcb\xf2\x01\x72\x55\x4a\x0b\x18\x35\x1b\xca\x04\xd7\xb0\xa2\x52\x60\xe5\xd2\x04\x75\x6f\x68\x15\x44\xcc\x64\xa0\xcd\x46\xc6\xcd\xa3\x27\x4f\x60\x49\x7d\x3a\x14\x3c\xea\xe0\xba\xfe\xa4\x0f\x2e\xb9\x1d\x58\xa6\x53\xb4\x03\x0a\xab\x09\x21\x90\x2c\x47\xf0\xdb\xb3\xd8\xbc\x20\xca\x66\x02\x83\xb6\x2c\x06\x4d\xb0\x7d\x08\x12\x14\x68\x71\xab\x46\xe7\x10\x2c\xbf\xa9\x27\x2f\x85\xe5\x41\x69\x50\xef\xab\x7a\xf6\xd5\x66\xb4\xf1\xe3\xcd\xcf\xbe\xbb\xf8\x1b\x9a\x1c\x28\x04\x4b\xf3\xcf\xf4\x7c\xcb\x19\x94\x4e\xf6\xf1\x4e\x72\xf6\xdf\xd8\x4e\xee\x8d\xad\xf8\x4b\x12\x1c\x11\xfa\xae\xe1\x18\x67\x0a\xfc\x19\xb2\xe4\xed\xad\x49\x2f\xa4\xf2\xe1\x97\x5f\xf6\x1d\xd6\x16\xd8\x80\x3a\x3f\xe1\xe0\xb8\xa9\x82\xba\x52\xfa\x0d\x09\x22\x24\x31\x04\x3b\x19\x2b\x0a\x6c\x3b\x53\x85\x1d\xd3\x71\x4d\xa2\xa1\xd8\x1d\x6e\xb0\x48\xad\x89\xb7\x11\x88\x3a\x12\xfb\xbd\x1e\xd6\x48\x09\x5d\xee\x86\x6d\x91\x62\x58\x77\xd1\xb0\x67\xd0\x06\x65\x11\xd8\x0c\x03\x8d\x85\x32\xdc\x2a\xbd\xa1\xc6\x23\x93\x4e\xe6\x16\xcc\x06\x5c\x39\x0d\xa1\xcb\xbe\x90\xcb\x16\xd7\x6d\xab\x28\x58\xd5\x44\x28\xec\x6d\xf1\x36\xd8\xc1\x5b\x6a\x54\xf5\xcf\xa7\x06\xae\xdf\x5d\xc3\x0a\x37\xee\x05\x11\x2e\xc7\x82\xb8\x4c\x51\x17\x9a\x4b\xbb\xf7\x7c\xcf\xba\xa0\x65\x86\xae\x4f\xf0\x47\x8e\x6d\x40\xb2\xe3\x01\x44\x15\x5e\x51\x03\x51\xcb\x25\x8f\xb9\x43\x44\x53\x16\x04\x3e\xf5\x90\xb1\x33\x73\xc5\xa5\xd6\x28\xad\xd8\xd0\x48\x41\x61\x28\x38\x01\xb1\x63\xb8\x83\x1d\xac\xfc\x86\x4f\x2c\x33\x2b\x13\x3a\x00\xf8\xca\x1b\x75\x17\x9e\x5e\xbe\x1d\xcd\xee\xdf\x8f\x66\xf3\xf1\x74\x72\xe1\x3b\xbb\x06\xcf\x7c\xe7\xee\x86\x5a\x76\x1d\x1c\xe5\xba\xef\x58\xc0\x23\x0a\x30\xe8\x28\x86\xa3\x0a\x56\x01\x03\x62\x4f\x9f\x50\x2b\x58\x33\x51\x52\x5a\x18\x2e\x1c\x7d\x6c\xe8\x6c\xcd\x2e\x60\xa9\x55\xee\xb0\x77\x85\x1b\x6a\x95\xfe\x87\xfa\xc5\x79\xfb\x10\x54\x69\x8b\x92\x98\xbc\x2a\x45\xe2\xb4\x47\x94\x74\x9a\x92\xec\xd0\xd8\x44\x95\xb6\x25\x27\xc4\x36\x74\x4e\xfd\xe5\xc8\xaf\x99\xd0\xbb\xc5\xfd\xdb\xd1\xc7\xfb\xab\xe9\x64\x71\xff\x61\x38\x9b\xdc\x4f\x27\xf7\x57\xc3\xc9\xf5\x68\x36\xbd\x9b\xdf\xdf\xcd\x1d\x7b\x5b\x32\x61\xd0\xaf\x7b\x03\x21\x7c\xb0\x34\xf3\x1b\xf0\xb7\xe9\x5b\x49\xa1\x58\xb2\x9b\xc2\x75\xea\x1e\x1c\x0e\xea\xfa\x52\xa6\x05\xfc\x9f\x9b\x32\x3c\x18\x5f\xf9\x47\x61\x5a\xa4\x3e\xfc\x5f\x77\x14\xca\x9b\x60\x5b\xb0\xed\xe3\x9d\xf4\x82\xe3\xd1\xeb\x37\x97\x57\x67\x67\xdb\x55\x35\x9b\x3b\xf8\x4c\x9f\x5f\x7c\x92\x11\xd0\xc6\x6d\xee\x75\xc8\x0e\xe0\x27\x18\xc1\x6f\x4c\xc7\xd9\x45\xb3\xe1\x77\xf8\xfb\xc7\x80\x83\x43\x61\xa2\xfb\xb6\xa5\x05\xb1\x39\x02\xe3\x5a\x8d\xbf\x35\x73\xbf\xab\xfa\x5d\x55\x5f\x1c\x7c\xde\xcf\xb1\x2f\xfe\x2e\xf0\x5c\x4e\xc6\x10\x71\xc9\x34\xd1\x0d\xab\x20\x54\x85\x0d\x63\xc9\x89\xb6\x11\xc7\x98\x5e\x4d\x0f\x23\x94\x36\x43\x24\x9a\x7b\x74\x4e\x15\x05\x55\xb6\x81\x10\x2a\x9a\xf0\x32\xd4\x35\xeb\xbd\x9c\x8c\xb7\x69\x7c\x3c\x78\x35\x38\xf6\xbb\xe7\x8b\xe1\xec\xf5\xf0\xe6\xe6\xc2\x8f\x25\x0f\x0a\x51\xa6\x5c\x9a\xa0\xf1\x50\xb0\x3e\xf8\xbc\xb3\xf7\xcb\xc0\xa6\x9f\xb6\x3b\x1d\x89\xbf\x9b\xdd\x5c\x74\xe9\x60\xac\xd2\x2c\xc5\x41\xaa\x54\x2a\x90\x15\xdc\x3c\x9a\xef\x5a\x1f\x86\x12\x6d\xa5\xf4\xaa\x55\x18\x6e\xa5\x3a\x81\xb5\xda\x56\xc1\x97\xfa\x67\x63\xe9\x97\xdd\x74\xa4\x6c\x0c\x02\x8d\x56\x6f\xe0\x25\x04\x41\x53\x11\xa1\xcd\x0b\x72\x15\x19\x0c\x8d\x34\x12\xb4\x13\x14\x93\xb1\x93\x97\xaf\x4c\x99\xef\x2f\xee\xde\xe7\xab\x84\x6b\x08\x8a\x3d\xb7\x6f\x5f\x5b\xa6\x21\xb8\xdc\x7f\x19\x3c\x7c\x5a\x7e\x47\x1a\x35\x2e\xbd\xff\x92\x42\x6d\x91\x3a\x46\xc3\x7f\xdc\x54\xce\x5d\xc5\x72\xd9\xf2\xd4\x43\x6e\xa1\xe2\x42\x40\x9c\x61\xbc\xea\x6e\x23\x3a\xde\x46\xc0\x73\xf4\x6f\x9b\x3a\x69\x0e\xd9\x8a\xee\xfa\x40\x6b\x21\x3e\x70\x6b\xa8\x7d\xcd\xc7\xd7\xb3\xc5\xed\x78\xf2\xc3\x69\x0d\x7a\xf3\xf1\xf5\x62\x34\xbb\x85\xc3\xba\x49\x6a\x0c\xf0\x01\xe3\x92\x10\x9a\xdb\x5d\xf3\xa2\x32\xfd\xc4\x85\x60\xbb\x8c\xd5\x64\xaa\xba\x8f\xca\x74\x10\xa7\xfc\xbf\x78\x72\xf1\x9c\xa6\xcf\x97\x3f\x7a\xf3\xc5\xf4\xdd\x7c\x7c\x3d\x19\xde\xec\xe8\x23\xaf\x55\x9a\x15\x9d\x4d\xee\x02\x83\x28\xb8\xbb\xa0\x61\x02\x50\x5a\xbd\x29\x14\xa7\xf1\x8b\x66\xf5\x62\x95\xd6\x93\xa0\x73\x5e\xa6\xaa\x6e\x68\x73\x37\x2d\x75\x57\x6e\x2e\x51\xdc\x9b\x3f\x68\x04\x15\x68\x0d\x94\x86\xd0\x1b\xca\xa2\xee\xea\x44\x9c\x53\x03\x11\x2e\x95\xae\x43\xc0\x65\x49\x48\xad\x5c\xcf\x69\x2c\xaa\xaf\x67\x04\x42\xa1\xd1\xf1\x3d\x87\xfd\xcc\x76\x16\x73\x03\xef\xc6\x57\xcf\xbd\x5e\x67\x50\x85\x20\x70\x8d\x54\x3b\xce\x84\xad\xe1\xcd\x05\x51\x3d\xf1\xfd\x06\xfe\xf6\x70\xe1\xf6\xab\xdf\x07\xff\xd1\x54\xe7\xc3\xef\x5e\x0f\x3e\xa0\xe3\x2b\xdb\x0c\x53\xd4\x20\x48\x79\x3b\x38\x51\x2e\xad\x99\xe6\xca\x1d\xb5\x1d\xa2\xda\xce\x4c\x85\x2b\xd0\xf6\x01\x6d\x3c\x38\xea\x1a\x74\xeb\xbf\x67\x4a\x8a\xcd\xb3\x76\xaa\x72\xed\xce\x5d\x97\xf4\x9d\xd8\xad\x7d\xae\x97\xaf\x51\x6b\x9e\x24\x44\x99\x2c\xa9\xb6\x3c\x47\x6f\x34\x59\xcc\x3e\xbe\x9b\x8e\x27\x0b\x3a\xdc\xa3\x33\x3c\x3a\xa0\xa1\x67\x44\x09\xe9\x6c\xee\x12\x0b\xdb\x22\x49\x35\x2b\xb2\xee\xea\x80\xc1\x5a\x89\x92\xe2\xa5\x80\xad\x15\x4f\x9c\x72\xc1\x36\x14\xa7\xe6\x6b\x77\x16\x1a\xb5\x9a\x6b\x24\xc1\xdc\xfe\x98\xd1\x5c\x17\x67\x4c\xa6\x14\xba\x4e\x5a\x73\x53\x76\xe5\x54\xba\x7b\x58\x52\xe8\xf5\x40\xc5\x71\xa9\xdb\xac\x70\xf7\x16\xb4\x8f\xdb\xe6\x36\xf1\xfc\x5f\xb8\xb0\xa8\x55\x7a\xef\xa7\x37\x77\xb7\x23\xe7\x9a\x35\xd3\x8e\xf6\xd6\xdb\x1b\x17\x7c\xab\x05\x10\xf9\x70\xa6\xb6\x41\xbf\x1d\x5e\x52\x67\x74\x57\x9d\xcc\x18\x9e\x4a\x0a\xd4\x4e\x4d\xee\xdc\xc4\xed\x93\xea\x24\xe4\xc6\x94\x68\xc2\xd3\xd3\x1f\x5f\xf4\xdc\x77\x9a\xe6\x50\xda\xe0\xe4\xec\xec\xec\xec\xe4\xf4\xe5\xcb\xbf\x29\xe7\xf4\xf4\xa7\x93\x97\x67\x2f\xce\x4e\xbd\x7f\x04\x00\x00\xff\xff\x0b\x5c\xee\x2d\x5e\x17\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseCleanInstall = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\x51\x6f\xdb\x36\x14\x85\xdf\xf9\x2b\xce\xac\x62\xd8\x86\x48\x4a\xf3\x32\x60\xc5\x86\x79\x49\x86\x19\x2d\x6c\x20\x76\x57\x14\xdb\x1e\xae\xa8\x2b\xe9\x22\x12\xc9\x91\x57\x75\xfc\xef\x07\x2a\x71\x50\x63\x7e\x32\x75\x0e\x79\x3e\x1e\xde\xe2\x9b\xba\x11\x57\xa7\xc1\x98\x02\xb7\x3e\x9c\xa2\xf4\x83\xe2\xe6\xfa\xed\x8f\x38\x0c\x8c\xf7\x73\xc3\xd1\xb1\x72\xc2\x7a\xd6\xc1\xc7\x54\x99\xc2\x14\xf8\x20\x96\x5d\xe2\x16\xb3\x6b\x39\x42\x07\xc6\x3a\x90\x1d\xf8\xac\x5c\xe1\x4f\x8e\x49\xbc\xc3\x4d\x75\x8d\xef\xb2\x61\xf5\x22\xad\xbe\x7f\x67\x0a\x9c\xfc\x8c\x89\x4e\x70\x5e\x31\x27\x86\x0e\x92\xd0\xc9\xc8\xe0\x27\xcb\x41\x21\x0e\xd6\x4f\x61\x14\x72\x96\x71\x14\x1d\x96\x98\x97\x43\x2a\x53\xe0\xf3\xcb\x11\xbe\x51\x12\x07\x82\xf5\xe1\x04\xdf\x7d\xed\x03\xe9\x02\x9c\x7f\x83\x6a\xf8\xa9\xae\x8f\xc7\x63\x45\x0b\x6c\xe5\x63\x5f\x8f\xcf\xc6\x54\x7f\xd8\xdc\xde\x6f\xf7\xf7\xe5\x4d\x75\xbd\x6c\xf9\xe8\x46\x4e\x09\x91\xff\x9d\x25\x72\x8b\xe6\x04\x0a\x61\x14\x4b\xcd\xc8\x18\xe9\x08\x1f\x41\x7d\x64\x6e\xa1\x3e\xf3\x1e\xa3\xa8\xb8\xfe\x0a\xc9\x77\x7a\xa4\xc8\xa6\x40\x2b\x49\xa3\x34\xb3\x5e\x94\x75\xa6\x93\x74\x61\xf0\x0e\xe4\xb0\x5a\xef\xb1\xd9\xaf\xf0\xdb\x7a\xbf\xd9\x5f\x99\x02\x9f\x36\x87\x3f\x76\x1f\x0f\xf8\xb4\x7e\x78\x58\x6f\x0f\x9b\xfb\x3d\x76\x0f\xb8\xdd\x6d\xef\x36\x87\xcd\x6e\xbb\xc7\xee\x77\xac\xb7\x9f\xf1\x7e\xb3\xbd\xbb\x02\x8b\x0e\x1c\xc1\x4f\x21\x66\x7e\x1f\x21\xb9\x46\x6e\x73\x67\x7b\xe6\x0b\x80\xce\x3f\x03\xa5\xc0\x56\x3a\xb1\x18\xc9\xf5\x33\xf5\x8c\xde\x7f\xe1\xe8\xc4\xf5\x08\x1c\x27\x49\xf9\x31\x13\xc8\xb5\xa6\xc0\x28\x93\x28\xe9\xf2\xe5\x7f\x97\xaa\xf2\x2c\xad\x91\x6c\x94\xa0\x60\x67\x29\xa4\x79\xa4\xdc\xcc\xf2\x46\xd3\xe4\x1d\xee\xbc\x7d\xe4\x28\x53\x4e\x0a\xa4\xca\xd1\x2d\x2c\xe2\x92\xd2\x38\x2e\xb1\x64\x1f\xa9\xe7\x64\x8a\x9c\x9a\x13\x1c\xec\xc8\xb4\x30\xcd\x61\x89\x9c\x9d\x63\xcb\x29\x51\x3c\x9d\xb7\x82\xa2\x4a\x47\x56\xf3\xa8\x82\xab\xbe\x7a\xde\x55\x9e\x75\x09\x9a\x5f\x30\x81\x9b\x97\x3f\xd6\x3b\xa7\x91\xec\xa3\x31\x89\x15\xa5\x07\xc7\xc8\x4f\xa2\xc6\x48\x87\xbf\xf0\xa6\xc0\xcf\xb8\xc6\x3f\xef\x16\x08\x03\xb0\x1d\x3c\x7e\xf9\xf6\x06\xab\xad\x7f\xe5\x3c\x77\xc8\xed\x2a\x5b\x9e\x44\xf1\xd6\x74\x62\x0c\x05\x2d\x7b\x56\xcc\xa1\x25\xe5\xd7\xe5\x99\xa7\x3c\xa1\x2c\x9d\x3f\xf3\x95\x91\x73\x47\xec\xda\x84\x37\xbf\xbe\xba\x97\x3b\xa0\x3c\x99\x38\xa1\x8c\x1d\xfe\x36\x00\xea\x2f\x14\x6b\x9b\x47\xb9\x6e\xb9\xb1\xde\x75\xf5\x0f\x5f\x29\xa3\x34\x35\x05\xad\x47\x49\x9a\x2e\x15\xdf\xbf\xae\x75\x0a\x17\xda\xb2\x36\xff\x05\x00\x00\xff\xff\xdd\xdb\xd0\x5d\x1a\x04\x00\x00")

func imagesBaseCleanInstallBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseCleanInstall,
		"images/base/clean-install",
	)
}

func imagesBaseCleanInstall() (*asset, error) {
	bytes, err := imagesBaseCleanInstallBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/clean-install", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypointMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\x61\x73\xdb\xb8\x11\xfd\x2c\xfc\x8a\x3d\x76\x6e\x2a\xe5\x68\xd2\x92\xcf\x8e\x4f\x4d\x3e\xa8\xb6\x92\x68\xe2\xca\x19\x4b\xa9\x9b\x49\x3d\x09\x08\x2e\x49\x8c\x41\x80\x05\x40\xc9\x6c\x27\xff\xbd\xb3\x20\xed\xc8\xc9\x7d\xb0\x2c\x90\xc0\xdb\xb7\xef\x3d\xac\xd2\x17\xec\xc2\x34\x9d\x95\x65\xe5\x61\x76\x3c\x3d\x87\x6d\x85\xf0\xbe\xcd\xd0\x6a\xf4\xe8\x60\xd1\xfa\xca\x58\x97\x30\x76\x25\x05\x6a\x87\x39\xb4\x3a\x47\x0b\xbe\x42\x58\x34\x5c\x54\x08\xc3\x9b\x18\xfe\x89\xd6\x49\xa3\x61\x96\x1c\xc3\x98\x36\x44\xc3\xab\x68\xf2\x37\xd6\x99\x16\x6a\xde\x81\x36\x1e\x5a\x87\xe0\x2b\xe9\xa0\x90\x0a\x01\x1f\x04\x36\x1e\xa4\x06\x61\xea\x46\x49\xae\x05\xc2\x5e\xfa\x2a\x14\x19\x20\x12\xf6\x69\x00\x30\x99\xe7\x52\x03\x07\x61\x9a\x0e\x4c\x71\xb8\x0b\xb8\x67\x0c\x00\xa0\xf2\xbe\x99\xa7\xe9\x7e\xbf\x4f\x78\x60\x99\x18\x5b\xa6\xaa\xdf\xe5\xd2\xab\xd5\xc5\x72\xbd\x59\x1e\xcd\x92\x63\xc6\x3e\x6a\x85\xce\x81\xc5\xff\xb4\xd2\x62\x0e\x59\x07\xbc\x69\x94\x14\x3c\x53\x08\x8a\xef\xc1\x58\xe0\xa5\x45\xcc\xc1\x1b\xe2\xb9\xb7\xd2\x4b\x5d\xc6\xe0\x4c\xe1\xf7\xdc\x22\xcb\xa5\xf3\x56\x66\xad\x7f\x26\xd0\x23\x2b\xe9\xe0\x70\x83\xd1\xc0\x35\x44\x8b\x0d\xac\x36\x11\xfc\x7d\xb1\x59\x6d\x62\x76\xbb\xda\xbe\xbb\xfe\xb8\x85\xdb\xc5\xcd\xcd\x62\xbd\x5d\x2d\x37\x70\x7d\x03\x17\xd7\xeb\xcb\xd5\x76\x75\xbd\xde\xc0\xf5\x1b\x58\xac\x3f\xc1\xfb\xd5\xfa\x32\x06\x94\xbe\x42\x0b\xf8\xd0\x58\xe2\x6e\x2c\x48\x92\x0e\xf3\x84\x6d\x10\x9f\x15\x2f\x4c\x4f\xc6\x35\x28\x64\x21\x05\x28\xae\xcb\x96\x97\x08\xa5\xd9\xa1\xd5\x52\x97\xd0\xa0\xad\xa5\x23\xf3\x1c\x70\x9d\x33\x25\x6b\xe9\xb9\x0f\xeb\x9f\xda\x49\xd8\x8b\x94\xb1\xf4\x05\xdb\x92\x85\x54\x17\x6b\xd4\xde\x81\x69\x89\x06\x21\xa3\xf6\xb6\x6b\x8c\xd4\x3e\x81\x95\x9f\xb3\x23\xd8\x73\xe9\x5d\xe0\xb2\x59\xbd\xfd\xb8\xb9\x99\xb2\x23\xc2\xd4\x80\x0f\x28\x1c\x8c\xb9\x2d\x77\x9f\xa7\x77\x31\xf4\x5f\xe6\x77\x31\xa0\xde\x7d\x9e\xdf\x4d\x58\x5f\x87\x2b\x65\xf6\x0e\x5a\x47\x1e\x34\x68\x0b\x63\x6b\x30\x41\x05\x2e\x7a\xa6\x52\x07\x9a\x91\x36\x39\x46\x20\x8c\xa6\xa0\xa0\x85\x9d\xe4\xf0\x35\x37\xe2\x3e\x28\x86\xe2\x2b\xfb\x92\x61\x61\x2c\x7e\x81\x3d\x42\xc5\x77\x48\x10\x2d\x57\xaa\x83\x28\x33\xc6\x63\x1e\x05\x24\xa9\xa5\x27\x3d\x00\x77\x68\x3b\x5f\x91\x54\xa8\x28\x66\xca\xe8\xb2\xcf\xa8\xf4\x09\x63\xb7\x08\x82\xeb\xbe\x21\x87\x3a\x7f\x6c\x92\xb8\x86\xa0\x37\xd6\x08\x32\x8a\xd6\x56\x96\x25\x5a\x70\x9e\x5b\x4a\x51\xcf\xb9\x27\x10\xb1\xef\xca\xc1\x9e\xd0\xf6\x08\xdc\x22\xe4\x46\x23\x34\x96\x58\xd7\x74\x86\xeb\x8e\x30\x77\x92\x3c\xa3\x07\xe6\xb0\xf7\x84\xb1\xf5\xf5\x76\x39\xef\x6b\x1f\x9a\x84\x39\x70\x07\x1c\x9c\xd4\xa5\xa2\x04\x4c\x93\x7f\x85\x5b\x18\x43\xeb\x7a\x1c\xd5\xf5\x71\xf1\xb9\x92\x59\xd2\x8b\x5f\xf3\x7b\x74\x20\x3d\x20\x77\x92\xd2\x60\x20\x6b\xa5\xca\xa1\x31\xd6\xf3\x4c\x75\x71\x90\xa9\xb7\x89\x38\x6b\xba\x2c\xe4\xf6\xbe\xe2\x9e\x0e\xe6\x06\xdd\x10\x9c\x14\x96\xdf\x9b\x3c\x88\x0f\x07\x57\xd3\xf1\xc1\xa9\x1f\x93\x04\x9e\xa0\x7e\xce\x51\x9a\x42\xef\x66\xf0\x36\xf4\xe0\x92\x85\x2d\x1d\xa5\x88\x35\x5c\xdc\x13\x4e\xcd\xa5\x66\x4c\xd6\x44\x18\xc6\x6c\x14\x19\x17\x85\xcf\xd4\xc9\x52\x93\xf2\xa3\xc8\x75\x4e\x70\xa5\x22\xc6\x46\x91\x32\x65\xc4\x26\x81\x6d\x87\xae\x17\xd2\x55\xa6\x55\x39\x64\xfd\xfd\x12\x50\x73\x61\x4d\x0c\x59\xeb\x49\x7e\x25\x75\xfb\x40\x19\x1c\xf8\x77\xa6\xfd\xab\x25\x89\x83\xc7\x06\x4a\xf4\x3d\x0c\xd7\x5d\x65\xf6\x84\x3c\x4c\xa9\x9a\xeb\x97\xc3\x7c\xd2\xed\x03\x2d\x8f\x1a\x5e\xa2\x0b\x2f\x06\x7e\xc9\xcb\xa4\xf2\xb5\x7a\x3c\xe5\xe6\x69\x5a\x4a\x5f\xb5\x59\x22\x4c\x9d\xd6\x26\xeb\xfa\x8f\x4c\x99\x2c\x3d\x3d\x9b\xe5\xc5\xb9\x98\xe5\x67\xc5\xef\xe7\x67\xc7\x53\x71\x9e\x4f\xf3\xe2\xe5\xec\xf4\xec\xe4\xfc\x8f\xd3\xb3\x3f\xf2\xd9\xa9\x38\xce\x8a\x69\xda\xdc\x97\x03\xfe\xf0\xef\x4b\xa0\x90\x94\xe6\x2f\x57\xd3\x63\x26\x8c\x76\x1e\x9c\x2c\xad\xaf\xa5\x86\xd7\x70\xf2\x3b\x63\x45\xab\x45\x90\x73\x3c\x81\xff\xb1\x51\x9a\x52\x2e\x77\xa8\x3d\xfc\xd7\xd4\x99\xc4\xc7\xac\xa3\xa3\x94\xd1\x28\xa7\x69\xae\x14\xe9\xf6\x61\x75\x39\x0d\xe6\x71\xd8\x57\x52\x61\x38\xfe\xd8\x4f\x5f\x3a\x97\x98\x68\xf4\xd4\x7b\x3a\x4b\xc9\xee\x46\xe6\x6c\x34\xa8\xb0\x2a\xb5\xb1\x38\x1e\x9c\x4a\x36\xab\xb7\x17\xef\xae\x2e\x27\x2c\x00\x95\x96\x67\xfd\x2d\xb0\xc8\x55\x74\x98\x1d\x61\xea\x9a\x12\x1a\xfe\x6c\xe9\xa0\xb0\xa6\x0e\x03\x8b\x56\x6c\x24\x0b\x50\xa8\xc7\x43\x72\x26\xf0\x0a\x66\xd4\xdc\x48\x99\x32\x79\xc3\x3d\x57\xe3\x68\x6d\x3c\xa0\x36\x6d\x59\xd1\x99\xb6\xcf\xac\x37\x07\x55\x7e\x89\x26\x6c\xf4\x8d\x8d\x44\x9d\xf7\x73\x0c\xe6\xaf\xbf\x87\xf1\x2e\x7e\x16\xcc\xc0\x98\xda\x3b\x0c\x33\x8c\x0d\x8d\x28\x19\x02\xb5\x59\xbd\xbd\xd9\xfe\x63\xb5\xfe\xed\x84\xca\xd4\xdc\x8b\x0a\x5c\xe7\x3c\xd6\xf9\x84\x8d\x04\x81\xd3\xbd\x1c\x8b\x8a\x6b\x82\xde\x04\x89\x62\x98\x4e\x9e\xe4\x5a\x1b\x2f\x8b\x6e\x2c\x62\x38\x50\x8c\x0a\x1d\x3c\x08\x3b\xc7\x8f\x26\xff\x76\x32\x99\xb0\xd0\xf6\x07\x2b\xb5\x57\x7a\x1c\xdd\xf2\xf0\x6b\xf7\x8c\x67\x92\x24\x51\x5f\x86\x68\xbc\x3a\x12\x41\x42\x5a\xfe\xf2\xfa\xc7\x5a\x4f\x42\x06\xc4\x62\x1c\x2d\x1f\x7a\x40\x5e\x78\x9a\x83\x81\xc0\x1c\x7e\xdd\xd1\xd9\xe1\x4c\x14\xd3\xf3\x09\x1b\x8d\x2c\xfa\xd6\x6a\xd2\x35\x28\xf6\xf4\x9b\xd1\x8f\xd6\x3f\xf1\x3a\x86\x7b\xc4\xe6\x71\xb0\xa2\xde\xb1\x67\xc5\x6f\x50\xa0\xdc\xe1\xd3\x88\x8e\x9f\xc6\x86\x37\x81\xc4\xaf\xbb\x7f\xeb\x28\x86\x27\x13\xa9\xcd\xa1\xa1\xe5\x03\x8a\xf1\xd3\x8b\xe0\xe7\x52\xef\xa4\x35\x7a\x3c\x99\xb0\x6f\xec\xff\x01\x00\x00\xff\xff\x39\x8f\xbf\x84\x4f\x09\x00\x00")

func imagesBaseEntrypointMainGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypointMainGo,
		"images/base/entrypoint/main.go",
	)
}

func imagesBaseEntrypointMainGo() (*asset, error) {
	bytes, err := imagesBaseEntrypointMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint/main.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":         imagesBaseDockerfile,
	"images/base/clean-install":      imagesBaseCleanInstall,
	"images/base/entrypoint/main.go": imagesBaseEntrypointMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile":    {imagesBaseDockerfile, map[string]*bintree{}},
			"clean-install": {imagesBaseCleanInstall, map[string]*bintree{}},
			"entrypoint": {nil, map[string]*bintree{
				"main.go": {imagesBaseEntrypointMainGo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
