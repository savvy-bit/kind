// Code generated by go-bindata.
// sources:
// ../../../../images/base/Dockerfile
// ../../../../images/base/entrypoint/main.go
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7b\x6f\xdb\x46\x12\xff\x5f\x9f\x62\x40\x19\x89\x9d\x8a\xa4\x63\x27\xa9\xeb\xc2\xbd\x53\x6c\xc5\x15\x12\x4b\x81\xa4\x34\x08\x7a\x85\xb1\x24\x47\xe4\x56\xcb\x5d\xde\x3e\xa4\x28\x39\xf7\xb3\x1f\x66\x49\xea\x61\x3b\x77\x05\x7a\x17\x04\xb0\xcd\xdd\x9d\x9d\xf7\xef\x37\xdb\x85\x4b\x55\xad\x35\xcf\x0b\x0b\x27\xc7\xcf\xcf\x60\x56\x20\xbc\x75\x09\x6a\x89\x16\x0d\xf4\x9d\x2d\x94\x36\x51\xa7\xdb\xe9\xc2\x3b\x9e\xa2\x34\x98\x81\x93\x19\x6a\xb0\x05\x42\xbf\x62\x69\x81\xed\x4a\x0f\x7e\x41\x6d\xb8\x92\x70\x12\x1d\xc3\x21\x6d\x08\x9a\xa5\xe0\xe8\xc7\x4e\x17\xd6\xca\x41\xc9\xd6\x20\x95\x05\x67\x10\x6c\xc1\x0d\xcc\xb9\x40\xc0\xcf\x29\x56\x16\xb8\x84\x54\x95\x95\xe0\x4c\xa6\x08\x2b\x6e\x0b\x7f\x4d\x23\x24\xea\x74\xe1\x53\x23\x42\x25\x96\x71\x09\x0c\x52\x55\xad\x41\xcd\x77\xf7\x01\xb3\x5e\x61\xfa\x57\x58\x5b\x9d\xc7\xf1\x6a\xb5\x8a\x98\x57\x36\x52\x3a\x8f\x45\xbd\xd1\xc4\xef\x86\x97\x83\xd1\x74\x10\x9e\x44\xc7\xfe\xc8\x07\x29\xd0\x18\xd0\xf8\x4f\xc7\x35\x66\x90\xac\x81\x55\x95\xe0\x29\x4b\x04\x82\x60\x2b\x50\x1a\x58\xae\x11\x33\xb0\x8a\xf4\x5d\x69\x6e\xb9\xcc\x7b\x60\xd4\xdc\xae\x98\xc6\x4e\x17\x32\x6e\xac\xe6\x89\xb3\x7b\xce\x6a\xb5\xe3\x66\x6f\x83\x92\xc0\x24\x04\xfd\x29\x0c\xa7\x01\xbc\xee\x4f\x87\xd3\x5e\xa7\x0b\x1f\x87\xb3\x9f\xc7\x1f\x66\xf0\xb1\x3f\x99\xf4\x47\xb3\xe1\x60\x0a\xe3\x09\x5c\x8e\x47\x57\xc3\xd9\x70\x3c\x9a\xc2\xf8\x0d\xf4\x47\x9f\xe0\xed\x70\x74\xd5\x03\xe4\xb6\x40\x0d\xf8\xb9\xd2\xa4\xbf\xd2\xc0\xc9\x8d\x98\x91\xcf\xa6\x88\x7b\x0a\xcc\x55\xad\x90\xa9\x30\xe5\x73\x9e\x82\x60\x32\x77\x2c\x47\xc8\xd5\x12\xb5\xe4\x32\x87\x0a\x75\xc9\x0d\x05\xd3\x00\x93\x59\xa7\x0b\x82\x97\xdc\x32\xeb\xbf\x3c\x30\x2a\xea\x74\xba\xb0\xe0\x32\x83\x54\x38\x63\x51\x43\xc2\xc8\xd4\x92\xe5\xd8\x83\xc4\x71\x61\xc9\xd0\x6d\x6a\x3d\x35\x90\x61\xc2\x99\x0c\x69\x63\xa7\x0b\xab\x82\xa7\x05\xf9\x26\x61\x86\xa7\x4c\x88\x35\x30\x58\xa2\x5e\x03\xb9\xaa\xaa\x30\x83\x4c\xad\x64\x73\xaa\x96\x0c\x87\x7f\xbc\x38\xbd\x79\x7d\xd4\xe9\x82\x2d\x98\x05\x53\xf0\xca\xd4\x69\xc3\xc0\x94\x4c\x08\x70\x96\x0b\x6e\xd7\xf0\x34\x15\xc8\x64\xc8\xa5\xb1\x4c\x88\xa7\xdb\xeb\x48\x56\x86\x4c\x40\xa6\x55\x45\x01\x9d\x2b\xdd\xe9\x02\xab\x6c\x98\xa3\x05\x57\x65\xcc\x22\x3c\x79\xb2\xf9\xd2\x88\x80\x83\xbf\x43\xa7\x0b\x06\xd1\xe7\x98\x39\x8f\xe3\x9c\xdb\xc2\x25\x51\xaa\xca\x78\xb1\x31\x74\xf7\x57\xab\x11\xe3\x92\x91\x7f\x62\xf2\x49\x16\xef\xf9\xa0\xd3\x85\x99\xaa\x8b\x62\x85\xc0\xb2\x0c\xcc\xda\x58\x2c\xb3\x1e\x5c\x8e\x86\x3d\x8a\x03\x28\x1f\x67\xab\x94\x30\x20\x11\xb3\x3a\x0f\xb5\xab\x7d\xcb\xb2\xd2\x8b\x79\xa3\x74\x7b\x16\xbe\x83\x4c\xa5\x0b\xd4\x90\x2a\x39\xe7\xb9\xd3\x3e\x86\x54\x7f\x19\x24\x28\xd4\xaa\xe7\x8d\xa0\x60\xce\x95\x10\x6a\x45\xe1\xd7\x38\x47\x8d\x32\x45\x73\xde\xe9\x6e\x0c\xa4\x2a\x9a\x53\xee\xa3\x59\x58\x55\xf9\x52\x5a\xf1\x05\x8f\xa7\x4d\xee\xc7\xcd\xa5\xf1\xa5\x92\x54\x9f\xa8\x87\xd2\xa2\x9e\xb3\x14\xe3\x1d\x39\x19\x2e\x51\xa8\x0a\xb5\x89\x34\x66\x05\xb3\xde\x67\x89\x50\x79\x7c\x72\xfc\xfc\x45\x7c\xfc\x92\xfe\x6b\x27\x29\x15\xc3\x46\x66\x48\x71\xe5\x32\xac\xad\x09\xd3\xf6\x86\x3f\x2f\xf8\x55\x7c\xfc\x43\xfc\xfc\xf4\x81\x60\x2e\x43\x16\x4a\x25\xc3\x4a\xf3\x25\x17\x98\x63\xb6\x2b\x9e\xc2\x32\xbe\x1a\x1f\x26\x28\x6d\x81\x28\x32\xd4\x47\xe7\x54\x6a\x42\x69\x04\xe3\xaa\x4a\x69\x6a\x01\x4d\x6c\x98\x4e\x0b\x34\x3d\x18\x0e\xda\xb5\xba\x55\x4e\x2e\x7f\x06\xa6\xf3\xa8\x09\x8f\x54\xab\x3a\xd4\xdc\x80\xb1\x5c\x08\xca\xc4\xfe\xe4\x1a\x8c\xa2\xe8\xa7\x4c\x82\x46\x6a\x92\x9c\xce\x6b\xe5\xf2\x42\xb9\x5a\x94\x4f\x1d\x2a\x19\x6e\xfd\x37\xb2\x97\x1b\xaf\x02\x6d\x56\x7e\xd3\xc6\x80\xa8\x43\x52\xe9\xfa\x8b\x80\x95\xd9\xab\x17\x81\xff\xf0\xba\x3f\x1d\xdc\x0e\x6f\xfa\xd7\x83\xdb\x5f\x06\x93\xe9\x70\x3c\xba\x08\x8e\xa3\xd3\xe8\xe4\xfe\xf2\x45\xb0\x38\x33\x51\x9e\xea\x88\xab\xdd\x7c\x0d\x0f\xbe\x92\xd0\xbb\xf3\x83\xaf\x0f\x65\xdd\x05\x9d\x37\x93\xf1\x0d\xec\xae\xdd\x91\x27\x47\xe3\xd9\xe0\xbc\x76\x46\xe9\x8c\x85\x04\x21\xc3\x39\x97\x98\x01\xcb\x7d\x47\x9f\x53\xf7\xa0\xc3\xbb\x71\x55\xa9\x89\xea\xc0\xfb\x88\xa2\xcc\xb9\xc4\x78\x93\xa5\x75\x35\xa1\x8e\xbb\x26\x55\x15\x3e\xb4\xd8\x57\xaa\xf5\x2e\xba\x1a\xbc\x1e\xf6\x47\xb7\x6f\x26\xe3\xd1\x6c\x30\xba\xba\x90\x4a\x72\x4a\x52\x96\x5a\xbe\x44\x30\x56\x55\x06\x8c\x2a\x91\x2a\x1e\x56\xcc\xf7\x43\xd3\xdb\x04\x8b\xc0\x8b\x1a\x04\x68\xea\x1a\x4c\xe7\xae\x44\x69\x7b\xb0\xc2\xa7\x1a\xe1\x90\x25\x47\xce\xd0\x3d\xa4\x83\x55\x40\x2d\x83\x81\xc5\xb2\x52\x9a\xe9\x35\x0c\x46\xbf\xd4\x96\xd6\x71\xf9\xcf\xda\x74\xba\x70\x8d\x16\x32\xac\x50\x66\x28\x53\x8e\x86\xd2\x87\x6b\x63\x37\x2d\xc2\x6a\xb4\x69\x11\x26\x2c\x5d\x50\xb2\x99\x9d\x04\xa2\xbb\x25\xae\x70\xdb\x0c\xea\xb6\xd7\xe4\x25\xc9\x32\xce\x23\x06\x29\xbc\x28\x4d\x4e\x0d\xf0\x77\xe5\xb4\x64\x3e\xc3\x88\x0e\x6c\x1b\x39\x30\xa1\x91\x65\x6b\x28\x98\x39\x07\x63\x8a\x1e\xb9\xa8\x07\x46\xb2\xaa\xde\x5d\x7b\x28\xd1\x6a\x81\xb2\x6e\xd7\x5c\x5a\x05\x87\xc8\xd2\xc2\x03\x1d\x08\x2e\xf1\x88\x7a\x4a\x08\x15\x4b\x17\x2c\x47\xea\x63\x29\x1a\x43\xce\x21\x64\x6a\xfa\x2b\x69\x54\x47\xfc\xfe\xe6\xdd\xa6\x67\x50\x2f\x79\x8a\x06\x0e\x1b\x0b\x8f\x1e\xdd\x4d\x72\x9b\x2e\x18\x43\xb1\xae\x50\x53\x57\x86\x18\xb6\xcd\xd9\x13\x0f\x25\x51\x7a\xb7\x84\x50\x72\x93\x6e\xe5\x1c\xd6\x38\xc2\xd1\xb7\x66\x5f\x96\x12\x94\xd3\x40\x36\x52\x37\xe6\x32\x3f\xaa\x1d\x26\xbd\xf7\x09\x6d\x5c\x05\x87\x1a\x4b\xb5\x24\x5b\x9c\x5c\x31\x49\x78\xdf\x86\xa2\x55\xfd\xc8\x47\x54\x7a\xc4\x5b\x21\x51\x03\xcf\x35\x1e\x89\xc6\xff\xa9\x7d\x4e\x3e\x8c\x00\xd3\x42\x41\x90\x61\xd2\x12\xa6\xb9\xad\xa2\xba\xd8\x7d\x97\x6f\x50\xf7\x61\xb2\x95\x8c\xcb\x00\xfe\xd1\x81\xe6\xdf\x4f\x10\xa3\x4d\x63\x56\xd9\xd8\x28\xa7\x53\x34\x91\xe0\xc6\x46\x59\xbc\x39\xe3\x3f\x34\x47\x9e\x3c\x81\x3d\x60\xde\x48\x22\xb4\xb5\x9a\x49\x43\x47\x42\x6f\x39\xa4\x2c\x4c\x51\x5b\xa2\x2c\xcc\x47\xcc\x69\xb1\xa1\x5d\x61\xa5\xc9\x25\x14\xa2\x30\x55\x65\xa9\x24\xe4\xd2\x55\xf9\x09\x08\x93\x84\x1a\x05\x52\x1e\xb7\xe2\x5b\x9c\x7a\xa4\x7a\x1a\x77\x99\xb5\x59\x3e\xb2\x2c\x78\xd2\xec\x38\x7e\x64\xb5\x15\xcf\x2b\x4b\x41\x34\xc0\x2b\xad\x9c\xc5\x13\x40\x5b\x50\x9a\x80\x51\x29\xb3\x9e\x95\x84\x82\x4b\xf7\x19\x4a\xe5\xa4\x05\x4c\x9a\x03\x2e\xc3\x25\x2c\x4a\x95\x01\x73\x73\x13\xd6\x40\xdf\x8a\x4d\x98\x29\x40\x9b\xb5\x4c\xb7\xee\x9b\x13\xe9\x8a\x05\x4f\x36\xd8\x5b\xff\xa4\x1f\x5c\x72\x1b\x59\xa6\x73\xb4\x11\x65\x9f\x89\x21\x94\xac\x44\x08\x5a\x2b\x6d\x59\x11\xff\x36\xa1\x41\xeb\xaa\xa8\xc9\xc9\x00\xc2\x0c\x05\x5a\xdc\x5e\xa3\x4b\x08\xe7\x8f\xde\x53\x3a\x61\x79\xe8\x0c\xea\xfd\xab\x9e\x3d\x38\x4c\x89\x71\xef\xf0\xb3\x6f\x6e\x7e\xe4\x26\xa1\x52\x26\xc2\xb9\xf9\x6f\xf7\x3c\xe6\x0c\xca\x7a\x7b\xff\x24\x39\xfb\x2f\x1c\x27\xf7\xa6\x56\xfc\x29\x09\x9e\xd5\x7e\x53\xf1\xba\xfc\x26\xc8\xb2\xb7\x37\x26\xbf\x90\x2a\x80\x9f\x7e\xda\x77\x58\xdb\x07\x22\xa2\x71\x84\x67\xc3\xa6\x62\xea\x82\xee\x35\xad\x9d\x1a\x9e\xa1\xee\x58\xb0\xaa\xc2\x16\x4e\x57\xb8\xa1\xad\x1e\xd9\x9a\x79\x69\xd3\xde\x58\xa2\x3c\xd8\x50\xaf\xf7\x13\xc9\xb7\x80\xb7\x91\x12\xfb\xdc\x8d\xdb\x5e\x82\xb1\x4b\x9c\xb4\x2e\xee\x1a\xb4\xa1\xab\x42\x5b\x60\xa8\xb1\x52\x86\x5b\xa5\xd7\x84\x96\x32\xdb\xc8\xdc\xf6\x5c\xcf\x28\x54\x6a\x62\x9f\x7d\x31\x97\x2d\xd0\xd9\xf6\xa2\x70\x51\xb3\xda\xb8\xbb\x85\x85\x70\x07\x16\x08\xe1\xea\x3f\x9f\x1a\xb8\x7e\x7f\x0d\x0b\x5c\xfb\x05\x82\x46\x4f\x69\xb9\xcc\x51\x57\x9a\x4b\xbb\xf7\x7d\x4f\xbb\xb0\xa5\xf9\x1e\xce\xf8\x3d\xc7\x36\xbd\x7c\x43\x5e\x9e\x7f\x1f\x1d\x9f\x12\xce\xa9\xf9\x9c\xa7\xdc\x37\xee\x06\x51\xeb\x89\x71\x67\x80\x4e\x9d\xd6\x28\xad\x58\xf7\x1a\x58\xae\xb8\xac\x19\x1a\xb3\xd1\x4e\x4b\x7f\xc4\x27\x96\x99\x85\x89\x7d\x03\x78\xe0\x8d\x9a\x3a\x8c\x2f\xdf\x0e\x26\x5b\xf6\xe6\xf5\x8a\x4e\xfe\x48\x31\x3c\xfe\xa3\x21\x6a\x4d\x8b\x0a\x7c\x08\x9a\xd9\x61\x43\x45\x50\x2e\x7b\x9e\xce\xdc\xe3\x32\xd1\x86\x2b\x79\xce\x63\x15\x30\x20\x7a\xfc\x05\xb5\x82\x25\x13\x8e\x52\xc5\x70\xe1\xe7\x83\x66\x5e\xa9\x69\x12\xcc\xb5\x2a\x7d\xef\x5e\xe0\x9a\x50\x3e\xf8\x58\x2f\x9c\xb7\x1f\x41\x39\x5b\x39\x1a\xd5\x94\x13\x99\xbf\x3d\xa1\x44\xd4\x94\x78\x87\xc6\x66\x44\x68\x1b\x96\x45\xb4\x49\x97\x04\x8d\x47\x35\x29\xed\xbf\x9f\xdd\xbe\x1d\x7c\xba\xbd\x1a\x8f\x66\xb7\x1f\xfb\x93\xd1\xed\x78\x74\x7b\xd5\x1f\x5d\x0f\x26\xe3\x0f\xd3\xdb\x0f\x53\x4f\x57\xe7\x4c\x18\x0c\x3c\xac\x79\x84\x08\xe7\x66\xfa\x0e\x82\x6d\x4a\xaf\xa4\x50\x2c\xdb\x4d\xeb\x3a\x9d\x0f\x0e\xa3\xba\xe6\x94\x69\x01\xe3\xc7\xa6\x34\x0f\x86\x57\xc1\x51\x9c\x57\x79\x00\xff\xda\x98\x42\xb9\x14\x6e\x8b\xb8\xfd\xbc\x93\x72\x70\x3c\x78\xfd\xe6\xf2\xea\xec\x6c\xbb\xab\xa6\xa5\x0d\x77\x0e\x48\x46\x48\x07\xb7\xf9\xb8\x03\xa6\x1e\x90\x7f\xa5\x81\xe2\xa2\x39\xf0\x1b\xfc\x75\x33\xe0\xe0\x50\x98\xe4\xb6\x85\xc4\x30\x35\x47\x60\x3c\xfc\x04\xdf\x42\xe5\x60\x53\xe9\x17\x07\x5f\xf7\xf3\xee\x2e\xd8\x6d\x46\x97\xa3\x21\x24\x5c\x32\x4d\x4c\xc9\x2a\x88\x55\x65\xe3\x54\xf2\x38\xe1\xf2\xf1\x39\x2a\x53\x29\xac\x8a\x35\xc4\xb0\xa2\x11\xbe\x40\x5d\xd3\xf7\xcb\xd1\x70\x77\x30\x79\x15\x1d\x07\x9b\xef\xb3\xfe\xe4\x75\xff\xdd\xbb\x8b\x20\x95\x3c\xac\x84\xcb\xb9\x34\xed\x38\x12\x2e\x0f\xbe\xee\x9c\xbd\x8b\x6c\xfe\x65\x7b\xd2\x4f\x23\x1f\x26\xef\x2e\x36\xe9\x60\xac\xd2\x2c\xc7\x28\x57\x2a\x17\xc8\x2a\x6e\xee\x0d\xf0\xad\x0f\x63\x89\x76\xa5\xf4\xa2\xbd\x30\xde\x4a\xf5\x02\xeb\x6b\xdb\x0b\xee\xea\x3f\x1b\x4d\xef\x76\xd3\x91\xb2\x31\x0c\x35\x5a\xbd\x86\x97\x10\x86\x4d\x45\xc4\xb6\xac\xc8\x55\xa4\x30\x34\xd2\x48\xd0\x4e\x50\x4c\xc1\x4e\x5e\xbe\x32\xae\xdc\xdf\xbc\x59\x2f\x17\x19\xd7\x10\x56\x7b\x6e\xdf\x2e\x5b\xa6\x21\xbc\xdc\x5f\x0c\x3f\x7f\x99\x7f\x43\x1a\x81\x99\xde\x5f\xa4\x50\x5b\x24\x14\x69\x48\xac\x7f\x76\xe1\xbe\x62\xb9\x6c\x29\xf6\x21\xb7\xb0\xa2\x89\x36\x2d\x30\x5d\x6c\x9e\x9b\x36\x94\x93\x1a\xcf\xd1\xff\xec\x59\x81\x06\xaa\xad\xe8\x0d\x36\xb4\x1a\xe2\x67\x6e\x0d\x41\xda\x74\x78\x3d\x99\xdd\x0c\x47\xdf\x9d\xd6\x4d\x6f\x3a\xbc\x9e\x0d\x26\x37\x70\x58\x03\xa7\xc6\x10\x3f\x63\xea\xa8\x6b\x73\xbb\xab\x5e\xe2\xf2\x2f\x5c\x08\xb6\x4b\xb6\x4d\xa1\x56\xb7\x89\xcb\xa3\x34\xe7\x7f\xe3\xd9\xc5\xf3\x93\xe3\xe7\xaf\x5e\x7e\xdf\x99\xce\xc6\xef\xa7\xc3\xeb\x51\xff\xdd\xce\x7d\xe4\xb5\x95\x66\xd5\x76\x0a\xe3\xb6\xf0\xd3\x83\x7f\x81\x63\x02\x50\x5a\xbd\xae\x14\xa7\x39\xd2\x20\x42\xb5\xc8\xeb\x91\xd6\x3b\xaf\xd8\x79\x2a\xf0\x4f\x69\x35\x52\x37\xaf\x64\x7e\xe5\x77\x9a\xa5\x05\x5a\x03\xce\x50\xf7\x06\x57\xd5\x48\x4f\x9c\x3f\x37\x90\xe0\x5c\xe9\x3a\x04\x5c\x3a\xff\x58\xe1\x71\xa8\xd1\xa8\x7e\x7f\x13\x08\x34\x0c\x12\x07\xf4\xbd\x9f\xd9\x8d\xc6\xdc\xc0\xfb\xe1\xd5\xf3\x4e\x77\xa3\xd0\x0a\x41\xe0\x12\xa9\x76\xbc\x0a\x5b\xc5\x9b\x17\xc0\xce\xe5\xf8\xfd\x27\xf8\x15\x82\xad\x71\xf1\xf6\xd7\xa0\x07\x41\xec\x8c\xae\x49\x1d\xa5\x62\x1c\xc0\x6f\x9d\x2e\x7c\x44\xcf\x61\xb6\x19\xa6\x08\x20\xe8\xf2\x76\xe6\xa3\x5c\x5a\x32\xcd\x95\x37\xb5\x9d\xff\x5a\xb4\xa6\xc2\x15\x68\x7b\x80\x36\x8d\x8e\x36\xa0\xdd\xfa\xef\x99\x92\x62\xfd\xac\x1d\x08\x3d\xdc\xf9\xf7\xb0\x9e\x17\xbb\xd5\xcf\xe3\xfb\x12\xb5\xe6\x59\x46\x34\xca\xd2\xd5\x96\x97\xd8\x19\x8c\x66\x93\x4f\xef\xc7\xc3\xd1\x8c\x8c\xbb\x67\xc3\x3d\x03\x0d\x7d\x23\x9a\x48\xb6\x7d\xa3\xff\x11\xf2\xfa\x84\x68\x2d\xbe\xe9\x5f\x12\x2c\xf8\x87\x5c\x66\x0c\xcf\x25\x69\xb9\x93\x90\x3b\xef\x8c\xfb\x2c\x33\x8b\xb9\x31\x0e\x4d\x7c\x7a\xfa\xfd\x8b\xae\xff\x9d\x46\x21\x94\x36\x3c\x39\x3b\x3b\x3b\x3b\x39\x7d\xf9\xf2\x2f\xca\x39\x3d\xfd\xe1\xe4\xe5\xd9\x8b\xb3\xd3\xce\xbf\x03\x00\x00\xff\xff\xd4\x12\xbb\x55\x3c\x18\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypointMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\x61\x73\xdb\xb8\x11\xfd\x2c\xfc\x8a\x3d\x76\x6e\x2a\xe5\x68\xd2\x92\xcf\x8e\x4f\x4d\x3e\xa8\xb6\x92\x68\xe2\xca\x19\x4b\xa9\x9b\x49\x3d\x09\x08\x2e\x49\x8c\x41\x80\x05\x40\xc9\x6c\x27\xff\xbd\xb3\x20\xed\xc8\xc9\x7d\xb0\x2c\x90\xc0\xdb\xb7\xef\x3d\xac\xd2\x17\xec\xc2\x34\x9d\x95\x65\xe5\x61\x76\x3c\x3d\x87\x6d\x85\xf0\xbe\xcd\xd0\x6a\xf4\xe8\x60\xd1\xfa\xca\x58\x97\x30\x76\x25\x05\x6a\x87\x39\xb4\x3a\x47\x0b\xbe\x42\x58\x34\x5c\x54\x08\xc3\x9b\x18\xfe\x89\xd6\x49\xa3\x61\x96\x1c\xc3\x98\x36\x44\xc3\xab\x68\xf2\x37\xd6\x99\x16\x6a\xde\x81\x36\x1e\x5a\x87\xe0\x2b\xe9\xa0\x90\x0a\x01\x1f\x04\x36\x1e\xa4\x06\x61\xea\x46\x49\xae\x05\xc2\x5e\xfa\x2a\x14\x19\x20\x12\xf6\x69\x00\x30\x99\xe7\x52\x03\x07\x61\x9a\x0e\x4c\x71\xb8\x0b\xb8\x67\x0c\x00\xa0\xf2\xbe\x99\xa7\xe9\x7e\xbf\x4f\x78\x60\x99\x18\x5b\xa6\xaa\xdf\xe5\xd2\xab\xd5\xc5\x72\xbd\x59\x1e\xcd\x92\x63\xc6\x3e\x6a\x85\xce\x81\xc5\xff\xb4\xd2\x62\x0e\x59\x07\xbc\x69\x94\x14\x3c\x53\x08\x8a\xef\xc1\x58\xe0\xa5\x45\xcc\xc1\x1b\xe2\xb9\xb7\xd2\x4b\x5d\xc6\xe0\x4c\xe1\xf7\xdc\x22\xcb\xa5\xf3\x56\x66\xad\x7f\x26\xd0\x23\x2b\xe9\xe0\x70\x83\xd1\xc0\x35\x44\x8b\x0d\xac\x36\x11\xfc\x7d\xb1\x59\x6d\x62\x76\xbb\xda\xbe\xbb\xfe\xb8\x85\xdb\xc5\xcd\xcd\x62\xbd\x5d\x2d\x37\x70\x7d\x03\x17\xd7\xeb\xcb\xd5\x76\x75\xbd\xde\xc0\xf5\x1b\x58\xac\x3f\xc1\xfb\xd5\xfa\x32\x06\x94\xbe\x42\x0b\xf8\xd0\x58\xe2\x6e\x2c\x48\x92\x0e\xf3\x84\x6d\x10\x9f\x15\x2f\x4c\x4f\xc6\x35\x28\x64\x21\x05\x28\xae\xcb\x96\x97\x08\xa5\xd9\xa1\xd5\x52\x97\xd0\xa0\xad\xa5\x23\xf3\x1c\x70\x9d\x33\x25\x6b\xe9\xb9\x0f\xeb\x9f\xda\x49\xd8\x8b\x94\xb1\xf4\x05\xdb\x92\x85\x54\x17\x6b\xd4\xde\x81\x69\x89\x06\x21\xa3\xf6\xb6\x6b\x8c\xd4\x3e\x81\x95\x9f\xb3\x23\xd8\x73\xe9\x5d\xe0\xb2\x59\xbd\xfd\xb8\xb9\x99\xb2\x23\xc2\xd4\x80\x0f\x28\x1c\x8c\xb9\x2d\x77\x9f\xa7\x77\x31\xf4\x5f\xe6\x77\x31\xa0\xde\x7d\x9e\xdf\x4d\x58\x5f\x87\x2b\x65\xf6\x0e\x5a\x47\x1e\x34\x68\x0b\x63\x6b\x30\x41\x05\x2e\x7a\xa6\x52\x07\x9a\x91\x36\x39\x46\x20\x8c\xa6\xa0\xa0\x85\x9d\xe4\xf0\x35\x37\xe2\x3e\x28\x86\xe2\x2b\xfb\x92\x61\x61\x2c\x7e\x81\x3d\x42\xc5\x77\x48\x10\x2d\x57\xaa\x83\x28\x33\xc6\x63\x1e\x05\x24\xa9\xa5\x27\x3d\x00\x77\x68\x3b\x5f\x91\x54\xa8\x28\x66\xca\xe8\xb2\xcf\xa8\xf4\x09\x63\xb7\x08\x82\xeb\xbe\x21\x87\x3a\x7f\x6c\x92\xb8\x86\xa0\x37\xd6\x08\x32\x8a\xd6\x56\x96\x25\x5a\x70\x9e\x5b\x4a\x51\xcf\xb9\x27\x10\xb1\xef\xca\xc1\x9e\xd0\xf6\x08\xdc\x22\xe4\x46\x23\x34\x96\x58\xd7\x74\x86\xeb\x8e\x30\x77\x92\x3c\xa3\x07\xe6\xb0\xf7\x84\xb1\xf5\xf5\x76\x39\xef\x6b\x1f\x9a\x84\x39\x70\x07\x1c\x9c\xd4\xa5\xa2\x04\x4c\x93\x7f\x85\x5b\x18\x43\xeb\x7a\x1c\xd5\xf5\x71\xf1\xb9\x92\x59\xd2\x8b\x5f\xf3\x7b\x74\x20\x3d\x20\x77\x92\xd2\x60\x20\x6b\xa5\xca\xa1\x31\xd6\xf3\x4c\x75\x71\x90\xa9\xb7\x89\x38\x6b\xba\x2c\xe4\xf6\xbe\xe2\x9e\x0e\xe6\x06\xdd\x10\x9c\x14\x96\xdf\x9b\x3c\x88\x0f\x07\x57\xd3\xf1\xc1\xa9\x1f\x93\x04\x9e\xa0\x7e\xce\x51\x9a\x42\xef\x66\xf0\x36\xf4\xe0\x92\x85\x2d\x1d\xa5\x88\x35\x5c\xdc\x13\x4e\xcd\xa5\x66\x4c\xd6\x44\x18\xc6\x6c\x14\x19\x17\x85\xcf\xd4\xc9\x52\x93\xf2\xa3\xc8\x75\x4e\x70\xa5\x22\xc6\x46\x91\x32\x65\xc4\x26\x81\x6d\x87\xae\x17\xd2\x55\xa6\x55\x39\x64\xfd\xfd\x12\x50\x73\x61\x4d\x0c\x59\xeb\x49\x7e\x25\x75\xfb\x40\x19\x1c\xf8\x77\xa6\xfd\xab\x25\x89\x83\xc7\x06\x4a\xf4\x3d\x0c\xd7\x5d\x65\xf6\x84\x3c\x4c\xa9\x9a\xeb\x97\xc3\x7c\xd2\xed\x03\x2d\x8f\x1a\x5e\xa2\x0b\x2f\x06\x7e\xc9\xcb\xa4\xf2\xb5\x7a\x3c\xe5\xe6\x69\x5a\x4a\x5f\xb5\x59\x22\x4c\x9d\xd6\x26\xeb\xfa\x8f\x4c\x99\x2c\x3d\x3d\x9b\xe5\xc5\xb9\x98\xe5\x67\xc5\xef\xe7\x67\xc7\x53\x71\x9e\x4f\xf3\xe2\xe5\xec\xf4\xec\xe4\xfc\x8f\xd3\xb3\x3f\xf2\xd9\xa9\x38\xce\x8a\x69\xda\xdc\x97\x03\xfe\xf0\xef\x4b\xa0\x90\x94\xe6\x2f\x57\xd3\x63\x26\x8c\x76\x1e\x9c\x2c\xad\xaf\xa5\x86\xd7\x70\xf2\x3b\x63\x45\xab\x45\x90\x73\x3c\x81\xff\xb1\x51\x9a\x52\x2e\x77\xa8\x3d\xfc\xd7\xd4\x99\xc4\xc7\xac\xa3\xa3\x94\xd1\x28\xa7\x69\xae\x14\xe9\xf6\x61\x75\x39\x0d\xe6\x71\xd8\x57\x52\x61\x38\xfe\xd8\x4f\x5f\x3a\x97\x98\x68\xf4\xd4\x7b\x3a\x4b\xc9\xee\x46\xe6\x6c\x34\xa8\xb0\x2a\xb5\xb1\x38\x1e\x9c\x4a\x36\xab\xb7\x17\xef\xae\x2e\x27\x2c\x00\x95\x96\x67\xfd\x2d\xb0\xc8\x55\x74\x98\x1d\x61\xea\x9a\x12\x1a\xfe\x6c\xe9\xa0\xb0\xa6\x0e\x03\x8b\x56\x6c\x24\x0b\x50\xa8\xc7\x43\x72\x26\xf0\x0a\x66\xd4\xdc\x48\x99\x32\x79\xc3\x3d\x57\xe3\x68\x6d\x3c\xa0\x36\x6d\x59\xd1\x99\xb6\xcf\xac\x37\x07\x55\x7e\x89\x26\x6c\xf4\x8d\x8d\x44\x9d\xf7\x73\x0c\xe6\xaf\xbf\x87\xf1\x2e\x7e\x16\xcc\xc0\x98\xda\x3b\x0c\x33\x8c\x0d\x8d\x28\x19\x02\xb5\x59\xbd\xbd\xd9\xfe\x63\xb5\xfe\xed\x84\xca\xd4\xdc\x8b\x0a\x5c\xe7\x3c\xd6\xf9\x84\x8d\x04\x81\xd3\xbd\x1c\x8b\x8a\x6b\x82\xde\x04\x89\x62\x98\x4e\x9e\xe4\x5a\x1b\x2f\x8b\x6e\x2c\x62\x38\x50\x8c\x0a\x1d\x3c\x08\x3b\xc7\x8f\x26\xff\x76\x32\x99\xb0\xd0\xf6\x07\x2b\xb5\x57\x7a\x1c\xdd\xf2\xf0\x6b\xf7\x8c\x67\x92\x24\x51\x5f\x86\x68\xbc\x3a\x12\x41\x42\x5a\xfe\xf2\xfa\xc7\x5a\x4f\x42\x06\xc4\x62\x1c\x2d\x1f\x7a\x40\x5e\x78\x9a\x83\x81\xc0\x1c\x7e\xdd\xd1\xd9\xe1\x4c\x14\xd3\xf3\x09\x1b\x8d\x2c\xfa\xd6\x6a\xd2\x35\x28\xf6\xf4\x9b\xd1\x8f\xd6\x3f\xf1\x3a\x86\x7b\xc4\xe6\x71\xb0\xa2\xde\xb1\x67\xc5\x6f\x50\xa0\xdc\xe1\xd3\x88\x8e\x9f\xc6\x86\x37\x81\xc4\xaf\xbb\x7f\xeb\x28\x86\x27\x13\xa9\xcd\xa1\xa1\xe5\x03\x8a\xf1\xd3\x8b\xe0\xe7\x52\xef\xa4\x35\x7a\x3c\x99\xb0\x6f\xec\xff\x01\x00\x00\xff\xff\x39\x8f\xbf\x84\x4f\x09\x00\x00")

func imagesBaseEntrypointMainGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypointMainGo,
		"images/base/entrypoint/main.go",
	)
}

func imagesBaseEntrypointMainGo() (*asset, error) {
	bytes, err := imagesBaseEntrypointMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint/main.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":         imagesBaseDockerfile,
	"images/base/entrypoint/main.go": imagesBaseEntrypointMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile": {imagesBaseDockerfile, map[string]*bintree{}},
			"entrypoint": {nil, map[string]*bintree{
				"main.go": {imagesBaseEntrypointMainGo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
