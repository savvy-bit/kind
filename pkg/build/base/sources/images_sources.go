// Code generated by go-bindata.
// sources:
// ../../../../images/base/Dockerfile
// ../../../../images/base/clean-install
// ../../../../images/base/entrypoint/main.go
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7b\x6f\xdb\xb8\xb2\xff\xdf\x9f\x62\x20\x07\xbb\x49\xd7\xb2\xd2\xa4\xed\x66\xb3\xc8\x5e\xb8\x89\x9b\x35\x9a\xda\x85\xed\xb6\x28\xee\xbd\x08\x28\x6a\x2c\x71\x4d\x91\x3a\x7c\xd8\x71\x7b\xfa\xdd\x0f\x86\x92\xfc\x48\xdb\x3d\x0b\xec\x39\x45\x81\x24\x22\x39\xcf\xdf\xcc\xfc\xc8\x2e\x5c\xeb\x6a\x63\x44\x5e\x38\x38\x3b\x7d\x7a\x01\xf3\x02\xe1\xb5\x4f\xd1\x28\x74\x68\x61\xe0\x5d\xa1\x8d\xed\x77\xba\x9d\x2e\xdc\x09\x8e\xca\x62\x06\x5e\x65\x68\xc0\x15\x08\x83\x8a\xf1\x02\xdb\x95\x1e\xbc\x47\x63\x85\x56\x70\xd6\x3f\x85\x63\xda\x10\x35\x4b\xd1\xc9\xaf\x9d\x2e\x6c\xb4\x87\x92\x6d\x40\x69\x07\xde\x22\xb8\x42\x58\x58\x08\x89\x80\x0f\x1c\x2b\x07\x42\x01\xd7\x65\x25\x05\x53\x1c\x61\x2d\x5c\x11\xd4\x34\x42\xfa\x9d\x2e\x7c\x6c\x44\xe8\xd4\x31\xa1\x80\x01\xd7\xd5\x06\xf4\x62\x7f\x1f\x30\x17\x0c\xa6\x7f\x85\x73\xd5\x65\x92\xac\xd7\xeb\x3e\x0b\xc6\xf6\xb5\xc9\x13\x59\x6f\xb4\xc9\xdd\xe8\x7a\x38\x9e\x0d\xe3\xb3\xfe\x69\x38\xf2\x4e\x49\xb4\x16\x0c\xfe\xc3\x0b\x83\x19\xa4\x1b\x60\x55\x25\x05\x67\xa9\x44\x90\x6c\x0d\xda\x00\xcb\x0d\x62\x06\x4e\x93\xbd\x6b\x23\x9c\x50\x79\x0f\xac\x5e\xb8\x35\x33\xd8\xe9\x42\x26\xac\x33\x22\xf5\xee\x20\x58\xad\x75\xc2\x1e\x6c\xd0\x0a\x98\x82\x68\x30\x83\xd1\x2c\x82\x97\x83\xd9\x68\xd6\xeb\x74\xe1\xc3\x68\xfe\xfb\xe4\xdd\x1c\x3e\x0c\xa6\xd3\xc1\x78\x3e\x1a\xce\x60\x32\x85\xeb\xc9\xf8\x66\x34\x1f\x4d\xc6\x33\x98\xbc\x82\xc1\xf8\x23\xbc\x1e\x8d\x6f\x7a\x80\xc2\x15\x68\x00\x1f\x2a\x43\xf6\x6b\x03\x82\xc2\x88\x19\xc5\x6c\x86\x78\x60\xc0\x42\xd7\x06\xd9\x0a\xb9\x58\x08\x0e\x92\xa9\xdc\xb3\x1c\x21\xd7\x2b\x34\x4a\xa8\x1c\x2a\x34\xa5\xb0\x94\x4c\x0b\x4c\x65\x9d\x2e\x48\x51\x0a\xc7\x5c\xf8\xf2\x95\x53\xfd\x4e\xa7\x0b\x4b\xa1\x32\xe0\xd2\x5b\x87\x06\x52\x46\xae\x96\x2c\xc7\x1e\xa4\x5e\x48\x47\x8e\xfa\xd4\x2b\xe7\x2f\x9f\x5e\xf4\x4f\x9f\x85\x78\xcf\x75\x0d\x82\x35\x02\xcb\x32\xb0\x1b\xeb\xb0\xcc\x7a\x70\x3d\x1e\xf5\x48\x2f\xe8\xe0\x97\xd3\x5a\x5a\x50\x88\x59\x1d\x77\xe3\x55\x80\x29\xcb\xca\x20\xe6\x95\x36\xed\x59\xf8\x09\x32\xcd\x97\x68\x80\x6b\xb5\x10\xb9\x37\xc1\x66\xc2\x5b\x06\x29\x4a\xbd\xee\x81\x6d\x02\xb2\xd0\x52\xea\x35\xb9\x6b\x70\x81\x06\x15\x47\x7b\xd9\xe9\x06\xd0\xd8\x06\x35\x0b\xca\x35\xda\xa5\xd3\x55\x80\xce\x5a\x2c\x45\x32\x6b\x72\x9d\x34\x4a\x93\x6b\xad\x08\x8f\x68\x46\xca\xa1\x59\x30\x8e\xc9\x9e\x9c\x0c\x57\x28\x75\x85\xc6\xf6\x0d\x66\x05\x73\x7d\xae\xcb\x24\x95\x3a\x4f\xce\x4e\x9f\x3e\x4b\x4e\x9f\xd3\x7f\xe3\x15\x85\x3e\x6e\x64\xc6\x04\x7f\xa1\xe2\xda\x9b\x98\xb7\x1a\xfe\xba\xe0\x17\xc9\xe9\x2f\xc9\xd3\xf3\xaf\x04\x0b\x15\xb3\x58\x69\x15\x57\x46\xac\x84\xc4\x1c\xb3\x7d\xf1\x9d\xc1\xf4\x96\x70\x38\xbc\x1f\xbd\x19\xdc\x0e\xaf\xa2\xfd\xac\x45\x9d\x57\xd3\xc9\x1b\x38\xfa\xbc\xdb\xf0\x85\x72\x6f\xd1\x51\x19\xc0\xcd\xf0\xe5\x68\x30\xbe\x7f\x35\x9d\x8c\xe7\xc3\xf1\xcd\x95\xd2\x4a\x50\x48\x18\x77\x62\x85\x60\x9d\xae\x2c\x58\x5d\x22\xb0\xca\xc1\x9a\x05\xb4\xd9\x5e\x8d\x02\x61\x43\x6b\xe8\x74\x81\x81\x41\x26\x81\x99\xdc\x97\xa8\x5c\x0f\xd6\xf8\xa3\x41\x38\x66\xe9\x89\xb7\xa4\x87\x6c\x74\x1a\x72\x74\xc0\xc0\x61\x59\x69\xc3\xcc\x06\x86\xe3\xf7\xc0\x72\x26\x54\x3f\x78\xf1\xe7\xd6\x74\x3a\xd7\x93\xb7\x1f\x81\x4b\x64\x2a\x16\xca\x3a\x26\x25\x24\xde\x9a\x44\x6a\xce\x64\x92\x0a\x95\x1c\x2c\x76\xa6\xef\xc6\xc0\x8b\x52\x67\xf0\xd3\xc3\x9f\xef\xec\x74\xe1\x16\x1d\x64\x58\xa1\xca\x50\x71\x81\x96\xe0\x5e\xe0\x5e\x61\x00\x93\x06\x59\xb6\x81\x82\xd9\x4b\xb0\xb6\xe8\x51\x50\x7a\x60\x15\xab\xb2\xb0\xbb\x8e\x49\x6a\xf4\x12\x15\x64\x7a\xad\x40\x28\xa7\xe1\x18\x19\x2f\x42\xe3\x00\x29\x14\x9e\x10\x66\x63\xa8\x18\x5f\xb2\x1c\xa9\x4e\x38\x5a\x4b\xe1\xa0\x4a\x6f\x2c\xa2\xa0\xd5\x50\x7a\xbc\x79\xbf\xa8\x2c\x9a\x95\xe0\x68\xe1\xb8\x01\xcb\xc9\x37\x77\x93\xdc\xa6\xca\x12\x28\x36\x15\x9a\xa5\x4f\x11\x12\x58\xee\x66\x07\x35\x72\xad\x50\x39\x1b\x44\x94\xc2\xf2\x9d\x9c\x63\xef\x84\x14\x4e\x60\x28\x7d\x9a\x05\x42\x81\xf6\x06\xc8\x47\xaa\x76\xa1\xf2\x93\x3a\x60\x8a\x76\x84\xe0\xfa\x0a\x8e\x0d\x96\x7a\x45\xbe\x78\xb5\x66\x8a\xfa\x67\x5b\xf7\xad\xe9\x74\xec\x95\x50\x4c\xca\x0d\x9d\xcc\x84\x0d\xbd\x7b\x59\xda\x9c\x94\xfc\xa1\xbd\x51\x4c\x66\xff\xbd\xf2\x0c\x20\x39\xc0\xd4\xff\x75\xc2\x2c\xa2\xec\xc6\xce\x30\x65\x2b\x6d\x5c\x1c\xd4\x03\x67\x31\x47\xe3\xa8\x0f\xb3\x10\x36\x6f\xe4\x76\x96\xc4\x95\x21\xbb\x28\x4e\x31\xd7\x65\xa9\x15\xe4\xca\x57\xf9\x19\x48\x9b\xc6\x06\x25\x12\x98\x5a\xf1\xdb\x48\x34\x16\xda\x8d\x5d\x81\x14\x69\xf3\xf7\xe9\x76\x23\xd7\x4a\x39\xc3\xf8\x12\x44\xe5\x28\x3a\x16\x44\x65\xb4\x77\x78\x06\xe8\x0a\x8a\x3f\x58\xcd\x99\x03\x4a\x53\x2c\x85\xf2\x0f\x50\x6a\xaf\x1c\x60\xda\x1c\xf0\x19\xae\x60\x49\xa5\xc0\xfc\xc2\xc6\x75\x87\x6e\x15\xa4\xcc\x16\x60\xec\x46\xf1\xe6\xd3\x0f\x3f\xc0\x82\xa6\x43\x22\x45\xba\x6d\x9a\xf5\x4f\xfa\x21\x94\x70\x7d\xc7\x4c\x8e\xae\x4f\x69\xb5\x09\xc4\x8a\x95\x08\x51\xeb\x8b\x2b\x2b\x22\x0a\x36\xb6\xe8\x7c\xd5\x6f\x92\x1d\x41\x9c\xa1\x44\x87\x3b\x35\xa6\x84\x78\xf1\x4d\x3d\xa5\x97\x4e\xc4\xde\xa2\x39\x54\xf5\xe4\xab\xc3\xe8\xf8\xe3\xc3\x4f\xbe\xbb\xf9\x1b\x9a\x42\x53\x88\x17\xf6\xdf\xe9\xf9\x56\x30\x08\x4e\xee\xf1\x49\x0a\xf6\xdf\x38\x4e\xe1\xe5\x4e\xfe\x25\x09\x29\xb3\x82\x7f\xd7\x70\xe4\x85\x86\x68\x8a\x2c\x7b\xfd\xc6\xe6\x57\x4a\x47\xf0\xdb\x6f\x87\x01\x6b\x0b\xac\x4f\xf3\x97\xfa\xe0\xa8\xa9\x82\xba\x52\x7a\xb0\x2e\x04\x2f\x42\x27\xb1\xd4\x76\x0a\x56\x55\xa8\x80\x2d\x88\x35\xac\xb1\xed\x57\xf5\x90\x68\x88\xdd\xb6\x6f\xb0\x54\xaf\x88\x61\x51\x13\x0d\xd4\x69\x5b\xc3\x9a\xdb\x7e\xad\x21\x54\x6f\x23\x25\x09\xd8\x4d\xda\x22\xc5\xa4\x9e\x65\x49\xd7\xa2\x8b\x7d\x15\xbb\x02\x63\x83\x95\xb6\xc2\x69\xb3\xa1\xc1\xa3\xb2\xad\xcc\x5d\x33\xeb\x0b\x1d\x34\x24\x01\x7d\x89\x50\x6d\x5f\x77\xad\xa2\x78\x59\xd3\x91\xa4\xbb\xeb\xb7\xf1\x5e\xbf\xa5\x41\x55\xff\xf9\xa3\x85\xdb\xb7\xb7\xb0\xc4\x4d\x58\x20\xda\x13\xb8\x88\x50\x39\x9a\xca\x08\xe5\x0e\xbe\x1f\x58\x17\x83\xaf\x32\xe6\xb0\x9e\x13\xe2\x51\x60\x9b\x26\xd9\xe9\xc2\x78\x32\x1f\x5e\x02\x0d\xec\x17\x34\x40\xf4\x62\x21\xb8\x08\x1d\xd1\xfa\x8a\x9a\x4f\x4d\x6d\xf7\x98\x3e\xf7\xc6\xa0\x72\x72\x43\x44\x96\xd2\x50\x09\x6a\xc4\xe0\xa8\x1d\xee\xf5\xca\x6f\xc4\xc4\x31\xbb\xb4\x49\x68\x00\x5f\x45\xa3\x9e\xc2\x93\xeb\xd7\xc3\xe9\xfd\xfb\xe1\x74\x36\x9a\x8c\xaf\xa2\x60\x57\xff\x49\x14\xc2\xdd\x10\xbc\xed\x04\x47\xb5\xea\x05\x16\xf0\x88\x02\xf4\xb7\x14\x23\x50\x05\xa7\x81\x01\x71\x98\x4f\x68\x34\xac\x98\xf4\x04\x0b\x2b\x64\x20\x71\x0d\xa9\xac\xd9\x05\x2c\x8c\x2e\x43\xef\x5d\xe2\x86\x46\x65\xf4\xa1\x5e\xb8\x6c\x3f\x82\xf6\xae\xf2\x0e\x6c\xa1\xbd\xcc\x82\xf6\x94\x40\x67\x08\x64\xc7\xd6\x65\xda\xbb\x96\x9c\x10\xdb\x30\x25\xcd\x97\x93\x28\x78\x37\x78\x3b\xbf\x7f\x3d\xfc\x78\x7f\x33\x19\xcf\xef\x3f\x0c\xa6\xe3\xfb\xc9\xf8\xfe\x66\x30\xbe\x1d\x4e\x27\xef\x66\xf7\xef\x66\x81\x43\x2d\x98\xb4\x18\xd5\xb3\x81\x3a\x7c\xbc\xb0\xb3\x3b\x88\x76\xf0\x5d\x2b\xa9\x59\xb6\x0f\xe1\x1a\xba\x47\xc7\xfd\xba\xbe\xb4\x6d\x1b\xfe\xaf\x4d\x19\x1e\x8d\x6e\xa2\x93\x24\xaf\xf2\x08\xfe\xb9\x75\x85\x70\x13\xef\x0a\xb6\xfd\xbc\x07\x2f\x38\x1d\xbe\x7c\x75\x7d\x73\x71\xb1\xb7\x2b\xcb\x62\xda\xb9\x03\xdb\xb6\x95\x03\x44\x19\xa6\xf0\xf7\x0d\x85\xa3\x63\x69\xd3\xfb\x76\x68\xc5\xdc\x9e\x80\x0d\xc3\x24\xda\x19\x72\x38\x37\xa3\x6d\xdd\x5e\x1d\x7d\x3e\x44\xd1\x97\x68\xbf\xb5\x5c\x8f\x47\x90\x0a\xc5\x0c\x11\x0a\xa7\x21\xd1\x95\x4b\xb8\x12\x44\xcc\x88\x45\x4c\x6e\x26\xc7\x29\x2a\x57\x20\xca\x0c\xcd\xc9\x25\xd5\x0c\xac\x8b\x0d\x24\xb0\x2e\x98\x83\x02\x0d\x86\x6c\x5e\x8f\x47\x3b\xa0\x9e\xf6\x5f\xf4\x4f\xa3\xed\xf7\x40\x79\xdf\x4d\xef\xae\xb6\x69\xb3\x4e\x1b\x96\x63\x3f\xd7\x3a\x97\xc8\x2a\x61\x43\x40\x76\x45\xd2\x46\x22\x51\xe8\xd6\xda\x2c\xe3\x4a\xfa\x5c\x28\x9b\xd4\x50\xc0\x07\x2a\x46\x18\x4c\xaf\x7f\xbf\x3a\x3a\xce\xaa\x65\x0e\x71\x1c\x92\x14\x33\xc3\x0b\xe1\x90\x3b\x6f\xf0\x64\xaf\x01\xd7\x27\xc8\x9c\xf9\x60\xfa\x72\x70\x77\x77\x15\x71\x25\x5a\xb9\xf1\xd1\x67\x12\xf6\x25\x5e\x1d\x7d\xde\x73\xe5\x4b\xdf\xe5\x9f\xa2\x6f\x4a\x09\xfe\xd4\x9b\x5b\xff\xbe\xd4\x7f\x36\xf2\xbf\xec\xa7\x27\x40\x97\x90\x1b\xc7\x06\x9d\xd9\xc0\x73\x88\xe3\xa6\x7a\x12\x57\x56\x14\x74\xd2\x05\x8d\x48\x92\xb6\x77\xde\x16\xec\xec\xf9\x0b\xeb\xcb\xc3\xcd\xdb\xf5\x72\x99\x09\x03\x71\x75\x90\xc0\xdd\xb2\x63\x06\xe2\xeb\xc3\xc5\xf8\xe1\xd3\xe2\x3b\xd2\x68\xc8\x99\xc3\x45\x02\x8d\x43\x9a\x2e\x0d\x57\xa2\xfe\x06\x22\x54\xb7\x50\x2d\xa7\x3d\x16\x0e\xd6\x42\x4a\xe0\x05\xf2\xe5\xf6\xbe\xbc\xe5\x78\xd4\xa4\x4e\xfe\x63\xf7\x44\xba\xb3\xec\x44\x6f\x67\x46\x6b\x21\x3e\x08\x67\x69\xd4\xcd\x46\xb7\xd3\xf9\x9b\xd1\xf8\xa7\xf3\xba\x41\xce\x46\xb7\xf3\xe1\xf4\x0d\x1c\xd7\x03\xd5\x60\x8c\x0f\xc8\x3d\x75\x73\xe1\xf6\xcd\x4b\x7d\xfe\x49\x48\xc9\xf6\xd9\xad\x2d\xf4\xfa\x3e\xf5\x79\x9f\xe7\xe2\x7f\x44\x76\xf5\x94\xee\x8b\xcf\x7f\xee\xcc\xe6\x93\xb7\xb3\xd1\xed\x78\x70\xb7\xa7\x8f\xa2\xb6\x36\xac\xda\xda\x14\x5e\x66\x88\xae\x87\x27\x04\x26\x01\x95\x33\x9b\x4a\x0b\xba\xaa\xd1\xed\xba\x5a\xe6\x09\xdd\xfa\xeb\xab\x42\xa1\xd7\xdb\x0b\x5e\x78\x0b\xa8\x27\xb8\xe0\x61\x24\x85\x95\x3f\xbc\x75\x20\xd1\x59\xf0\x96\x3a\x3d\xf8\xaa\x66\x00\x44\xb2\x73\x0b\x29\x2e\xb4\xa9\x53\x20\x94\xa7\xae\xae\xc3\x7c\x6a\x2c\x22\x03\x0b\x21\x11\x2a\x83\x81\x1b\x86\x39\xc1\xdc\xd6\x62\x61\xe1\xed\xe8\xe6\x69\xa7\xbb\x35\x68\x8d\x20\x71\x85\x54\xbf\xc1\x84\x9d\xe1\xcd\x13\x46\x7d\x3b\xfc\x5f\x88\x76\xce\x25\xbb\x5f\xa3\x1e\x44\x8f\x6e\x80\x11\xfc\x7f\xa7\x0b\x1f\x30\x70\x9b\x1d\xc2\x34\x0d\x13\x52\xde\x5e\xb2\x08\x4b\x2b\x66\x84\x0e\xae\xb6\x17\xae\x76\x8a\x53\xf3\x90\xe8\x7a\x80\x8e\xf7\x4f\xb6\xc3\xbc\x8d\xdf\x13\xad\xe4\xe6\x49\x7b\x03\x0b\xa3\x31\x3c\x70\xf4\x82\xd8\x9d\x7d\x61\xee\xaf\xd0\x18\x91\x65\x44\xaf\x1c\xa9\x76\xa2\xc4\xce\x70\x3c\x9f\x7e\x7c\x3b\x19\x8d\xe7\xe4\xdc\x23\x1f\x1e\x39\x68\xe9\x1b\xd1\x47\xf2\x8d\x6a\xa7\xc0\xb6\x48\x72\xc3\xaa\x02\x4a\xca\x5b\x8a\xc0\x60\xa5\xa5\xa7\x7c\x69\x60\x2b\x2d\xb2\xa0\x5c\xb2\x0d\xe5\xa9\xf9\x75\xeb\x0b\x5d\xcb\x9a\x87\x1f\xc9\xc2\x79\xce\xe8\x0e\xc8\x0b\xa6\x72\x4a\xdd\x56\x5a\x00\x1a\x83\x9b\xa0\x32\xbc\x14\x92\xc2\x4e\x17\x34\xe7\xde\xb4\xa8\xc8\x70\x21\xc2\xa4\x17\xae\x79\xef\xba\xfc\x2e\x31\x44\xd2\x80\xc9\xf6\xc1\xa7\x86\x29\x9a\xa4\x5b\xab\xec\xbc\x9f\xdc\xbd\x7b\x33\x0c\xa1\x59\x31\x13\x28\x72\x7d\xbc\x09\xc1\xb7\x86\x09\x11\x95\x60\x6a\x9b\xf4\x37\x83\x6b\x1a\xaa\xe1\x31\x8e\x59\x2b\x72\x45\x89\xda\xab\xc9\x5c\xb8\xc2\xa7\x75\x29\x1e\x10\xf0\x2c\x11\xd6\x7a\xb4\xc9\xf9\xf9\xcf\xcf\xba\xe1\x77\xba\xf9\xa1\x72\xf1\xd9\xc5\xc5\xc5\xc5\xd9\xf9\xf3\xe7\x7f\x53\xce\xf9\xf9\x2f\x67\xcf\x2f\x9e\x5d\x9c\x77\xfe\x15\x00\x00\xff\xff\x70\x17\xf1\x17\x00\x16\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseCleanInstall = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\x51\x6f\xdb\x36\x14\x85\xdf\xf9\x2b\xce\xac\x62\xd8\x86\x48\x4a\xf3\x32\x60\xc5\x86\x79\x49\x86\x19\x2d\x6c\x20\x76\x57\x14\xdb\x1e\xae\xa8\x2b\xe9\x22\x12\xc9\x91\x57\x75\xfc\xef\x07\x2a\x71\x50\x63\x7e\x32\x75\x0e\x79\x3e\x1e\xde\xe2\x9b\xba\x11\x57\xa7\xc1\x98\x02\xb7\x3e\x9c\xa2\xf4\x83\xe2\xe6\xfa\xed\x8f\x38\x0c\x8c\xf7\x73\xc3\xd1\xb1\x72\xc2\x7a\xd6\xc1\xc7\x54\x99\xc2\x14\xf8\x20\x96\x5d\xe2\x16\xb3\x6b\x39\x42\x07\xc6\x3a\x90\x1d\xf8\xac\x5c\xe1\x4f\x8e\x49\xbc\xc3\x4d\x75\x8d\xef\xb2\x61\xf5\x22\xad\xbe\x7f\x67\x0a\x9c\xfc\x8c\x89\x4e\x70\x5e\x31\x27\x86\x0e\x92\xd0\xc9\xc8\xe0\x27\xcb\x41\x21\x0e\xd6\x4f\x61\x14\x72\x96\x71\x14\x1d\x96\x98\x97\x43\x2a\x53\xe0\xf3\xcb\x11\xbe\x51\x12\x07\x82\xf5\xe1\x04\xdf\x7d\xed\x03\xe9\x02\x9c\x7f\x83\x6a\xf8\xa9\xae\x8f\xc7\x63\x45\x0b\x6c\xe5\x63\x5f\x8f\xcf\xc6\x54\x7f\xd8\xdc\xde\x6f\xf7\xf7\xe5\x4d\x75\xbd\x6c\xf9\xe8\x46\x4e\x09\x91\xff\x9d\x25\x72\x8b\xe6\x04\x0a\x61\x14\x4b\xcd\xc8\x18\xe9\x08\x1f\x41\x7d\x64\x6e\xa1\x3e\xf3\x1e\xa3\xa8\xb8\xfe\x0a\xc9\x77\x7a\xa4\xc8\xa6\x40\x2b\x49\xa3\x34\xb3\x5e\x94\x75\xa6\x93\x74\x61\xf0\x0e\xe4\xb0\x5a\xef\xb1\xd9\xaf\xf0\xdb\x7a\xbf\xd9\x5f\x99\x02\x9f\x36\x87\x3f\x76\x1f\x0f\xf8\xb4\x7e\x78\x58\x6f\x0f\x9b\xfb\x3d\x76\x0f\xb8\xdd\x6d\xef\x36\x87\xcd\x6e\xbb\xc7\xee\x77\xac\xb7\x9f\xf1\x7e\xb3\xbd\xbb\x02\x8b\x0e\x1c\xc1\x4f\x21\x66\x7e\x1f\x21\xb9\x46\x6e\x73\x67\x7b\xe6\x0b\x80\xce\x3f\x03\xa5\xc0\x56\x3a\xb1\x18\xc9\xf5\x33\xf5\x8c\xde\x7f\xe1\xe8\xc4\xf5\x08\x1c\x27\x49\xf9\x31\x13\xc8\xb5\xa6\xc0\x28\x93\x28\xe9\xf2\xe5\x7f\x97\xaa\xf2\x2c\xad\x91\x6c\x94\xa0\x60\x67\x29\xa4\x79\xa4\xdc\xcc\xf2\x46\xd3\xe4\x1d\xee\xbc\x7d\xe4\x28\x53\x4e\x0a\xa4\xca\xd1\x2d\x2c\xe2\x92\xd2\x38\x2e\xb1\x64\x1f\xa9\xe7\x64\x8a\x9c\x9a\x13\x1c\xec\xc8\xb4\x30\xcd\x61\x89\x9c\x9d\x63\xcb\x29\x51\x3c\x9d\xb7\x82\xa2\x4a\x47\x56\xf3\xa8\x82\xab\xbe\x7a\xde\x55\x9e\x75\x09\x9a\x5f\x30\x81\x9b\x97\x3f\xd6\x3b\xa7\x91\xec\xa3\x31\x89\x15\xa5\x07\xc7\xc8\x4f\xa2\xc6\x48\x87\xbf\xf0\xa6\xc0\xcf\xb8\xc6\x3f\xef\x16\x08\x03\xb0\x1d\x3c\x7e\xf9\xf6\x06\xab\xad\x7f\xe5\x3c\x77\xc8\xed\x2a\x5b\x9e\x44\xf1\xd6\x74\x62\x0c\x05\x2d\x7b\x56\xcc\xa1\x25\xe5\xd7\xe5\x99\xa7\x3c\xa1\x2c\x9d\x3f\xf3\x95\x91\x73\x47\xec\xda\x84\x37\xbf\xbe\xba\x97\x3b\xa0\x3c\x99\x38\xa1\x8c\x1d\xfe\x36\x00\xea\x2f\x14\x6b\x9b\x47\xb9\x6e\xb9\xb1\xde\x75\xf5\x0f\x5f\x29\xa3\x34\x35\x05\xad\x47\x49\x9a\x2e\x15\xdf\xbf\xae\x75\x0a\x17\xda\xb2\x36\xff\x05\x00\x00\xff\xff\xdd\xdb\xd0\x5d\x1a\x04\x00\x00")

func imagesBaseCleanInstallBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseCleanInstall,
		"images/base/clean-install",
	)
}

func imagesBaseCleanInstall() (*asset, error) {
	bytes, err := imagesBaseCleanInstallBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/clean-install", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypointMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\x61\x73\xdb\xb8\x11\xfd\x2c\xfc\x8a\x3d\x76\x6e\x2a\xe5\x68\xd2\x92\xcf\x8e\x4f\x4d\x3e\xa8\xb6\x92\x68\xe2\xca\x19\x4b\xa9\x9b\x49\x3d\x09\x08\x2e\x49\x8c\x41\x80\x05\x40\xc9\x6c\x27\xff\xbd\xb3\x20\xed\xc8\xc9\x7d\xb0\x2c\x90\xc0\xdb\xb7\xef\x3d\xac\xd2\x17\xec\xc2\x34\x9d\x95\x65\xe5\x61\x76\x3c\x3d\x87\x6d\x85\xf0\xbe\xcd\xd0\x6a\xf4\xe8\x60\xd1\xfa\xca\x58\x97\x30\x76\x25\x05\x6a\x87\x39\xb4\x3a\x47\x0b\xbe\x42\x58\x34\x5c\x54\x08\xc3\x9b\x18\xfe\x89\xd6\x49\xa3\x61\x96\x1c\xc3\x98\x36\x44\xc3\xab\x68\xf2\x37\xd6\x99\x16\x6a\xde\x81\x36\x1e\x5a\x87\xe0\x2b\xe9\xa0\x90\x0a\x01\x1f\x04\x36\x1e\xa4\x06\x61\xea\x46\x49\xae\x05\xc2\x5e\xfa\x2a\x14\x19\x20\x12\xf6\x69\x00\x30\x99\xe7\x52\x03\x07\x61\x9a\x0e\x4c\x71\xb8\x0b\xb8\x67\x0c\x00\xa0\xf2\xbe\x99\xa7\xe9\x7e\xbf\x4f\x78\x60\x99\x18\x5b\xa6\xaa\xdf\xe5\xd2\xab\xd5\xc5\x72\xbd\x59\x1e\xcd\x92\x63\xc6\x3e\x6a\x85\xce\x81\xc5\xff\xb4\xd2\x62\x0e\x59\x07\xbc\x69\x94\x14\x3c\x53\x08\x8a\xef\xc1\x58\xe0\xa5\x45\xcc\xc1\x1b\xe2\xb9\xb7\xd2\x4b\x5d\xc6\xe0\x4c\xe1\xf7\xdc\x22\xcb\xa5\xf3\x56\x66\xad\x7f\x26\xd0\x23\x2b\xe9\xe0\x70\x83\xd1\xc0\x35\x44\x8b\x0d\xac\x36\x11\xfc\x7d\xb1\x59\x6d\x62\x76\xbb\xda\xbe\xbb\xfe\xb8\x85\xdb\xc5\xcd\xcd\x62\xbd\x5d\x2d\x37\x70\x7d\x03\x17\xd7\xeb\xcb\xd5\x76\x75\xbd\xde\xc0\xf5\x1b\x58\xac\x3f\xc1\xfb\xd5\xfa\x32\x06\x94\xbe\x42\x0b\xf8\xd0\x58\xe2\x6e\x2c\x48\x92\x0e\xf3\x84\x6d\x10\x9f\x15\x2f\x4c\x4f\xc6\x35\x28\x64\x21\x05\x28\xae\xcb\x96\x97\x08\xa5\xd9\xa1\xd5\x52\x97\xd0\xa0\xad\xa5\x23\xf3\x1c\x70\x9d\x33\x25\x6b\xe9\xb9\x0f\xeb\x9f\xda\x49\xd8\x8b\x94\xb1\xf4\x05\xdb\x92\x85\x54\x17\x6b\xd4\xde\x81\x69\x89\x06\x21\xa3\xf6\xb6\x6b\x8c\xd4\x3e\x81\x95\x9f\xb3\x23\xd8\x73\xe9\x5d\xe0\xb2\x59\xbd\xfd\xb8\xb9\x99\xb2\x23\xc2\xd4\x80\x0f\x28\x1c\x8c\xb9\x2d\x77\x9f\xa7\x77\x31\xf4\x5f\xe6\x77\x31\xa0\xde\x7d\x9e\xdf\x4d\x58\x5f\x87\x2b\x65\xf6\x0e\x5a\x47\x1e\x34\x68\x0b\x63\x6b\x30\x41\x05\x2e\x7a\xa6\x52\x07\x9a\x91\x36\x39\x46\x20\x8c\xa6\xa0\xa0\x85\x9d\xe4\xf0\x35\x37\xe2\x3e\x28\x86\xe2\x2b\xfb\x92\x61\x61\x2c\x7e\x81\x3d\x42\xc5\x77\x48\x10\x2d\x57\xaa\x83\x28\x33\xc6\x63\x1e\x05\x24\xa9\xa5\x27\x3d\x00\x77\x68\x3b\x5f\x91\x54\xa8\x28\x66\xca\xe8\xb2\xcf\xa8\xf4\x09\x63\xb7\x08\x82\xeb\xbe\x21\x87\x3a\x7f\x6c\x92\xb8\x86\xa0\x37\xd6\x08\x32\x8a\xd6\x56\x96\x25\x5a\x70\x9e\x5b\x4a\x51\xcf\xb9\x27\x10\xb1\xef\xca\xc1\x9e\xd0\xf6\x08\xdc\x22\xe4\x46\x23\x34\x96\x58\xd7\x74\x86\xeb\x8e\x30\x77\x92\x3c\xa3\x07\xe6\xb0\xf7\x84\xb1\xf5\xf5\x76\x39\xef\x6b\x1f\x9a\x84\x39\x70\x07\x1c\x9c\xd4\xa5\xa2\x04\x4c\x93\x7f\x85\x5b\x18\x43\xeb\x7a\x1c\xd5\xf5\x71\xf1\xb9\x92\x59\xd2\x8b\x5f\xf3\x7b\x74\x20\x3d\x20\x77\x92\xd2\x60\x20\x6b\xa5\xca\xa1\x31\xd6\xf3\x4c\x75\x71\x90\xa9\xb7\x89\x38\x6b\xba\x2c\xe4\xf6\xbe\xe2\x9e\x0e\xe6\x06\xdd\x10\x9c\x14\x96\xdf\x9b\x3c\x88\x0f\x07\x57\xd3\xf1\xc1\xa9\x1f\x93\x04\x9e\xa0\x7e\xce\x51\x9a\x42\xef\x66\xf0\x36\xf4\xe0\x92\x85\x2d\x1d\xa5\x88\x35\x5c\xdc\x13\x4e\xcd\xa5\x66\x4c\xd6\x44\x18\xc6\x6c\x14\x19\x17\x85\xcf\xd4\xc9\x52\x93\xf2\xa3\xc8\x75\x4e\x70\xa5\x22\xc6\x46\x91\x32\x65\xc4\x26\x81\x6d\x87\xae\x17\xd2\x55\xa6\x55\x39\x64\xfd\xfd\x12\x50\x73\x61\x4d\x0c\x59\xeb\x49\x7e\x25\x75\xfb\x40\x19\x1c\xf8\x77\xa6\xfd\xab\x25\x89\x83\xc7\x06\x4a\xf4\x3d\x0c\xd7\x5d\x65\xf6\x84\x3c\x4c\xa9\x9a\xeb\x97\xc3\x7c\xd2\xed\x03\x2d\x8f\x1a\x5e\xa2\x0b\x2f\x06\x7e\xc9\xcb\xa4\xf2\xb5\x7a\x3c\xe5\xe6\x69\x5a\x4a\x5f\xb5\x59\x22\x4c\x9d\xd6\x26\xeb\xfa\x8f\x4c\x99\x2c\x3d\x3d\x9b\xe5\xc5\xb9\x98\xe5\x67\xc5\xef\xe7\x67\xc7\x53\x71\x9e\x4f\xf3\xe2\xe5\xec\xf4\xec\xe4\xfc\x8f\xd3\xb3\x3f\xf2\xd9\xa9\x38\xce\x8a\x69\xda\xdc\x97\x03\xfe\xf0\xef\x4b\xa0\x90\x94\xe6\x2f\x57\xd3\x63\x26\x8c\x76\x1e\x9c\x2c\xad\xaf\xa5\x86\xd7\x70\xf2\x3b\x63\x45\xab\x45\x90\x73\x3c\x81\xff\xb1\x51\x9a\x52\x2e\x77\xa8\x3d\xfc\xd7\xd4\x99\xc4\xc7\xac\xa3\xa3\x94\xd1\x28\xa7\x69\xae\x14\xe9\xf6\x61\x75\x39\x0d\xe6\x71\xd8\x57\x52\x61\x38\xfe\xd8\x4f\x5f\x3a\x97\x98\x68\xf4\xd4\x7b\x3a\x4b\xc9\xee\x46\xe6\x6c\x34\xa8\xb0\x2a\xb5\xb1\x38\x1e\x9c\x4a\x36\xab\xb7\x17\xef\xae\x2e\x27\x2c\x00\x95\x96\x67\xfd\x2d\xb0\xc8\x55\x74\x98\x1d\x61\xea\x9a\x12\x1a\xfe\x6c\xe9\xa0\xb0\xa6\x0e\x03\x8b\x56\x6c\x24\x0b\x50\xa8\xc7\x43\x72\x26\xf0\x0a\x66\xd4\xdc\x48\x99\x32\x79\xc3\x3d\x57\xe3\x68\x6d\x3c\xa0\x36\x6d\x59\xd1\x99\xb6\xcf\xac\x37\x07\x55\x7e\x89\x26\x6c\xf4\x8d\x8d\x44\x9d\xf7\x73\x0c\xe6\xaf\xbf\x87\xf1\x2e\x7e\x16\xcc\xc0\x98\xda\x3b\x0c\x33\x8c\x0d\x8d\x28\x19\x02\xb5\x59\xbd\xbd\xd9\xfe\x63\xb5\xfe\xed\x84\xca\xd4\xdc\x8b\x0a\x5c\xe7\x3c\xd6\xf9\x84\x8d\x04\x81\xd3\xbd\x1c\x8b\x8a\x6b\x82\xde\x04\x89\x62\x98\x4e\x9e\xe4\x5a\x1b\x2f\x8b\x6e\x2c\x62\x38\x50\x8c\x0a\x1d\x3c\x08\x3b\xc7\x8f\x26\xff\x76\x32\x99\xb0\xd0\xf6\x07\x2b\xb5\x57\x7a\x1c\xdd\xf2\xf0\x6b\xf7\x8c\x67\x92\x24\x51\x5f\x86\x68\xbc\x3a\x12\x41\x42\x5a\xfe\xf2\xfa\xc7\x5a\x4f\x42\x06\xc4\x62\x1c\x2d\x1f\x7a\x40\x5e\x78\x9a\x83\x81\xc0\x1c\x7e\xdd\xd1\xd9\xe1\x4c\x14\xd3\xf3\x09\x1b\x8d\x2c\xfa\xd6\x6a\xd2\x35\x28\xf6\xf4\x9b\xd1\x8f\xd6\x3f\xf1\x3a\x86\x7b\xc4\xe6\x71\xb0\xa2\xde\xb1\x67\xc5\x6f\x50\xa0\xdc\xe1\xd3\x88\x8e\x9f\xc6\x86\x37\x81\xc4\xaf\xbb\x7f\xeb\x28\x86\x27\x13\xa9\xcd\xa1\xa1\xe5\x03\x8a\xf1\xd3\x8b\xe0\xe7\x52\xef\xa4\x35\x7a\x3c\x99\xb0\x6f\xec\xff\x01\x00\x00\xff\xff\x39\x8f\xbf\x84\x4f\x09\x00\x00")

func imagesBaseEntrypointMainGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypointMainGo,
		"images/base/entrypoint/main.go",
	)
}

func imagesBaseEntrypointMainGo() (*asset, error) {
	bytes, err := imagesBaseEntrypointMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint/main.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":         imagesBaseDockerfile,
	"images/base/clean-install":      imagesBaseCleanInstall,
	"images/base/entrypoint/main.go": imagesBaseEntrypointMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile":    {imagesBaseDockerfile, map[string]*bintree{}},
			"clean-install": {imagesBaseCleanInstall, map[string]*bintree{}},
			"entrypoint": {nil, map[string]*bintree{
				"main.go": {imagesBaseEntrypointMainGo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
