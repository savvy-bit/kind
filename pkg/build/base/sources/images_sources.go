// Code generated by go-bindata.
// sources:
// ../../../../images/base/Dockerfile
// ../../../../images/base/entrypoint/main.go
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7d\x6f\xdb\x38\x93\xff\xdf\x9f\x62\x20\x07\x6d\xd2\xc7\x92\xd2\xa4\xed\xe6\xc9\x22\x7b\xe7\x26\x6e\xd6\x68\x62\x17\xb6\xdb\xa2\xd8\x5b\x04\x14\x35\x96\xb8\xa6\x48\x1d\x49\xd9\x75\x7b\xdd\xcf\x7e\x18\xea\xc5\x4e\x9a\xde\x2d\x6e\xef\x29\x0a\xd4\x15\xc9\xe1\xbc\xff\x7e\xc3\x3e\x5c\xea\x72\x6b\x44\x96\x3b\x38\x39\x7e\x7e\x06\x8b\x1c\xe1\x6d\x95\xa0\x51\xe8\xd0\xc2\xb0\x72\xb9\x36\x36\xea\xf5\x7b\x7d\xb8\x11\x1c\x95\xc5\x14\x2a\x95\xa2\x01\x97\x23\x0c\x4b\xc6\x73\x6c\x57\x06\xf0\x01\x8d\x15\x5a\xc1\x49\x74\x0c\x87\xb4\x21\x68\x96\x82\xa3\x9f\x7b\x7d\xd8\xea\x0a\x0a\xb6\x05\xa5\x1d\x54\x16\xc1\xe5\xc2\xc2\x52\x48\x04\xfc\xcc\xb1\x74\x20\x14\x70\x5d\x94\x52\x30\xc5\x11\x36\xc2\xe5\xfe\x9a\x46\x48\xd4\xeb\xc3\xa7\x46\x84\x4e\x1c\x13\x0a\x18\x70\x5d\x6e\x41\x2f\xf7\xf7\x01\x73\x5e\x61\xfa\x93\x3b\x57\x9e\xc7\xf1\x66\xb3\x89\x98\x57\x36\xd2\x26\x8b\x65\xbd\xd1\xc6\x37\xe3\xcb\xd1\x64\x3e\x0a\x4f\xa2\x63\x7f\xe4\xbd\x92\x68\x2d\x18\xfc\xcf\x4a\x18\x4c\x21\xd9\x02\x2b\x4b\x29\x38\x4b\x24\x82\x64\x1b\xd0\x06\x58\x66\x10\x53\x70\x9a\xf4\xdd\x18\xe1\x84\xca\x06\x60\xf5\xd2\x6d\x98\xc1\x5e\x1f\x52\x61\x9d\x11\x49\xe5\xee\x39\xab\xd5\x4e\xd8\x7b\x1b\xb4\x02\xa6\x20\x18\xce\x61\x3c\x0f\xe0\xf5\x70\x3e\x9e\x0f\x7a\x7d\xf8\x38\x5e\xfc\x3a\x7d\xbf\x80\x8f\xc3\xd9\x6c\x38\x59\x8c\x47\x73\x98\xce\xe0\x72\x3a\xb9\x1a\x2f\xc6\xd3\xc9\x1c\xa6\x6f\x60\x38\xf9\x04\x6f\xc7\x93\xab\x01\xa0\x70\x39\x1a\xc0\xcf\xa5\x21\xfd\xb5\x01\x41\x6e\xc4\x94\x7c\x36\x47\xbc\xa7\xc0\x52\xd7\x0a\xd9\x12\xb9\x58\x0a\x0e\x92\xa9\xac\x62\x19\x42\xa6\xd7\x68\x94\x50\x19\x94\x68\x0a\x61\x29\x98\x16\x98\x4a\x7b\x7d\x90\xa2\x10\x8e\x39\xff\xe5\x3b\xa3\xa2\x5e\xaf\x0f\x2b\xa1\x52\xe0\xb2\xb2\x0e\x0d\x24\x8c\x4c\x2d\x58\x86\x03\x48\x2a\x21\x1d\x19\xba\x4b\xad\xa7\x16\x52\x4c\x04\x53\x21\x6d\xec\xf5\x61\x93\x0b\x9e\x93\x6f\x12\x66\x05\x67\x52\x6e\x81\xc1\x1a\xcd\x16\xc8\x55\x65\x89\x29\xa4\x7a\xa3\x9a\x53\xb5\x64\x38\xfc\xf3\xc5\xe9\xed\xeb\xa3\x5e\x1f\x5c\xce\x1c\xd8\x5c\x94\xb6\x4e\x1b\x06\xb6\x60\x52\x42\xe5\x84\x14\x6e\x0b\x4f\xb9\x44\xa6\x42\xa1\xac\x63\x52\x3e\xdd\x5d\x47\xb2\x52\x64\x12\x52\xa3\x4b\x0a\xe8\x52\x9b\x5e\x1f\x58\xe9\xc2\x0c\x1d\x54\x65\xca\x1c\xc2\x93\x27\xdd\x97\x46\x04\x1c\xfc\x3b\xf4\xfa\x60\x11\x7d\x8e\xd9\xf3\x38\xce\x84\xcb\xab\x24\xe2\xba\x88\x57\x9d\xa1\xfb\x3f\x9d\x41\x8c\x0b\x46\xfe\x89\xc9\x27\x69\x7c\xcf\x07\xbd\x3e\x2c\x74\x5d\x14\x1b\x04\x96\xa6\x60\xb7\xd6\x61\x91\x0e\xe0\x72\x32\x1e\x50\x1c\x40\xfb\x38\x3b\xad\xa5\x05\x85\x98\xd6\x79\x68\xaa\xda\xb7\x2c\x2d\xbc\x98\x37\xda\xb4\x67\xe1\x1f\x90\x6a\xbe\x42\x03\x5c\xab\xa5\xc8\x2a\xe3\x63\x48\xf5\x97\x42\x82\x52\x6f\x06\xde\x08\x0a\xe6\x52\x4b\xa9\x37\x14\x7e\x83\x4b\x34\xa8\x38\xda\xf3\x5e\xbf\x33\x90\xaa\x68\x49\xb9\x8f\x76\xe5\x74\xe9\x4b\x69\x23\x56\x22\x9e\x37\xb9\x1f\x37\x97\xc6\x97\x5a\x51\x7d\xa2\x19\x2b\x87\x66\xc9\x38\xc6\x7b\x72\x52\x5c\xa3\xd4\x25\x1a\x1b\x19\x4c\x73\xe6\xbc\xcf\x12\xa9\xb3\xf8\xe4\xf8\xf9\x8b\xf8\xf8\x25\xfd\x35\x95\xa2\x54\x0c\x1b\x99\x21\xc5\x55\xa8\xb0\xb6\x26\xe4\xed\x0d\x7f\x5d\xf0\xab\xf8\xf8\x9f\xf1\xf3\xd3\xef\x04\x0b\x15\xb2\x50\x69\x15\x96\x46\xac\x85\xc4\x0c\xd3\x7d\xf1\x14\x96\xe9\xd5\xf4\x30\x41\xe5\x72\x44\x99\xa2\x39\x3a\xa7\x52\x93\xda\x20\xd8\xaa\x2c\xb5\xa1\x16\xd0\xc4\x86\x19\x9e\xa3\x1d\xc0\x78\xd4\xae\xd5\xad\x72\x76\xf9\x2b\x30\x93\x45\x4d\x78\x94\xde\xd4\xa1\x16\x16\xac\x13\x52\x52\x26\x0e\x67\xd7\x60\x35\x45\x9f\x33\x05\x06\xa9\x49\x0a\x3a\x6f\x74\x95\xe5\xba\xaa\x45\xf9\xd4\xa1\x92\x11\xce\x7f\x23\x7b\x85\xf5\x2a\xd0\x66\xed\x37\x75\x06\x44\x3d\x92\x4a\xd7\x5f\x04\xac\x48\x5f\xbd\x08\xfc\x87\xd7\xc3\xf9\xe8\x6e\x7c\x3b\xbc\x1e\xdd\x7d\x18\xcd\xe6\xe3\xe9\xe4\x22\x38\x8e\x4e\xa3\x93\x87\xcb\x17\xc1\xea\xcc\x46\x19\x37\x91\xd0\xfb\xf9\x1a\x1e\x7c\x25\xa1\xdf\xce\x0f\xbe\x7e\x2f\xeb\x5b\xd0\x7b\x33\x9b\xde\xc2\xfe\xda\x37\xf2\xe4\x64\xba\x18\x9d\xd7\xce\x28\x2a\xeb\x20\x41\x48\x71\x29\x14\xa6\xc0\x32\xdf\xd1\x97\xd4\x3d\xe8\xf0\x7e\x5c\x35\xb7\x51\x1d\x78\x1f\x51\x54\x99\x50\x18\x77\x59\x5a\x57\x13\x9a\xb8\x6f\xb9\x2e\xf1\x7b\x8b\x7d\xa5\x3a\xef\xa2\xab\xd1\xeb\xf1\x70\x72\xf7\x66\x36\x9d\x2c\x46\x93\xab\x0b\xa5\x95\xa0\x24\x65\xdc\x89\x35\x82\x75\xba\xb4\x60\x75\x81\x54\xf1\xb0\x61\xbe\x1f\xda\x41\x17\x2c\x02\x2f\x6a\x10\x60\xa8\x6b\x30\x93\x55\x05\x2a\x37\x80\x0d\x3e\x35\x08\x87\x2c\x39\xaa\x2c\xdd\x43\x3a\x38\x0d\xd4\x32\x18\x38\x2c\x4a\x6d\x98\xd9\xc2\x68\xf2\xa1\xb6\xb4\x8e\xcb\xff\xac\x4d\xaf\x0f\xd7\xe8\x20\xc5\x12\x55\x8a\x8a\x0b\xb4\x94\x3e\xc2\x58\xd7\xb5\x08\x67\xd0\xf1\x3c\x4c\x18\x5f\x51\xb2\xd9\xbd\x04\xa2\xbb\x15\x6e\x70\xd7\x0c\xea\xb6\xd7\xe4\x25\xc9\xb2\x95\x47\x0c\x52\x78\x55\xd8\x8c\x1a\xe0\x1f\xba\x32\x8a\xf9\x0c\x23\x3a\xb0\x6b\xe4\xc0\xa4\x41\x96\x6e\x21\x67\xf6\x1c\xac\xcd\x07\xe4\xa2\x01\x58\xc5\xca\x7a\x77\xed\xa1\xc4\xe8\x15\xaa\xba\x5d\x0b\xe5\x34\x1c\x22\xe3\xb9\x07\x3a\x90\x42\xe1\x11\xf5\x94\x10\x4a\xc6\x57\x2c\x43\xea\x63\x1c\xad\x25\xe7\x10\x32\x35\xfd\x95\x34\xaa\x23\xfe\x70\xf3\x7e\xd3\xb3\x68\xd6\x82\xa3\x85\xc3\xc6\xc2\xa3\x47\x77\x93\xdc\xa6\x0b\xc6\x90\x6f\x4b\x34\xd4\x95\x21\x86\x5d\x73\xf6\xc4\x43\x2b\x54\xde\x2d\x21\x14\xc2\xf2\x9d\x9c\xc3\x1a\x47\x04\xfa\xd6\xec\xcb\x52\x81\xae\x0c\x90\x8d\xd4\x8d\x85\xca\x8e\x6a\x87\x29\xef\x7d\x42\x9b\xaa\x84\x43\x83\x85\x5e\x93\x2d\x95\xda\x30\x45\x78\xdf\x86\xa2\x55\xfd\xc8\x47\x54\x79\xc4\xdb\x20\x51\x03\xcf\x35\x1e\x89\xc6\xbf\xa8\x7d\xce\xde\x4f\x00\x79\xae\x21\x48\x31\x69\x09\xd3\xd2\x95\x51\x5d\xec\xbe\xcb\x37\xa8\xfb\x7d\xb2\x15\x4c\xa8\x00\xfe\xa3\x07\xcd\x9f\x5f\x20\x46\xc7\x63\x56\xba\xd8\xea\xca\x70\xb4\x91\x14\xd6\x45\x69\xdc\x9d\xf1\x1f\x9a\x23\x4f\x9e\xc0\x3d\x60\xee\x24\x11\xda\x3a\xc3\x94\xa5\x23\xa1\xb7\x1c\x38\x0b\x39\x1a\x47\x94\x85\xf9\x88\x55\x46\x76\xb4\x2b\x2c\x0d\xb9\x84\x42\x14\x72\x5d\x14\x5a\x41\xa6\xaa\x32\x3b\x01\x69\x93\xd0\xa0\x44\xca\xe3\x56\x7c\x8b\x53\x8f\x54\x4f\xe3\x2e\xbb\xb5\xeb\x47\x96\xa5\x48\x9a\x1d\xc7\x8f\xac\xb6\xe2\x45\xe9\x28\x88\x16\x44\x69\x74\xe5\xf0\x04\xd0\xe5\x94\x26\x60\x35\x67\xce\xb3\x92\x50\x0a\x55\x7d\x86\x42\x57\xca\x01\x26\xcd\x81\x2a\xc5\x35\xac\x0a\x9d\x02\xab\x96\x36\xac\x81\xbe\x15\x9b\x30\x9b\x83\xb1\x5b\xc5\x77\xee\x5b\x12\xe9\x8a\xa5\x48\x3a\xec\xad\xff\xa5\x7f\x84\x12\x2e\x72\xcc\x64\xe8\x22\xca\x3e\x1b\x43\xa8\x58\x81\x10\xb4\x56\xba\xa2\x24\xfe\x6d\x43\x8b\xae\x2a\xa3\x26\x27\x03\x08\x53\x94\xe8\x70\x77\x8d\x29\x20\x5c\x3e\x7a\x4f\x51\x49\x27\xc2\xca\xa2\xb9\x7f\xd5\xb3\xef\x0e\x53\x62\x3c\x38\xfc\xec\x87\x9b\x1f\xb9\x49\x6a\xce\x64\xb8\xb4\xff\xdb\x3d\x8f\x39\x83\xb2\xde\x3d\x3c\x49\xce\xfe\x1b\xc7\xc9\xbd\xdc\xc9\xbf\x24\xc1\xb3\xda\x1f\x2a\x5e\x97\xdf\x0c\x59\xfa\xf6\xd6\x66\x17\x4a\x07\xf0\xcb\x2f\xf7\x1d\xd6\xf6\x81\x88\x68\x1c\xe1\xd9\xb8\xa9\x98\xba\xa0\x07\x4d\x6b\xa7\x86\x67\xa9\x3b\xe6\xac\x2c\xb1\x85\xd3\x0d\x76\xb4\xd5\x23\x5b\x33\x2f\x75\xed\x8d\x25\xda\x83\x0d\xf5\x7a\x3f\x91\xfc\x08\x78\x1b\x29\xb1\xcf\xdd\xb8\xed\x25\x18\x57\x49\xa5\x5c\x15\xf7\x2d\xba\xb0\x2a\x43\x97\x63\x68\xb0\xd4\x56\x38\x6d\xb6\x84\x96\x2a\xed\x64\xee\x7a\xae\x67\x14\x9a\xdb\xd8\x67\x5f\x2c\x54\x0b\x74\xae\xbd\x28\x5c\xd5\xac\x36\xee\xef\x60\x21\xdc\x83\x05\x42\xb8\xfa\xbf\x4f\x2d\x5c\xbf\xbb\x86\x15\x6e\xfd\x02\x41\xa3\xa7\xb4\x42\x65\x68\x4a\x23\x94\xbb\xf7\xfd\x9e\x76\x61\x4b\xf3\x3d\x9c\x89\x07\x8e\x6d\x7a\x79\x47\x5e\x9e\xff\x14\x1d\x9f\x12\xce\xe9\xe5\x52\x70\xe1\x1b\x77\x83\xa8\xf5\xc4\xb8\x37\x40\xf3\xca\x18\x54\x4e\x6e\x07\x0d\x2c\x97\x42\xd5\x0c\x8d\xb9\x68\xaf\xa5\x3f\xe2\x13\xc7\xec\xca\xc6\xbe\x01\x7c\xe7\x8d\x9a\x3a\x4c\x2f\xdf\x8e\x66\x3b\xf6\xe6\xf5\x8a\x4e\xfe\xe4\x18\x1e\xff\xd9\x10\xb5\xa6\x45\x05\x3e\x04\xcd\xec\xd0\x51\x11\x54\xeb\x81\xa7\x33\x0f\xb8\x4c\xd4\x71\x25\xcf\x79\x9c\x06\x06\x44\x8f\xbf\xa0\xd1\xb0\x66\xb2\xa2\x54\xb1\x42\xfa\xf9\xa0\x99\x57\x6a\x9a\x04\x4b\xa3\x0b\xdf\xbb\x57\xb8\x25\x94\x0f\x3e\xd6\x0b\xe7\xed\x47\xd0\x95\x2b\x2b\x1a\xd5\x74\x25\x53\x7f\x7b\x42\x89\x68\x28\xf1\x0e\xad\x4b\x89\xd0\x36\x2c\x8b\x68\x93\x29\x08\x1a\x8f\x6a\x52\x3a\x7c\xb7\xb8\x7b\x3b\xfa\x74\x77\x35\x9d\x2c\xee\x3e\x0e\x67\x93\xbb\xe9\xe4\xee\x6a\x38\xb9\x1e\xcd\xa6\xef\xe7\x77\xef\xe7\x9e\xae\x2e\x99\xb4\x18\x78\x58\xf3\x08\x11\x2e\xed\xfc\x06\x82\x5d\x4a\x6f\x94\xd4\x2c\xdd\x4f\xeb\x3a\x9d\x0f\x0e\xa3\xba\xe6\xb4\x6d\x01\xe3\xe7\xa6\x34\x0f\xc6\x57\xc1\x51\x9c\x95\x59\x00\xff\xd5\x99\x42\xb9\x14\xee\x8a\xb8\xfd\xbc\x97\x72\x70\x3c\x7a\xfd\xe6\xf2\xea\xec\x6c\xb7\xab\xa6\xa5\x0d\x77\x0e\x48\x46\x48\x07\x77\xf9\xb8\x07\xa6\x1e\x90\x7f\xa3\x81\xe2\xa2\x39\xf0\x3b\xfc\x7d\x33\xe0\xe0\x50\xda\xe4\xae\x85\xc4\x90\xdb\x23\xb0\x1e\x7e\x82\x1f\xa1\x72\xd0\x55\xfa\xc5\xc1\xd7\xfb\x79\xf7\x2d\xd8\x6f\x46\x97\x93\x31\x24\x42\x31\x43\x4c\xc9\x69\x88\x75\xe9\x62\xae\x44\x9c\x08\xf5\xf8\x1c\x95\x6a\x0e\x9b\x7c\x0b\x31\x6c\x68\x84\xcf\xd1\xd4\xf4\xfd\x72\x32\xde\x1f\x4c\x5e\x45\xc7\x41\xf7\x7d\x31\x9c\xbd\x1e\xde\xdc\x5c\x04\x5c\x89\xb0\x94\x55\x26\x94\x6d\xc7\x91\x70\x7d\xf0\x75\xef\xec\xb7\xc8\x65\x5f\x76\x27\xfd\x34\xf2\x7e\x76\x73\xd1\xa5\x83\x75\xda\xb0\x0c\xa3\x4c\xeb\x4c\x22\x2b\x85\x7d\x30\xc0\xb7\x3e\x8c\x15\xba\x8d\x36\xab\xf6\xc2\x78\x27\xd5\x0b\xac\xaf\x6d\x2f\xf8\x56\xff\xb7\xd1\xf4\xdb\x7e\x3a\x52\x36\x86\xa1\x41\x67\xb6\xf0\x12\xc2\xb0\xa9\x88\xd8\x15\x25\xb9\x8a\x14\x86\x46\x1a\x09\xda\x0b\x8a\xcd\xd9\xc9\xcb\x57\xb6\x2a\xee\x6f\xee\xd6\x8b\x55\x2a\x0c\x84\xe5\x3d\xb7\xef\x96\x1d\x33\x10\x5e\xde\x5f\x0c\x3f\x7f\x59\xfe\x40\x1a\x81\x99\xb9\xbf\x48\xa1\x76\x48\x28\xd2\x90\x58\xff\xec\x22\x7c\xc5\x0a\xd5\x52\xec\x43\xe1\x60\x43\x13\x2d\xcf\x91\xaf\xba\xe7\xa6\x8e\x72\x52\xe3\x39\xfa\x7f\x7b\x56\xa0\x81\x6a\x27\xba\xc3\x86\x56\x43\xfc\x2c\x9c\x25\x48\x9b\x8f\xaf\x67\x8b\xdb\xf1\xe4\x1f\xa7\x75\xd3\x9b\x8f\xaf\x17\xa3\xd9\x2d\x1c\xd6\xc0\x69\x30\xc4\xcf\xc8\x2b\xea\xda\xc2\xed\xab\x97\x54\xd9\x17\x21\x25\xdb\x27\xdb\x36\xd7\x9b\xbb\xa4\xca\x22\x9e\x89\x7f\x13\xe9\xc5\xf3\x93\xe3\xe7\xaf\x5e\xfe\xd4\x9b\x2f\xa6\xef\xe6\xe3\xeb\xc9\xf0\x66\xef\x3e\xf2\xda\xc6\xb0\x72\x37\x85\x09\x97\xfb\xe9\xc1\xbf\xc0\x31\x09\xa8\x9c\xd9\x96\x5a\xd0\x1c\x69\x11\xa1\x5c\x65\xf5\x48\xeb\x9d\x97\xef\x3d\x15\xf8\xa7\xb4\x1a\xa9\x9b\x57\x32\xbf\xf2\x07\xcd\xd2\x12\x9d\x85\xca\x52\xf7\x86\xaa\xac\x91\x9e\x38\x7f\x66\x21\xc1\xa5\x36\x75\x08\x84\xaa\xfc\x63\x85\xc7\xa1\x46\xa3\xfa\xfd\x4d\x22\xd0\x30\x48\x1c\xd0\xf7\x7e\xe6\x3a\x8d\x85\x85\x77\xe3\xab\xe7\xbd\x7e\xa7\xd0\x06\x41\xe2\x1a\xa9\x76\xbc\x0a\x3b\xc5\x9b\x17\xc0\xde\xe5\xf4\xdd\x27\xf8\x0d\x82\x9d\x71\xf1\xee\x67\x30\x80\x20\xae\xac\xa9\x49\x1d\xa5\x62\x1c\xc0\xef\xbd\x3e\x7c\x44\xcf\x61\x76\x19\xa6\x09\x20\xe8\xf2\x76\xe6\xa3\x5c\x5a\x33\x23\xb4\x37\xb5\x9d\xff\x5a\xb4\xa6\xc2\x95\xe8\x06\x80\x8e\x47\x47\x1d\x68\xb7\xfe\x7b\xa6\x95\xdc\x3e\x6b\x07\x42\x0f\x77\xfe\x3d\x6c\xe0\xc5\xee\xf4\xf3\xf8\xbe\x46\x63\x44\x9a\x12\x8d\x72\x74\xb5\x13\x05\xf6\x46\x93\xc5\xec\xd3\xbb\xe9\x78\xb2\x20\xe3\x1e\xd8\xf0\xc0\x40\x4b\xdf\x88\x26\x92\x6d\xfe\x95\x12\xdb\x22\xc9\x0c\x2b\xf3\xee\x0d\x84\xc1\x5a\xcb\x8a\xe2\xa5\x81\xad\xb5\x48\xfd\xe5\x92\x6d\x29\x4e\xcd\xcf\xce\x16\x9a\x12\x9b\x77\x42\xc9\xfc\x79\xce\x68\x24\xe5\x39\x53\x19\x85\xae\x93\xd6\x3c\x85\x5e\xf9\x2b\xfd\x43\x3b\x5d\xd8\xeb\x83\xe6\xbc\x32\x6d\x56\xf8\x07\x98\xfa\xf5\xa8\x79\x2e\x3e\xff\x3f\xbc\xbc\xd4\x57\xf6\x3e\x4c\x6f\xde\xdf\x8e\xbc\x6b\xd6\xcc\x78\x2a\x5c\x1f\x6f\x5c\xf0\x18\x04\x10\xf9\xf0\xaa\xb6\x41\xbf\x1d\x5e\x12\x32\xfa\xb7\x6c\x66\xad\xc8\x14\x05\x6a\xaf\x26\xf7\x9e\x5a\xef\x13\xed\x34\x16\xd6\x56\x68\xe3\xd3\xd3\x9f\x5e\xf4\xfd\x6f\x9a\x06\x51\xb9\xf0\xe4\xec\xec\xec\xec\xe4\xf4\xe5\xcb\xbf\x29\xe7\xf4\xf4\x9f\x27\x2f\xcf\x5e\x9c\x9d\xf6\xfe\x3b\x00\x00\xff\xff\x32\x29\xb2\x0d\x3f\x19\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypointMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\x61\x73\xdb\xb8\x11\xfd\x2c\xfc\x8a\x3d\x76\x6e\x2a\xe5\x68\xd2\x92\xcf\x8e\x4f\x4d\x3e\xa8\xb6\x92\x68\xe2\xca\x19\x4b\xa9\x9b\x49\x3d\x09\x08\x2e\x49\x8c\x41\x80\x05\x40\xc9\x6c\x27\xff\xbd\xb3\x20\xed\xc8\xc9\x7d\xb0\x2c\x90\xc0\xdb\xb7\xef\x3d\xac\xd2\x17\xec\xc2\x34\x9d\x95\x65\xe5\x61\x76\x3c\x3d\x87\x6d\x85\xf0\xbe\xcd\xd0\x6a\xf4\xe8\x60\xd1\xfa\xca\x58\x97\x30\x76\x25\x05\x6a\x87\x39\xb4\x3a\x47\x0b\xbe\x42\x58\x34\x5c\x54\x08\xc3\x9b\x18\xfe\x89\xd6\x49\xa3\x61\x96\x1c\xc3\x98\x36\x44\xc3\xab\x68\xf2\x37\xd6\x99\x16\x6a\xde\x81\x36\x1e\x5a\x87\xe0\x2b\xe9\xa0\x90\x0a\x01\x1f\x04\x36\x1e\xa4\x06\x61\xea\x46\x49\xae\x05\xc2\x5e\xfa\x2a\x14\x19\x20\x12\xf6\x69\x00\x30\x99\xe7\x52\x03\x07\x61\x9a\x0e\x4c\x71\xb8\x0b\xb8\x67\x0c\x00\xa0\xf2\xbe\x99\xa7\xe9\x7e\xbf\x4f\x78\x60\x99\x18\x5b\xa6\xaa\xdf\xe5\xd2\xab\xd5\xc5\x72\xbd\x59\x1e\xcd\x92\x63\xc6\x3e\x6a\x85\xce\x81\xc5\xff\xb4\xd2\x62\x0e\x59\x07\xbc\x69\x94\x14\x3c\x53\x08\x8a\xef\xc1\x58\xe0\xa5\x45\xcc\xc1\x1b\xe2\xb9\xb7\xd2\x4b\x5d\xc6\xe0\x4c\xe1\xf7\xdc\x22\xcb\xa5\xf3\x56\x66\xad\x7f\x26\xd0\x23\x2b\xe9\xe0\x70\x83\xd1\xc0\x35\x44\x8b\x0d\xac\x36\x11\xfc\x7d\xb1\x59\x6d\x62\x76\xbb\xda\xbe\xbb\xfe\xb8\x85\xdb\xc5\xcd\xcd\x62\xbd\x5d\x2d\x37\x70\x7d\x03\x17\xd7\xeb\xcb\xd5\x76\x75\xbd\xde\xc0\xf5\x1b\x58\xac\x3f\xc1\xfb\xd5\xfa\x32\x06\x94\xbe\x42\x0b\xf8\xd0\x58\xe2\x6e\x2c\x48\x92\x0e\xf3\x84\x6d\x10\x9f\x15\x2f\x4c\x4f\xc6\x35\x28\x64\x21\x05\x28\xae\xcb\x96\x97\x08\xa5\xd9\xa1\xd5\x52\x97\xd0\xa0\xad\xa5\x23\xf3\x1c\x70\x9d\x33\x25\x6b\xe9\xb9\x0f\xeb\x9f\xda\x49\xd8\x8b\x94\xb1\xf4\x05\xdb\x92\x85\x54\x17\x6b\xd4\xde\x81\x69\x89\x06\x21\xa3\xf6\xb6\x6b\x8c\xd4\x3e\x81\x95\x9f\xb3\x23\xd8\x73\xe9\x5d\xe0\xb2\x59\xbd\xfd\xb8\xb9\x99\xb2\x23\xc2\xd4\x80\x0f\x28\x1c\x8c\xb9\x2d\x77\x9f\xa7\x77\x31\xf4\x5f\xe6\x77\x31\xa0\xde\x7d\x9e\xdf\x4d\x58\x5f\x87\x2b\x65\xf6\x0e\x5a\x47\x1e\x34\x68\x0b\x63\x6b\x30\x41\x05\x2e\x7a\xa6\x52\x07\x9a\x91\x36\x39\x46\x20\x8c\xa6\xa0\xa0\x85\x9d\xe4\xf0\x35\x37\xe2\x3e\x28\x86\xe2\x2b\xfb\x92\x61\x61\x2c\x7e\x81\x3d\x42\xc5\x77\x48\x10\x2d\x57\xaa\x83\x28\x33\xc6\x63\x1e\x05\x24\xa9\xa5\x27\x3d\x00\x77\x68\x3b\x5f\x91\x54\xa8\x28\x66\xca\xe8\xb2\xcf\xa8\xf4\x09\x63\xb7\x08\x82\xeb\xbe\x21\x87\x3a\x7f\x6c\x92\xb8\x86\xa0\x37\xd6\x08\x32\x8a\xd6\x56\x96\x25\x5a\x70\x9e\x5b\x4a\x51\xcf\xb9\x27\x10\xb1\xef\xca\xc1\x9e\xd0\xf6\x08\xdc\x22\xe4\x46\x23\x34\x96\x58\xd7\x74\x86\xeb\x8e\x30\x77\x92\x3c\xa3\x07\xe6\xb0\xf7\x84\xb1\xf5\xf5\x76\x39\xef\x6b\x1f\x9a\x84\x39\x70\x07\x1c\x9c\xd4\xa5\xa2\x04\x4c\x93\x7f\x85\x5b\x18\x43\xeb\x7a\x1c\xd5\xf5\x71\xf1\xb9\x92\x59\xd2\x8b\x5f\xf3\x7b\x74\x20\x3d\x20\x77\x92\xd2\x60\x20\x6b\xa5\xca\xa1\x31\xd6\xf3\x4c\x75\x71\x90\xa9\xb7\x89\x38\x6b\xba\x2c\xe4\xf6\xbe\xe2\x9e\x0e\xe6\x06\xdd\x10\x9c\x14\x96\xdf\x9b\x3c\x88\x0f\x07\x57\xd3\xf1\xc1\xa9\x1f\x93\x04\x9e\xa0\x7e\xce\x51\x9a\x42\xef\x66\xf0\x36\xf4\xe0\x92\x85\x2d\x1d\xa5\x88\x35\x5c\xdc\x13\x4e\xcd\xa5\x66\x4c\xd6\x44\x18\xc6\x6c\x14\x19\x17\x85\xcf\xd4\xc9\x52\x93\xf2\xa3\xc8\x75\x4e\x70\xa5\x22\xc6\x46\x91\x32\x65\xc4\x26\x81\x6d\x87\xae\x17\xd2\x55\xa6\x55\x39\x64\xfd\xfd\x12\x50\x73\x61\x4d\x0c\x59\xeb\x49\x7e\x25\x75\xfb\x40\x19\x1c\xf8\x77\xa6\xfd\xab\x25\x89\x83\xc7\x06\x4a\xf4\x3d\x0c\xd7\x5d\x65\xf6\x84\x3c\x4c\xa9\x9a\xeb\x97\xc3\x7c\xd2\xed\x03\x2d\x8f\x1a\x5e\xa2\x0b\x2f\x06\x7e\xc9\xcb\xa4\xf2\xb5\x7a\x3c\xe5\xe6\x69\x5a\x4a\x5f\xb5\x59\x22\x4c\x9d\xd6\x26\xeb\xfa\x8f\x4c\x99\x2c\x3d\x3d\x9b\xe5\xc5\xb9\x98\xe5\x67\xc5\xef\xe7\x67\xc7\x53\x71\x9e\x4f\xf3\xe2\xe5\xec\xf4\xec\xe4\xfc\x8f\xd3\xb3\x3f\xf2\xd9\xa9\x38\xce\x8a\x69\xda\xdc\x97\x03\xfe\xf0\xef\x4b\xa0\x90\x94\xe6\x2f\x57\xd3\x63\x26\x8c\x76\x1e\x9c\x2c\xad\xaf\xa5\x86\xd7\x70\xf2\x3b\x63\x45\xab\x45\x90\x73\x3c\x81\xff\xb1\x51\x9a\x52\x2e\x77\xa8\x3d\xfc\xd7\xd4\x99\xc4\xc7\xac\xa3\xa3\x94\xd1\x28\xa7\x69\xae\x14\xe9\xf6\x61\x75\x39\x0d\xe6\x71\xd8\x57\x52\x61\x38\xfe\xd8\x4f\x5f\x3a\x97\x98\x68\xf4\xd4\x7b\x3a\x4b\xc9\xee\x46\xe6\x6c\x34\xa8\xb0\x2a\xb5\xb1\x38\x1e\x9c\x4a\x36\xab\xb7\x17\xef\xae\x2e\x27\x2c\x00\x95\x96\x67\xfd\x2d\xb0\xc8\x55\x74\x98\x1d\x61\xea\x9a\x12\x1a\xfe\x6c\xe9\xa0\xb0\xa6\x0e\x03\x8b\x56\x6c\x24\x0b\x50\xa8\xc7\x43\x72\x26\xf0\x0a\x66\xd4\xdc\x48\x99\x32\x79\xc3\x3d\x57\xe3\x68\x6d\x3c\xa0\x36\x6d\x59\xd1\x99\xb6\xcf\xac\x37\x07\x55\x7e\x89\x26\x6c\xf4\x8d\x8d\x44\x9d\xf7\x73\x0c\xe6\xaf\xbf\x87\xf1\x2e\x7e\x16\xcc\xc0\x98\xda\x3b\x0c\x33\x8c\x0d\x8d\x28\x19\x02\xb5\x59\xbd\xbd\xd9\xfe\x63\xb5\xfe\xed\x84\xca\xd4\xdc\x8b\x0a\x5c\xe7\x3c\xd6\xf9\x84\x8d\x04\x81\xd3\xbd\x1c\x8b\x8a\x6b\x82\xde\x04\x89\x62\x98\x4e\x9e\xe4\x5a\x1b\x2f\x8b\x6e\x2c\x62\x38\x50\x8c\x0a\x1d\x3c\x08\x3b\xc7\x8f\x26\xff\x76\x32\x99\xb0\xd0\xf6\x07\x2b\xb5\x57\x7a\x1c\xdd\xf2\xf0\x6b\xf7\x8c\x67\x92\x24\x51\x5f\x86\x68\xbc\x3a\x12\x41\x42\x5a\xfe\xf2\xfa\xc7\x5a\x4f\x42\x06\xc4\x62\x1c\x2d\x1f\x7a\x40\x5e\x78\x9a\x83\x81\xc0\x1c\x7e\xdd\xd1\xd9\xe1\x4c\x14\xd3\xf3\x09\x1b\x8d\x2c\xfa\xd6\x6a\xd2\x35\x28\xf6\xf4\x9b\xd1\x8f\xd6\x3f\xf1\x3a\x86\x7b\xc4\xe6\x71\xb0\xa2\xde\xb1\x67\xc5\x6f\x50\xa0\xdc\xe1\xd3\x88\x8e\x9f\xc6\x86\x37\x81\xc4\xaf\xbb\x7f\xeb\x28\x86\x27\x13\xa9\xcd\xa1\xa1\xe5\x03\x8a\xf1\xd3\x8b\xe0\xe7\x52\xef\xa4\x35\x7a\x3c\x99\xb0\x6f\xec\xff\x01\x00\x00\xff\xff\x39\x8f\xbf\x84\x4f\x09\x00\x00")

func imagesBaseEntrypointMainGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypointMainGo,
		"images/base/entrypoint/main.go",
	)
}

func imagesBaseEntrypointMainGo() (*asset, error) {
	bytes, err := imagesBaseEntrypointMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint/main.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":         imagesBaseDockerfile,
	"images/base/entrypoint/main.go": imagesBaseEntrypointMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile": {imagesBaseDockerfile, map[string]*bintree{}},
			"entrypoint": {nil, map[string]*bintree{
				"main.go": {imagesBaseEntrypointMainGo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
