// Code generated by go-bindata.
// sources:
// ../../../../images/base/Dockerfile
// ../../../../images/base/clean-install
// ../../../../images/base/entrypoint
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7b\x6f\xdb\x46\x12\xff\x5f\x9f\x62\x20\x05\xad\xed\x8a\xa4\x9f\xb5\x93\xab\x73\x50\x14\x25\x15\x6a\x4b\x81\xa4\xb4\x08\xee\x0e\xc1\x72\x39\x22\xb7\x5a\xee\xf2\xf6\x21\x59\x49\xf3\xdd\x0f\xb3\xa4\x1e\x76\x9c\xa6\x87\xb6\x86\x01\x49\xdc\xd9\x79\xcf\x6f\x66\xd8\x81\xbe\xae\xd6\x46\xe4\x85\x83\xd3\xe3\x93\x2b\x98\x15\x08\x3f\xf9\x14\x8d\x42\x87\x16\x7a\xde\x15\xda\xd8\xb8\xd5\x69\x75\xe0\x46\x70\x54\x16\x33\xf0\x2a\x43\x03\xae\x40\xe8\x55\x8c\x17\xb8\x39\xe9\xc2\xcf\x68\xac\xd0\x0a\x4e\xe3\x63\x38\x20\x82\x76\x73\xd4\x3e\xfc\x47\xab\x03\x6b\xed\xa1\x64\x6b\x50\xda\x81\xb7\x08\xae\x10\x16\xe6\x42\x22\xe0\x1d\xc7\xca\x81\x50\xc0\x75\x59\x49\xc1\x14\x47\x58\x09\x57\x04\x31\x0d\x93\xb8\xd5\x81\x77\x0d\x0b\x9d\x3a\x26\x14\x30\xe0\xba\x5a\x83\x9e\xef\xd3\x01\x73\x41\x61\xfa\x2b\x9c\xab\x9e\x25\xc9\x6a\xb5\x8a\x59\x50\x36\xd6\x26\x4f\x64\x4d\x68\x93\x9b\x61\x7f\x30\x9a\x0e\xa2\xd3\xf8\x38\x5c\x79\xab\x24\x5a\x0b\x06\xff\xeb\x85\xc1\x0c\xd2\x35\xb0\xaa\x92\x82\xb3\x54\x22\x48\xb6\x02\x6d\x80\xe5\x06\x31\x03\xa7\x49\xdf\x95\x11\x4e\xa8\xbc\x0b\x56\xcf\xdd\x8a\x19\x6c\x75\x20\x13\xd6\x19\x91\x7a\x77\xcf\x59\x1b\xed\x84\xbd\x47\xa0\x15\x30\x05\xed\xde\x14\x86\xd3\x36\xbc\xe8\x4d\x87\xd3\x6e\xab\x03\xbf\x0c\x67\x3f\x8e\xdf\xce\xe0\x97\xde\x64\xd2\x1b\xcd\x86\x83\x29\x8c\x27\xd0\x1f\x8f\x5e\x0e\x67\xc3\xf1\x68\x0a\xe3\x57\xd0\x1b\xbd\x83\x9f\x86\xa3\x97\x5d\x40\xe1\x0a\x34\x80\x77\x95\x21\xfd\xb5\x01\x41\x6e\xc4\x8c\x7c\x36\x45\xbc\xa7\xc0\x5c\xd7\x0a\xd9\x0a\xb9\x98\x0b\x0e\x92\xa9\xdc\xb3\x1c\x21\xd7\x4b\x34\x4a\xa8\x1c\x2a\x34\xa5\xb0\x14\x4c\x0b\x4c\x65\xad\x0e\x48\x51\x0a\xc7\x5c\x78\xf2\x99\x51\x71\xab\xd5\x81\x85\x50\x19\x70\xe9\xad\x43\x03\x29\x23\x53\x4b\x96\x63\x70\xec\x2b\x6d\xc0\xae\xad\xc3\x32\x83\xef\x20\xd3\x7c\x81\x06\xb8\x56\x73\x91\x7b\x13\xb8\x52\x46\x64\x90\xa2\xd4\xab\x2e\xd8\x46\xe5\xb9\x96\x52\xaf\x48\x21\x83\x73\x34\xa8\x38\xda\x67\xad\x4e\x08\xab\x6d\xe2\x3a\xa7\x68\xa0\x5d\x38\x5d\x85\xe0\xae\xc4\x42\x24\xd3\x26\x1a\x49\x23\x34\xe9\x6b\x45\x19\x83\x66\xa8\x1c\x9a\x39\xe3\x98\xec\xf1\xc9\x70\x89\x52\x57\x68\x6c\x6c\x30\x2b\x98\x8b\xb9\x2e\x93\x54\xea\x3c\x39\x3d\x3e\x39\x4f\x8e\x2f\xe8\xdf\x78\x45\xce\x89\x1a\x9e\x11\x25\xa8\x50\x51\x6d\x4d\xc4\x37\x12\xfe\x38\xe3\xef\x93\xe3\xa7\xc9\xc9\xd9\x67\x8c\x85\x8a\x58\xa4\xb4\x8a\x2a\x23\x96\x42\x62\x8e\xd9\x3e\xfb\x56\x6f\xf2\x9a\x32\x65\xf0\x7e\x78\xdb\x7b\x3d\xb8\x6e\xfb\xd4\x2b\xe7\x9f\x9d\x3c\x8d\x8f\xcf\xdb\xad\x57\x93\xf1\x2d\x3c\xf9\xb8\x23\xf8\x44\xd1\xb1\xe8\x28\x51\xe1\xe5\xe0\xc5\xb0\x37\x7a\xff\x6a\x32\x1e\xcd\x06\xa3\x97\xd7\x4a\x2b\x41\x2e\x61\xdc\x89\x25\x82\x75\xba\xb2\x60\x75\x89\xc0\x2a\x07\x2b\x16\xf2\xc1\x76\xeb\x62\x15\x36\x14\x6f\xab\x03\x0c\x0c\x32\x09\xcc\xe4\xbe\x44\xe5\xba\xb0\xc2\x6f\x0d\xc2\x01\x4b\x0f\xbd\x25\x39\xa4\xa3\xd3\x90\xa3\x03\x06\x0e\xcb\x4a\x1b\x66\xd6\x30\x18\xfd\x0c\x2c\x67\x42\xc5\xc1\x8a\xdf\xd7\xa6\xd5\xea\x8f\xdf\xbc\x03\x2e\x91\xa9\x48\x28\xeb\x98\x94\x90\x78\x6b\x12\xa9\x39\x93\x49\x2a\x54\x72\xef\xb0\x35\x79\x3b\x02\x5e\x94\x3a\x83\xef\xee\x7e\x9f\xb2\xd5\x81\xd7\xe8\x20\xc3\x0a\x55\x86\x8a\x0b\xb4\xad\x4e\x00\xc0\x5d\xea\x02\x93\x06\x59\xb6\x86\x82\xd9\x67\x60\x6d\xd1\x25\xa7\x74\xc1\x2a\x56\x65\x81\xba\xf6\x49\x6a\xf4\x02\x15\x64\x7a\xa5\x40\x28\xa7\xe1\x00\x19\x2f\x42\x69\x83\x14\x0a\x0f\x29\x67\x23\xa8\x18\x5f\xb0\x1c\x2d\x28\xca\xd8\x80\x20\xc6\x2b\xb0\x68\x96\x82\xa3\x85\x83\x26\xfe\x87\x81\xba\x3f\x19\xc2\xc1\x36\xea\xcd\xc3\x87\x2c\xa8\x96\x17\x3b\xc0\x26\xf4\xd4\x0a\x95\xb3\x81\xba\x14\x96\xef\xae\x84\xfa\xf4\x16\x2d\x08\x67\x51\xce\x6b\x73\x15\xac\xb0\xf6\xb0\xaf\xe0\xc0\x60\xa9\x97\x14\x3e\xaf\x56\x4c\x11\x3e\x6d\xaa\x76\xa3\xe5\xe1\xde\xb5\x4c\xd8\x00\x8c\x8b\xd2\xe6\x04\x86\xbf\x6a\x6f\x14\x93\x59\x00\x7f\x8b\x20\x75\x0e\xa8\x9c\x11\x68\x61\xa5\xbd\xa4\xfa\x0e\x55\x1f\x52\xe4\x30\x20\xc3\xd1\x57\xfe\x7e\x98\x0d\x6e\xdf\x8c\x27\xbd\xc9\xbb\xe7\x5f\x23\x3d\x3a\x3a\x0a\x2c\x7f\x09\xe0\x51\xc7\x43\x6a\x96\x51\x9b\x70\x06\x52\xa1\x28\x03\x43\x5b\x61\xe0\x84\x5a\x03\xcb\x32\x41\xe0\xc3\x24\xcc\x91\x39\x1f\xe0\x7b\x85\x4d\x77\x62\x6e\x93\xf0\x6b\x74\x50\xa2\xc9\x31\x83\x64\xe3\xd0\xac\x6e\x8b\x53\xc4\x67\xdb\x72\xcf\x85\x2b\x7c\x1a\x6a\x7c\x17\xb9\xfd\xaf\x95\x97\x32\x39\x3b\xbd\x78\x1a\xee\x86\xfc\x69\xd4\xa2\x6f\x5e\x48\x57\xeb\x57\x30\xbe\x48\xe8\x77\x96\x70\x67\x08\x20\x62\x5b\x90\x34\xed\x0d\x61\xe0\x63\x12\x5f\xa0\x9a\x15\x38\x90\x19\x9a\x7d\x91\xce\x20\x26\x14\xfb\x56\x07\x7a\x3b\x7b\xb9\x2e\x4b\xe1\xf6\xc1\xf4\xeb\xac\xea\x3b\x09\x4f\x2f\xf9\xe5\xd5\x31\x9b\x9f\x9e\x3d\x3d\x67\xe9\xf1\x55\x76\x91\x5d\xb1\xb3\xa7\x67\xa7\x9c\x5d\x9e\x9f\x5d\x1e\x5f\x9e\x33\x3c\xb9\x6c\x6c\x1c\xbf\x1c\x1f\xa4\xa8\x5c\x81\x48\xfc\x0e\x9f\x41\x48\xb2\xa6\xfd\x6b\xea\xf4\x51\xa4\x74\xe4\x15\x39\x96\xfc\xb0\x71\x30\xf8\xca\x3a\x83\xac\x8c\xff\x48\xa6\xfc\x90\xfc\xff\x99\xf2\x37\xe1\x7f\x40\xa1\x7b\xa0\xf5\xef\x56\x18\x47\x76\xd5\xd4\xb0\xb0\x6b\xbb\x04\x29\xd2\xe6\xf7\xf1\x96\x70\xe7\xf5\xfd\x47\xca\x99\xe0\xa3\xca\x51\xdd\x59\x10\x95\xd1\xde\xe1\x29\xa0\x2b\x9c\xd6\x12\xac\xe6\xcc\x81\x77\x42\x46\x52\x28\x7f\x07\xa5\xf6\xca\x01\xa6\xcd\x05\x9f\xe1\x12\x16\x84\x8f\x1b\xae\x29\xb3\x05\x70\x16\x71\x34\x8e\xa6\x01\x16\x70\xc4\x1b\x09\xc6\xae\x15\x6f\xe8\xbe\xf9\x06\xe6\x04\x1f\x89\x14\xe9\xb6\xa7\xd6\x9f\xf4\x21\x94\x70\xb1\x63\x26\x47\x17\x13\x6e\xd8\x04\x22\xc5\x4a\x84\xf6\xc6\x50\x57\x56\x34\xe9\xd9\xc8\xa2\xf3\x55\xdc\xa0\x49\x1b\xa2\x0c\x25\x3a\xdc\x89\x31\x25\x44\xf3\x47\xe5\x94\x5e\x3a\x11\x79\x8b\xe6\xbe\xa8\xa3\xcf\x2e\xa3\xe3\x0f\x2f\x1f\x7d\x91\xf8\x11\x49\xa1\x67\x44\x73\xfb\x35\x39\x8f\x39\x83\x92\xc1\x3d\xbc\x49\x6e\xff\x13\xd7\xc9\xbd\xdc\xc9\x3f\xc4\x21\x65\x56\xf0\x2f\x2a\x8e\xbc\xd0\xd0\x9e\x20\xcb\x7e\xba\xb5\xf9\xb5\xd2\x6d\x78\xfe\xfc\xbe\xc3\x36\x20\x1e\x13\x50\xef\x6e\xd6\xc7\xdc\x49\x40\x15\x40\xff\xb3\x0c\x25\xf6\x77\x95\x36\x0e\x7a\x93\xfe\x8f\xd7\x4f\x0e\xb2\x6a\x91\x43\x44\x43\x8c\x72\x11\x33\xbc\x10\x0e\x39\x81\x2c\xfc\x06\x34\xec\x7d\x6b\x93\xaa\xe2\xdf\x9f\xa3\xac\x3f\x25\x26\xdf\x1e\xee\x98\x85\x24\x8c\xe6\xd3\x1b\x88\xf4\x67\xbd\xdc\x99\x6d\x06\xb7\x37\x55\x6c\x9d\x36\x2c\xc7\x38\xd7\x3a\x97\xc8\x2a\x61\xeb\x32\xde\x81\x4f\x44\x38\x18\x65\xb8\xdc\x47\xb5\x50\x28\xc9\x93\x8f\xa4\xf5\x27\xe2\xdc\xde\xd3\xe1\x4b\xb3\xc4\x56\xfe\xd6\xa9\x99\x56\x08\x4d\xbd\x87\x11\xba\xe9\xbb\x6d\x1a\x35\x32\x4c\x7d\xbe\xef\xb2\x65\xb3\x2a\x31\x9a\x99\x0d\x32\x87\x90\xe1\x9c\x79\xe9\x9a\xb1\xb8\x06\x91\xdd\x85\x28\xda\x5c\xd9\xca\x2d\x17\x99\x30\x10\x55\x75\xfc\xf6\x68\x49\xf1\xdd\xaf\x9a\xdf\x96\xfd\xf3\x87\xe4\x49\x4d\x10\x3b\x5d\x86\xb1\x68\xd8\x60\x56\x7f\x34\xac\x9b\x13\xb5\x6f\xa7\x21\xd1\x95\x4b\xb8\x12\xe4\x80\xc7\x81\x3d\xd3\x1c\x56\xc5\x1a\x12\x58\x51\xf3\x2c\xd0\x60\x98\xf2\xfa\xa3\xe1\xfb\x9f\x07\x93\xe9\x70\x3c\xba\x6e\x1f\xc7\x97\xf1\x45\x7b\xfb\x3c\x8c\xa9\x6f\x27\x37\xd7\x5f\x0b\xe3\x6e\xcc\x89\x0c\x4a\x64\x16\x13\x85\x6e\xa5\xcd\x22\xaa\xa4\xcf\x85\xb2\x49\x3b\x38\xed\x2f\x4d\xc2\x86\x19\x69\x3a\xeb\x4d\x5e\xf4\x6e\x6e\xae\xdb\x5c\x89\x8d\xc8\xa8\x49\x9b\x68\xf9\xe4\xe3\x9e\x95\x9f\x62\x97\x7f\x68\x3f\xca\x25\x98\x5a\x13\x6f\x4c\xff\x54\xff\x6c\xf8\x7f\x6a\x3f\x2c\x01\x4b\x25\x10\x19\x74\x66\x0d\x17\x10\x45\xda\xbb\xca\x3b\x48\x5c\x59\x51\x3c\x48\x16\x34\x2c\x89\xdb\xde\x7d\x5b\xb0\xd3\x8b\xef\xad\x2f\xef\x13\x3f\x92\x41\x7b\xb1\xdd\x1d\x3b\x66\x20\xea\xdf\x3f\x8c\xee\x3e\xcc\xbf\xc0\x8d\x40\xc9\xdc\x3f\xdc\xcf\x27\x6e\x04\xc1\x87\x7b\x58\xcc\x75\x2a\x4c\x86\xfd\xd9\xcd\x2e\x4b\x96\x27\xf1\xc9\x79\x7c\xfc\x37\x44\x74\x07\x2b\xed\x47\x26\x9f\xbd\x2c\xb3\x22\xb7\x09\x37\x22\xa2\xce\x6a\x93\x26\xe9\x6c\xb2\x19\x2b\x93\x27\x1f\xef\x6b\xfd\x29\xa9\x4d\x8c\x3e\x3b\xa8\x9b\xf1\x26\x59\x08\x9d\x63\xca\x8f\xdf\x82\x87\xef\x3e\xf4\x1f\x7a\xa4\xd5\x01\x87\x52\x6e\xc7\x85\x7a\x16\x0d\xe3\xa8\x50\x9b\xf5\xf9\x40\xd0\xb0\x48\x8e\x2d\x90\x2f\xb6\x6b\xfd\xb6\xb0\x01\xd5\xf2\xf0\x2f\x5b\x96\x69\x71\xdb\xb1\xae\x55\xa0\xb5\xb2\xd1\x10\xef\x84\xa3\x69\x0e\xa6\xc3\xd7\x93\xd9\xed\x70\xf4\xdd\x59\x37\x8c\xce\xd3\xe1\xeb\xd9\x60\x72\x0b\x07\xab\x42\xf0\x02\x0c\x46\x78\x87\xdc\xbb\xb0\x86\xec\xab\x97\xfa\xfc\x83\x90\x92\xed\x4f\x60\xb6\xd0\xab\xf7\xa9\xcf\x63\x9e\x8b\x7f\x8a\xec\xfa\x84\x96\xe6\x8b\xcb\xd6\x74\x36\x7e\x33\x1d\xbe\x1e\xf5\x6e\xf6\xe4\x91\xd7\x56\x86\x55\x5b\x9d\xc2\x24\xad\xbd\xa9\xdf\x74\x30\x19\x76\x91\x75\xa5\x05\xed\xab\x16\x11\xaa\x45\x5e\x0f\xd9\xc1\x79\x85\x5e\x6d\xb7\xdc\x30\x8a\xb7\x3a\x10\xba\x29\x93\x72\x5d\x9f\xfc\xea\xad\x03\x89\xce\x82\xb7\xb4\x51\x83\xaf\xea\x5d\x99\x06\xc1\xdc\x42\x8a\x73\x6d\xea\x10\x08\xe5\xa9\x0b\x68\x45\x09\xdf\x68\x44\x0a\x16\x42\x22\x54\x06\xc3\x04\xa4\xf2\x3a\xb4\x1b\x8d\x85\x85\x37\xc3\x97\x27\xad\xce\x56\xa1\x15\x82\xc4\x25\x12\x20\x06\x15\x76\x8a\x37\x6f\x5a\xea\x15\xf9\x5f\xd0\xde\x19\xd7\xee\x42\xfb\x41\xbf\x6a\xc3\x7f\xea\xc5\x88\xf6\xc6\x5d\x5a\x69\x5a\xc8\x48\xe2\x66\x17\xa5\x04\x5a\x32\x23\x74\xb0\x6f\xb3\x97\xd6\xd1\xee\x86\x4d\x53\xa2\xeb\x02\x3a\x1e\x53\xec\x46\xe3\xd9\xe0\xd9\xd6\x69\x47\x5a\xc9\xf5\x51\x50\x3d\xd3\x3c\xbc\x17\x08\xaf\x76\xba\x81\xed\x4e\x3f\xa2\xd5\x4b\x34\x46\x64\x19\x2a\x48\xd7\xe1\x5c\xe9\x6c\xf3\xc6\x68\x30\x9a\x4d\xde\xbd\x19\x0f\x47\x33\x32\xec\x81\x29\x0f\xec\xb4\xf4\x8c\x06\x24\x32\xf1\x0b\x6d\x09\x99\xac\x93\x61\x63\xf8\x6d\xaf\x4f\xbb\x5f\x78\x59\xc6\xac\x15\xb9\x22\x65\x1f\xdf\x85\xee\xcf\x57\x59\x22\xac\xf5\x68\x93\xb3\xb3\xcb\xf3\x4e\xf8\x4e\x5b\x11\x2a\x17\x9d\x5e\x5d\x5d\x5d\x9d\x9e\x5d\x5c\xfc\x49\x3e\x67\x67\x4f\x4f\x2f\xae\xce\xaf\xce\x5a\xff\x0b\x00\x00\xff\xff\x20\xe3\xf8\x9d\xa0\x15\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseCleanInstall = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x51\x6f\xdb\x36\x14\x85\xdf\xf9\x2b\xce\xac\x62\xd8\x8a\xc8\x4a\xf3\x32\x60\xc5\x86\x79\x49\x86\x19\x2d\x6c\x20\x76\x57\x14\xdb\x1e\xae\xa8\x2b\xe9\x22\x12\xc9\x91\x57\x75\xfc\xef\x07\x2a\x71\x10\xa3\xd1\x93\xc8\x73\xc8\xf3\xf1\x90\xc5\x77\x55\x2d\xae\x4a\xbd\x31\x05\xae\x7d\x38\x46\xe9\x7a\xc5\xd5\xe5\xbb\x9f\xb0\xef\x19\x1f\xa6\x9a\xa3\x63\xe5\x84\xd5\xa4\xbd\x8f\x69\x69\x0a\x53\xe0\xa3\x58\x76\x89\x1b\x4c\xae\xe1\x08\xed\x19\xab\x40\xb6\xe7\x93\x72\x81\xbf\x38\x26\xf1\x0e\x57\xcb\x4b\xfc\x90\x0d\x8b\x27\x69\xf1\xe3\x7b\x53\xe0\xe8\x27\x8c\x74\x84\xf3\x8a\x29\x31\xb4\x97\x84\x56\x06\x06\x3f\x58\x0e\x0a\x71\xb0\x7e\x0c\x83\x90\xb3\x8c\x83\x68\x3f\xc7\x3c\x6d\xb2\x34\x05\xbe\x3c\x6d\xe1\x6b\x25\x71\x20\x58\x1f\x8e\xf0\xed\x4b\x1f\x48\x67\xe0\xfc\xf5\xaa\xe1\xe7\xaa\x3a\x1c\x0e\x4b\x9a\x61\x97\x3e\x76\xd5\xf0\x68\x4c\xd5\xc7\xf5\xf5\xed\x66\x77\x5b\x5e\x2d\x2f\xe7\x25\x9f\xdc\xc0\x29\x21\xf2\x7f\x93\x44\x6e\x50\x1f\x41\x21\x0c\x62\xa9\x1e\x18\x03\x1d\xe0\x23\xa8\x8b\xcc\x0d\xd4\x67\xde\x43\x14\x15\xd7\x5d\x20\xf9\x56\x0f\x14\xd9\x14\x68\x24\x69\x94\x7a\xd2\xb3\xb2\x4e\x74\x92\xce\x0c\xde\x81\x1c\x16\xab\x1d\xd6\xbb\x05\x7e\x5f\xed\xd6\xbb\x0b\x53\xe0\xf3\x7a\xff\xe7\xf6\xd3\x1e\x9f\x57\x77\x77\xab\xcd\x7e\x7d\xbb\xc3\xf6\x0e\xd7\xdb\xcd\xcd\x7a\xbf\xde\x6e\x76\xd8\xfe\x81\xd5\xe6\x0b\x3e\xac\x37\x37\x17\x60\xd1\x9e\x23\xf8\x21\xc4\xcc\xef\x23\x24\xd7\xc8\x4d\xee\x6c\xc7\x7c\x06\xd0\xfa\x47\xa0\x14\xd8\x4a\x2b\x16\x03\xb9\x6e\xa2\x8e\xd1\xf9\xaf\x1c\x9d\xb8\x0e\x81\xe3\x28\x29\x5f\x66\x02\xb9\xc6\x14\x18\x64\x14\x25\x9d\x67\xbe\x39\xd4\x32\xbf\xa5\x15\x92\x8d\x12\x14\xec\x2c\x85\x34\x0d\x94\x9b\x99\xef\x68\x1c\xbd\xc3\x8d\xb7\xf7\x1c\x65\xcc\x49\x81\x54\x39\xba\x99\x45\x5c\x52\x1a\x86\x39\x96\xec\x3d\x75\x9c\x4c\x91\x53\x73\x82\x83\x1d\x98\x66\xa6\x29\xcc\x91\x93\x73\x6c\x39\x25\x8a\xc7\xd3\x52\x50\x54\x69\xc9\x6a\x7e\xaa\xe0\x65\xb7\x7c\x5c\x55\x9e\x74\x09\x9a\x6f\x30\x81\xeb\xa7\x1f\xeb\x9d\xd3\x48\xf6\xde\x98\xc4\x8a\xd2\x83\x63\xe4\x07\x51\x63\xa4\xc5\xdf\x78\x53\xe0\x17\x5c\xe2\xdf\xf7\x33\x84\x01\xd8\xf6\x1e\xbf\x7e\x7f\x85\xc5\xc6\x3f\x73\x9e\x3a\xe4\x66\x91\x2d\x0f\xa2\x78\x67\x5a\x31\x86\x82\x96\x1d\x2b\xa6\xd0\x90\xf2\xf3\xf0\xc4\x53\x1e\x51\x96\xce\x9f\xf8\xca\xc8\xb9\x23\x76\x4d\xc2\xe2\xcd\x6f\x8b\x67\xff\x7c\x0a\x94\x47\x13\x47\x94\xb1\xc5\x3f\x06\x40\xf5\x95\x62\x65\xf3\x63\xae\x1a\xae\xad\x77\x6d\xf5\xf6\x85\x32\x48\x5d\x51\xd0\x6a\x90\xa4\xe9\x5c\xf1\xdd\xf3\x58\xc7\x70\xa6\xbd\x1c\x4f\x29\x56\xa9\xa7\xc8\x55\xe3\xed\x2b\xb3\x23\xb9\x57\x66\x07\x6f\x69\xa8\xde\x9a\xff\x03\x00\x00\xff\xff\x02\x8e\x04\x89\x60\x04\x00\x00")

func imagesBaseCleanInstallBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseCleanInstall,
		"images/base/clean-install",
	)
}

func imagesBaseCleanInstall() (*asset, error) {
	bytes, err := imagesBaseCleanInstallBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/clean-install", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypoint = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x7f\x6f\xdb\x38\x12\xfd\x5f\x9f\xe2\x9d\x1d\xa0\x09\x60\x49\x69\x70\x38\xe0\x72\x6d\x71\xde\x24\x45\x8d\x06\x76\x11\xbb\xdb\x2d\x16\x8b\x94\x12\xc7\xd2\xc0\x12\xa9\x25\x29\xcb\x46\x36\xdf\x7d\x41\xca\x3f\xe2\x76\x17\xd8\xfc\x13\x91\x9c\x1f\x8f\x33\x8f\x6f\x3c\xfc\x57\x9a\xb1\x4a\x33\x61\xcb\x28\x1a\xe2\x46\x37\x5b\xc3\x45\xe9\x70\x75\xf9\xfa\xbf\x58\x94\x84\x8f\x6d\x46\x46\x91\x23\x8b\x71\xeb\x4a\x6d\x6c\x12\x0d\xa3\x21\xee\x39\x27\x65\x49\xa2\x55\x92\x0c\x5c\x49\x18\x37\x22\x2f\x69\x7f\x32\xc2\xcf\x64\x2c\x6b\x85\xab\xe4\x12\xe7\xde\x60\xb0\x3b\x1a\x5c\xfc\x2f\x1a\x62\xab\x5b\xd4\x62\x0b\xa5\x1d\x5a\x4b\x70\x25\x5b\x2c\xb9\x22\xd0\x26\xa7\xc6\x81\x15\x72\x5d\x37\x15\x0b\x95\x13\x3a\x76\x65\x48\xb3\x0b\x92\x44\x43\x7c\xdd\x85\xd0\x99\x13\xac\x20\x90\xeb\x66\x0b\xbd\x7c\x69\x07\xe1\x02\x60\xff\x57\x3a\xd7\x5c\xa7\x69\xd7\x75\x89\x08\x60\x13\x6d\x8a\xb4\xea\x0d\x6d\x7a\x3f\xb9\xb9\x9b\xce\xef\xe2\xab\xe4\x32\xb8\x7c\x56\x15\x59\x0b\x43\xbf\xb7\x6c\x48\x22\xdb\x42\x34\x4d\xc5\xb9\xc8\x2a\x42\x25\x3a\x68\x03\x51\x18\x22\x09\xa7\x3d\xde\xce\xb0\x63\x55\x8c\x60\xf5\xd2\x75\xc2\x50\x34\x84\x64\xeb\x0c\x67\xad\x3b\x29\xd6\x1e\x1d\xdb\x13\x03\xad\x20\x14\x06\xe3\x39\x26\xf3\x01\x7e\x1a\xcf\x27\xf3\x51\x34\xc4\x97\xc9\xe2\xc3\xec\xf3\x02\x5f\xc6\x0f\x0f\xe3\xe9\x62\x72\x37\xc7\xec\x01\x37\xb3\xe9\xed\x64\x31\x99\x4d\xe7\x98\xbd\xc7\x78\xfa\x15\x1f\x27\xd3\xdb\x11\x88\x5d\x49\x06\xb4\x69\x8c\xc7\xaf\x0d\xd8\x97\x91\xa4\xaf\xd9\x9c\xe8\x04\xc0\x52\xf7\x80\x6c\x43\x39\x2f\x39\x47\x25\x54\xd1\x8a\x82\x50\xe8\x35\x19\xc5\xaa\x40\x43\xa6\x66\xeb\x9b\x69\x21\x94\x8c\x86\xa8\xb8\x66\x27\x5c\xd8\xf9\xe1\x52\x49\x14\x59\x72\x88\x35\xc8\x18\xda\xb0\xdb\x2f\x95\x6e\x95\xa5\xc3\xb2\xe1\x86\x96\x82\xab\x28\xca\xb5\x5a\x72\xd1\x1a\x7a\x6c\x8c\xde\x6c\xcf\x2f\xf0\x14\x01\x43\xdc\x6a\xf5\xaa\x67\x47\xd8\x3f\x80\xad\x74\x2e\x2a\x28\x72\x9d\x36\xab\x08\xb8\x9f\xdd\x8c\xef\x1f\xa7\x77\x8b\x2f\xb3\x87\x8f\x6f\xcf\xce\xb9\x81\xd1\xad\x23\x54\x6c\x1d\x24\xad\x41\xae\xbc\xf4\x41\x9c\xc6\xca\x13\xba\xc2\x1f\x10\xdd\x0a\xaf\x9e\xd0\x18\x56\x0e\x67\xaf\xf1\xfc\xea\x22\x8a\x80\x7a\x25\xd9\x20\x6e\x90\x92\xcb\x53\xbb\xb5\x8e\x6a\xb9\xfb\x9f\xe6\x5a\x79\xae\x91\x91\x89\x25\xb3\xe6\x9c\x12\x99\x46\x40\x2e\x1c\xde\xbc\xb9\x9b\xbd\xc7\xbb\x7f\xec\xe6\xe9\x18\x87\x8b\x25\xbe\x00\xd1\xaf\xf3\xfe\xe8\xb7\xe8\x4e\xad\xd9\x68\x55\x93\x72\x6f\x07\x1f\x16\x8b\x4f\x8f\x9f\x1e\x66\xbf\x7c\x7d\x7b\xf6\x74\x5c\x5c\xc7\xcf\x83\x1f\x0d\xe7\x27\x96\xf3\xbf\x33\x9d\xce\x0e\x76\xfb\xcf\xeb\x38\x54\xb5\xd4\xd6\x3d\x8f\xce\x9e\x4e\x4a\xea\xdd\x67\xef\xa3\xe7\x28\x5a\xf2\xe6\xb1\xd6\xad\x72\x87\x1e\x29\xca\xc9\x5a\x61\xb6\xd0\xaa\xda\xa2\x2b\x49\xf9\x8e\x19\x65\x63\x43\xb5\x68\x3c\xc5\x49\xf9\x27\x13\xe8\xed\xdb\xe7\x73\x8c\x90\xb5\x0e\xa5\x30\xb5\x7f\x64\x21\x92\xd7\x9b\x8c\x95\x0f\x15\x64\x29\xe4\x81\x2d\x75\x5b\x49\x64\x04\xdd\xa9\xfe\x15\x1a\xad\x9d\x27\x22\x4a\xb1\xee\xd9\x6c\xc9\xb5\x2c\x91\xb1\xf3\xbd\x28\x75\xa7\x82\xd1\x75\xb0\x3c\x06\x0b\x87\xb5\x96\x88\xed\xcb\xdd\x90\x7d\xd7\xb1\x98\x55\x2c\xe2\x43\xbf\xf6\xe9\x43\x26\x43\x42\xf6\xb7\xf4\x7d\x0d\x5e\xbe\x87\x76\xa7\x29\x4b\xaf\x04\x64\x57\x4e\x37\x41\x58\x3a\x5e\x71\x3a\xdf\x29\xc1\x81\x11\x37\xfb\xd0\x13\xe5\xc8\x2c\x45\x4e\x69\x1f\x49\x77\xb4\x26\x33\x42\x47\x50\x5e\x52\x74\x78\xc5\xae\x64\x55\x58\x2c\x8d\xae\xf1\x4d\xea\x7c\x45\x06\xa6\x55\x88\xe3\xc6\xf0\x9a\x2b\x2a\x48\x7e\x43\x92\x24\x21\x88\x2f\x4a\x2f\xa4\x95\x28\x20\x2a\xab\x51\x8a\xa6\x21\x65\xbd\x42\xd5\x62\x45\x01\x3a\x4c\x37\x82\xa8\xb5\x2a\xac\x3b\xc9\xe3\xe9\x1f\xaa\x1e\x6b\x18\x0a\x9f\x23\xa3\xfb\xeb\xee\xbb\x2f\xf2\x92\x15\x3d\xb2\x3c\x3e\x53\xaa\xc2\x84\xf0\x9d\xd8\x1d\xc7\x2c\x41\x75\x46\x52\x92\xf4\xca\xe8\x8f\x94\x96\x04\xae\xbd\xb6\x78\x9c\x05\x29\x32\xc2\xfb\x09\x28\xea\xa0\x15\x25\x3b\x1e\xb0\xf5\xac\x39\x32\x2b\xa3\x5c\x78\x15\xc8\xb4\x2b\xb1\x6a\x33\x9f\x2f\xc4\xe8\xb1\xfb\x31\xa1\x15\x29\x67\x51\xf1\x8a\xd0\x91\xef\x96\x22\x17\xc2\x79\xc7\x17\xa8\xd8\x97\x5d\x89\xaa\xda\xfa\x92\x78\xf1\x65\x55\xb4\x6c\xcb\x80\xcf\x7a\x08\xa6\x46\xbc\xec\x9f\xff\xd1\x31\xc2\x81\x22\xc7\xcd\xd8\x13\xaf\xd9\x97\xa6\x31\x5a\xb6\xb9\x7b\x54\xa2\xa6\x43\x71\xdc\xee\x36\x02\xb6\x16\x55\x85\x25\x6f\x7c\xe2\x92\x65\x4f\xdd\x20\x9f\xd5\xd6\xeb\x6c\x29\x8c\xf4\x5c\x09\x57\xf3\x76\x6c\x6d\x4b\x18\xfe\xfb\xea\x3f\x27\x64\x2b\xd8\x95\x6d\x96\xe4\xba\x4e\x57\x87\xf9\x1c\x5b\x2e\x6c\xba\x62\x25\xd3\xe0\x66\xd3\xde\x8d\xf2\x52\x63\xe0\xf7\x07\x78\x87\xde\xe0\x25\xd0\x93\x96\xeb\x51\xc6\x4a\xfe\x85\x55\xa0\x40\x9a\x57\xc2\xda\x54\xd6\x9c\xf2\x77\x41\x9e\xfd\xef\x07\xcf\xcb\xc6\x50\xcc\x8a\x9d\xc7\xdf\x36\xf6\x28\x18\xdf\x91\xe7\x87\x82\x7d\x3f\x04\x7c\xc0\x8e\xd0\x09\xe5\x42\x9d\x72\x5d\xd7\xbe\x2e\xe7\xb4\x69\x28\x77\xfd\xcc\xcd\x68\xdf\x94\x8b\xdd\xf2\xd3\xe4\xf6\xb5\x9f\xbf\xa0\x0d\xe5\x61\x2c\xbb\x28\x7c\x0e\xce\xfe\x3f\x88\xfe\x0c\x00\x00\xff\xff\x85\x1a\x0b\x2a\xf1\x08\x00\x00")

func imagesBaseEntrypointBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypoint,
		"images/base/entrypoint",
	)
}

func imagesBaseEntrypoint() (*asset, error) {
	bytes, err := imagesBaseEntrypointBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":    imagesBaseDockerfile,
	"images/base/clean-install": imagesBaseCleanInstall,
	"images/base/entrypoint":    imagesBaseEntrypoint,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile":    {imagesBaseDockerfile, map[string]*bintree{}},
			"clean-install": {imagesBaseCleanInstall, map[string]*bintree{}},
			"entrypoint":    {imagesBaseEntrypoint, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
