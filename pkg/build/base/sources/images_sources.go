// Code generated by go-bindata.
// sources:
// ../../../../images/base/Dockerfile
// ../../../../images/base/entrypoint/main.go
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7b\x6f\xdb\xc6\xb2\xff\x5f\x9f\x62\x40\x19\x89\x9d\x8a\xa4\x63\x27\xa9\xeb\xc2\xb8\x57\xb1\x15\x57\x88\x23\x05\x92\xd2\x20\xe8\x2d\x8c\x25\x39\x22\xf7\x6a\xb9\xcb\xbb\x0f\x29\x4a\xae\xfb\xd9\x0f\x66\xf9\x90\xe4\xa4\xe7\x14\xe8\x39\x41\x00\xdb\xdc\xdd\xd9\x79\xfe\xe6\x37\xdb\x87\x6b\x55\x6d\x35\xcf\x0b\x0b\x67\xa7\xcf\x2f\x60\x51\x20\xbc\x75\x09\x6a\x89\x16\x0d\x0c\x9d\x2d\x94\x36\x51\xaf\xdf\xeb\xc3\x1d\x4f\x51\x1a\xcc\xc0\xc9\x0c\x35\xd8\x02\x61\x58\xb1\xb4\xc0\x76\x65\x00\xbf\xa2\x36\x5c\x49\x38\x8b\x4e\xe1\x98\x36\x04\xcd\x52\x70\xf2\x73\xaf\x0f\x5b\xe5\xa0\x64\x5b\x90\xca\x82\x33\x08\xb6\xe0\x06\x96\x5c\x20\xe0\xe7\x14\x2b\x0b\x5c\x42\xaa\xca\x4a\x70\x26\x53\x84\x0d\xb7\x85\xbf\xa6\x11\x12\xf5\xfa\xf0\xa9\x11\xa1\x12\xcb\xb8\x04\x06\xa9\xaa\xb6\xa0\x96\xfb\xfb\x80\x59\xaf\x30\xfd\x2b\xac\xad\x2e\xe3\x78\xb3\xd9\x44\xcc\x2b\x1b\x29\x9d\xc7\xa2\xde\x68\xe2\xbb\xf1\xf5\x68\x32\x1f\x85\x67\xd1\xa9\x3f\xf2\x41\x0a\x34\x06\x34\xfe\x9f\xe3\x1a\x33\x48\xb6\xc0\xaa\x4a\xf0\x94\x25\x02\x41\xb0\x0d\x28\x0d\x2c\xd7\x88\x19\x58\x45\xfa\x6e\x34\xb7\x5c\xe6\x03\x30\x6a\x69\x37\x4c\x63\xaf\x0f\x19\x37\x56\xf3\xc4\xd9\x03\x67\xb5\xda\x71\x73\xb0\x41\x49\x60\x12\x82\xe1\x1c\xc6\xf3\x00\x5e\x0f\xe7\xe3\xf9\xa0\xd7\x87\x8f\xe3\xc5\x2f\xd3\x0f\x0b\xf8\x38\x9c\xcd\x86\x93\xc5\x78\x34\x87\xe9\x0c\xae\xa7\x93\x9b\xf1\x62\x3c\x9d\xcc\x61\xfa\x06\x86\x93\x4f\xf0\x76\x3c\xb9\x19\x00\x72\x5b\xa0\x06\xfc\x5c\x69\xd2\x5f\x69\xe0\xe4\x46\xcc\xc8\x67\x73\xc4\x03\x05\x96\xaa\x56\xc8\x54\x98\xf2\x25\x4f\x41\x30\x99\x3b\x96\x23\xe4\x6a\x8d\x5a\x72\x99\x43\x85\xba\xe4\x86\x82\x69\x80\xc9\xac\xd7\x07\xc1\x4b\x6e\x99\xf5\x5f\xbe\x31\x2a\xea\xf5\xfa\xb0\xe2\x32\x83\x54\x38\x63\x51\x43\xc2\xc8\xd4\x92\xe5\x38\x80\xc4\x71\x61\xc9\xd0\x5d\x6a\x3d\x35\x90\x61\xc2\x99\x0c\x69\x63\xaf\x0f\x9b\x82\xa7\x05\xf9\x26\x61\x86\xa7\x4c\x88\x2d\x30\x58\xa3\xde\x02\xb9\xaa\xaa\x30\x83\x4c\x6d\x64\x73\xaa\x96\x0c\xc7\x7f\xbc\x38\x7f\xf7\xfa\xa4\xd7\x07\x5b\x30\x0b\xa6\xe0\x95\xa9\xd3\x86\x81\x29\x99\x10\xe0\x2c\x17\xdc\x6e\xe1\x69\x2a\x90\xc9\x90\x4b\x63\x99\x10\x4f\x77\xd7\x91\xac\x0c\x99\x80\x4c\xab\x8a\x02\xba\x54\xba\xd7\x07\x56\xd9\x30\x47\x0b\xae\xca\x98\x45\x78\xf2\xa4\xfb\xd2\x88\x80\xa3\xff\x86\x5e\x1f\x0c\xa2\xcf\x31\x73\x19\xc7\x39\xb7\x85\x4b\xa2\x54\x95\xf1\xaa\x33\x74\xff\x57\xab\x11\xe3\x92\x91\x7f\x62\xf2\x49\x16\x1f\xf8\xa0\xd7\x87\x85\xaa\x8b\x62\x83\xc0\xb2\x0c\xcc\xd6\x58\x2c\xb3\x01\x5c\x4f\xc6\x03\x8a\x03\x28\x1f\x67\xab\x94\x30\x20\x11\xb3\x3a\x0f\xb5\xab\x7d\xcb\xb2\xd2\x8b\x79\xa3\x74\x7b\x16\x7e\x80\x4c\xa5\x2b\xd4\x90\x2a\xb9\xe4\xb9\xd3\x3e\x86\x54\x7f\x19\x24\x28\xd4\x66\xe0\x8d\xa0\x60\x2e\x95\x10\x6a\x43\xe1\xd7\xb8\x44\x8d\x32\x45\x73\xd9\xeb\x77\x06\x52\x15\x2d\x29\xf7\xd1\xac\xac\xaa\x7c\x29\x6d\xf8\x8a\xc7\xf3\x26\xf7\xe3\xe6\xd2\xf8\x5a\x49\xaa\x4f\xd4\x63\x69\x51\x2f\x59\x8a\xf1\x9e\x9c\x0c\xd7\x28\x54\x85\xda\x44\x1a\xb3\x82\x59\xef\xb3\x44\xa8\x3c\x3e\x3b\x7d\xfe\x22\x3e\x7d\x49\xff\xb5\x93\x94\x8a\x61\x23\x33\xa4\xb8\x72\x19\xd6\xd6\x84\x69\x7b\xc3\x5f\x17\xfc\x2a\x3e\xfd\x29\x7e\x7e\xfe\x8d\x60\x2e\x43\x16\x4a\x25\xc3\x4a\xf3\x35\x17\x98\x63\xb6\x2f\x9e\xc2\x32\xbd\x99\x1e\x27\x28\x6d\x81\x28\x32\xd4\x27\x97\x54\x6a\x42\x69\x04\xe3\xaa\x4a\x69\x82\x80\x26\x36\x4c\xa7\x05\x9a\x01\x8c\x47\xed\x5a\x0d\x95\xb3\xeb\x5f\x80\xe9\x3c\x6a\xc2\x23\xd5\xa6\x0e\x35\x37\x60\x2c\x17\x82\x32\x71\x38\xbb\x05\xa3\x28\xfa\x29\x93\xa0\x91\x40\x92\xd3\x79\xad\x5c\x5e\x28\x57\x8b\xf2\xa9\x43\x25\xc3\xad\xff\x46\xf6\x72\xe3\x55\xa0\xcd\xca\x6f\xea\x0c\x88\x7a\x24\x95\xae\xbf\x0a\x58\x99\xbd\x7a\x11\xf8\x0f\xaf\x87\xf3\xd1\xfd\xf8\xdd\xf0\x76\x74\xff\xeb\x68\x36\x1f\x4f\x27\x57\xc1\x69\x74\x1e\x9d\x3d\x5e\xbe\x0a\x56\x17\x26\xca\x53\x1d\x71\xb5\x9f\xaf\xe1\xd1\x57\x12\xfa\x70\x79\xf4\xf5\x5b\x59\x0f\x41\xef\xcd\x6c\xfa\x0e\xf6\xd7\x1e\xc8\x93\x93\xe9\x62\x74\x59\x3b\xa3\x74\xc6\x42\x82\x90\xe1\x92\x4b\xcc\x80\xe5\x1e\xd1\x97\x84\x1e\x74\x78\x3f\xae\x2a\x35\x51\x1d\x78\x1f\x51\x94\x39\x97\x18\x77\x59\x5a\x57\x13\xea\xb8\x6f\x52\x55\xe1\xb7\x16\xfb\x4a\xb5\xde\x45\x37\xa3\xd7\xe3\xe1\xe4\xfe\xcd\x6c\x3a\x59\x8c\x26\x37\x57\x52\x49\x4e\x49\xca\x52\xcb\xd7\x08\xc6\xaa\xca\x80\x51\x25\x52\xc5\xc3\x86\x79\x3c\x34\x83\x2e\x58\xd4\xbc\x08\x20\x40\x13\x6a\x30\x9d\xbb\x12\xa5\x1d\xc0\x06\x9f\x6a\x84\x63\x96\x9c\x38\x43\xf7\x90\x0e\x56\x01\x41\x06\x03\x8b\x65\xa5\x34\xd3\x5b\x18\x4d\x7e\xad\x2d\xad\xe3\xf2\xcf\xb5\xe9\xf5\xe1\x16\x2d\x64\x58\xa1\xcc\x50\xa6\x1c\x0d\x65\x23\xe5\x40\x07\xaf\xc0\x84\x46\x96\x6d\xa1\x60\xe6\x12\x8c\x29\x06\xa4\xf8\x00\x8c\x64\x55\xe6\x77\xd7\x7a\x27\x5a\xad\x50\xd6\x20\xca\xa5\x55\x54\xd8\x21\x54\x2c\x5d\xb1\x1c\x09\x4c\x52\x34\x86\x34\xa4\xf6\xd0\x80\x1c\xd9\x51\xbb\xfd\xf1\xe6\x7d\xe4\x31\xa8\xd7\x3c\x45\x03\xc7\x4d\x45\x9d\x7c\x77\x37\xc9\x6d\xa0\x28\x86\x62\x5b\xa1\x26\x68\x84\x18\x76\x08\xe9\xbb\xbf\x92\x28\xad\xf1\x22\x4a\x6e\xd2\x9d\x9c\xe3\x1a\xcc\x39\x7a\x7c\xf4\xb5\x21\x41\x39\x0d\x64\x12\x41\x22\x97\xf9\x49\xed\x1f\xe9\x6b\x88\x20\xdf\x55\x70\xac\xb1\x54\x6b\xb2\xc5\xc9\x0d\x93\xd4\x74\x5b\x70\x6c\x55\x3f\xf9\xcf\xa1\xd3\xec\xc3\x04\x0e\x9a\x0f\xfc\x4f\xcf\x53\x13\xdf\x51\xac\x66\xd2\x10\x48\x84\xfe\x7a\x48\x59\x98\xa2\xb6\xd4\x96\x99\x77\x88\xd3\xa2\xa3\x16\x61\xa5\x49\x2f\xf2\x40\x98\xaa\xb2\x54\x12\x72\xe9\xaa\xfc\x0c\x84\x49\x42\x8d\x02\x29\x2b\x5a\xf1\x9d\x8d\x8d\x86\x66\x6b\xd6\xdd\x22\xaf\x2c\x51\x1a\x03\xbc\xd2\xca\x59\x3c\x03\xb4\x05\xf9\x10\x8c\x4a\x99\xf5\x7d\x33\x14\x5c\xba\xcf\x50\x2a\x27\x2d\x60\xd2\x1c\x70\x19\xae\x61\x55\xaa\x0c\x98\x5b\x9a\xb0\x6e\x45\xad\xd8\x84\x99\x02\xb4\xd9\xca\xb4\xf9\xf4\xe4\x09\x2c\x89\x16\xc4\x82\x27\x5d\x77\xa8\x7f\xd2\x0f\x2e\xb9\x8d\x2c\xd3\x39\xda\x88\x42\x63\x62\x08\x25\x2b\x11\x82\x56\x6b\x5b\x56\xc4\x10\x4d\x68\xd0\xba\x2a\x6a\x02\x16\x40\x98\xa1\x40\x8b\xbb\x6b\x74\x09\xe1\xf2\xbb\xf7\x94\x4e\x58\x1e\x3a\x83\xfa\xf0\xaa\x67\xdf\x1c\x46\x9b\x3e\x3e\xfc\xec\x4f\x37\x7f\xe7\x26\xa1\x52\x26\xc2\xa5\xf9\x57\xf7\x7c\xcf\x19\x94\x38\xf6\xf1\x49\x72\xf6\xdf\x38\x4e\xee\x4d\xad\xf8\x4b\x12\x3c\xef\x7a\x74\x9e\x70\x73\xdc\x64\x6d\x9d\xd9\x83\x86\x39\x51\x4d\x1b\x02\x80\x82\x55\x15\xb6\xb0\xbd\xc1\x8e\x1e\x79\x04\x6d\x78\x79\x57\xc1\x2c\x51\x1e\xd4\x08\xbd\x3c\xf3\xfd\x33\x80\x6f\xa4\xc4\x3e\x03\xe3\xb6\xa8\x30\x76\x89\x93\xd6\xc5\x7d\x83\x36\x74\x55\x68\x0b\x0c\x35\x56\xca\x70\xab\xf4\x96\x50\x59\x66\x9d\xcc\x1d\xac\xf8\xce\xa5\x52\x13\xfb\x1c\x8a\xb9\x6c\x01\xd5\xb6\x17\x85\xab\x9a\x3d\xc5\xfd\x1d\xf2\x85\x7b\xc8\x47\x28\x5e\xff\xf9\xd4\xc0\xed\xfb\x5b\x58\xe1\xd6\x2f\x10\x4b\xf3\xd4\x89\xcb\x1c\x75\xa5\xb9\xb4\x07\xdf\x0f\xb4\x0b\x5b\x3a\xe9\x01\x9a\x3f\x72\x6c\x03\x57\x5d\x93\x7c\xfe\x63\x74\x7a\x4e\xc8\xad\x96\x4b\x9e\x72\x4f\x89\x1b\x46\x51\x4f\x26\x7b\x83\x5a\xea\xb4\x46\x69\xc5\x76\xd0\xf0\x87\x8a\xcb\x9a\x09\x30\x1b\xed\x61\xdb\x77\x7c\x62\x99\x59\x99\xd8\x97\xf1\x37\xde\xa8\x5b\xd4\xf4\xfa\xed\x68\xb6\x63\x09\x5e\xaf\xe8\xec\x8f\x14\xc3\xd3\x3f\x1a\x42\x60\xac\x46\x9b\x16\x81\x0f\x41\xc3\x51\xbb\x96\x87\x72\x3d\xf0\x6d\xf3\x51\xcf\x8c\xba\x9e\xec\x7b\xab\x55\xc0\x80\x68\xd8\x17\xd4\x0a\xd6\x4c\x38\x4a\x15\xc3\x85\xe7\xa1\x0d\x2f\xae\xdb\x31\x2c\xb5\x2a\x3d\x7e\xae\x70\x4b\x8d\x2c\xf8\x58\x2f\x5c\xb6\x1f\x41\x39\x5b\x39\x1a\x09\x94\x13\x99\xbf\x3d\xa1\x44\xd4\x94\x78\xc7\xc6\x66\x44\x9c\x9a\x6e\x4e\xed\x59\x97\x5c\x32\x71\x52\x93\x9f\xe1\xfb\xc5\xfd\xdb\xd1\xa7\xfb\x9b\xe9\x64\x71\xff\x71\x38\x9b\xdc\x4f\x27\xf7\x37\xc3\xc9\xed\x68\x36\xfd\x30\xbf\xff\x30\xf7\xb4\x68\xc9\x84\xc1\xa0\xc6\x77\x42\xe9\x70\x69\xe6\x77\x10\xec\x52\x7a\x23\x85\x62\xd9\x7e\x5a\xd7\xe9\x7c\x74\x1c\xd5\x50\xa3\x4c\x0b\xda\x3f\x03\xa6\x85\x82\xe0\x68\x7c\x13\x9c\xc4\x79\x95\x07\xf0\xff\x9d\x29\x94\x4b\xe1\xae\x84\xdb\xcf\x7b\x29\x07\xa7\xa3\xd7\x6f\xae\x6f\x2e\x2e\x76\xbb\x6a\xfa\xd3\x70\xb4\x80\x64\x84\x74\x70\x97\x8f\x1d\x66\x03\x04\x19\x26\xf0\x1b\x11\xd7\xab\xe6\xc0\xef\xf0\xf7\xcd\x80\xa3\x63\x61\x92\xfb\xb6\x2d\x85\xa9\x39\x01\xe3\x9b\x48\xb0\x53\xf3\xb0\x33\x06\x5d\xa5\x5f\x1d\x7d\x3d\xcc\xbb\x87\x60\x1f\x8c\xae\x27\x63\x48\xb8\x64\x9a\xc8\x80\x55\x10\xab\xca\xc6\xa9\xe4\x71\xc2\xe5\xf7\xf9\x7a\xa6\x52\xd8\x14\x5b\x88\x61\x43\xa3\x62\x81\xba\xa6\x89\xd7\x93\xf1\x3e\x01\x7e\x15\x9d\x06\xdd\xf7\xc5\x70\xf6\x7a\x78\x77\x77\x15\xa4\x92\x87\x95\x70\x39\x97\xa6\xa5\xbd\xe1\xfa\xe8\xeb\xde\xd9\x87\xc8\xe6\x5f\x76\x27\x3d\xeb\xfd\x30\xbb\xbb\xea\xd2\xc1\x58\xa5\x59\x8e\x51\xae\x54\x2e\x90\x55\xdc\x3c\x1a\x14\x5b\x1f\xc6\x12\xed\x46\xe9\x55\x7b\x61\xbc\x93\xea\x05\xd6\xd7\xb6\x17\x3c\xd4\x7f\x36\x9a\x3e\xec\xa7\x23\x65\x63\x18\x6a\xb4\x7a\x0b\x2f\x21\x0c\x9b\x8a\x88\x6d\x59\x91\xab\x48\x61\x68\xa4\x91\xa0\xbd\xa0\x98\x82\x9d\xbd\x7c\x65\x5c\x79\xb8\xb9\x5b\x2f\x57\x19\xd7\x10\x56\x07\x6e\xdf\x2d\x5b\xa6\x21\xbc\x3e\x5c\x0c\x3f\x7f\x59\x1e\x48\xa3\x68\x5a\xa4\x46\xd1\xd0\x14\x3f\xc1\x73\x5f\x94\x5c\xb6\x44\xf1\x98\x5b\xd8\xd0\x70\x94\x16\x98\xae\xba\x97\x8b\x8e\x5e\x11\xb6\x9c\xfc\xdb\x26\x54\xe2\xe6\x3b\xd1\x1d\xfc\xb7\x1a\xe2\x67\x6e\x0d\x75\xad\xf9\xf8\x76\xb6\x78\x37\x9e\xfc\x70\x5e\xe3\xda\x7c\x7c\xbb\x18\xcd\xde\xc1\x71\xdd\x1b\x35\x86\xf8\x19\x53\x47\xc0\xcc\xed\xbe\x7a\x89\xcb\xbf\x70\x21\xd8\x3e\xb1\x34\x85\xda\xdc\x27\x2e\x8f\xd2\x9c\xff\x17\xcf\xae\x9e\xd3\xa4\xfa\xf2\xc7\xde\x7c\x31\x7d\x3f\x1f\xdf\x4e\x86\x77\x7b\xf7\x91\xd7\x36\x9a\x55\x9d\x4e\xfe\xb1\x83\x38\xb0\x7f\xcc\x61\x02\x50\x5a\xbd\xad\x14\xa7\x91\x84\xe6\xfa\x6a\x95\xd7\xd3\x91\x77\x5e\xb1\x37\x75\xfa\x57\x99\xba\x19\x37\x0f\x2e\x7e\xe5\x7f\x69\x2c\x13\x68\x0d\x38\x43\x00\x0d\xae\xaa\x9b\x39\xf1\xdb\xdc\x40\x82\x4b\x9a\x7b\xc9\x4f\x5c\x3a\x3f\xf7\xfa\x56\xd3\x68\x54\x3f\xe5\x08\x84\x4a\xa3\x27\x6b\x1e\xde\x99\xed\x34\xe6\x06\xde\x8f\x6f\x9e\xf7\xfa\x9d\x42\x1b\x04\x81\x6b\xa4\xf2\xf0\x2a\xec\x14\x6f\x1e\x93\x7a\xd7\xd3\xf7\x9f\xe0\x37\x08\x76\xc6\xc5\xbb\x5f\x83\x01\x04\xb1\x33\xba\x66\x5f\x94\x6d\x71\x00\xbf\xf7\xfa\xf0\x11\x3d\x4d\xd9\x65\x98\xa2\x1e\x40\x97\xb7\x93\x0b\xe5\xd2\x9a\x69\xae\xbc\xa9\xed\x14\xd3\x36\x64\xaa\x4d\x81\x76\x00\x68\xd3\xe8\xa4\xeb\xcb\xad\xff\x9e\x29\x29\xb6\xcf\xda\xb1\xc6\x77\x34\xff\xb4\x32\xf0\x62\x77\xfa\xf9\x16\xbe\x46\xad\x79\x46\x44\xc9\xd2\xcd\x96\x97\xd8\x1b\x4d\x16\xb3\x4f\xef\xa7\xe3\xc9\x82\x6c\x7b\x64\xc2\x23\xfb\x0c\x7d\x23\x3a\x47\xa6\xfd\x09\xc2\x51\x6f\xf5\xf9\xd0\x1a\xfc\x6e\x78\x4d\xc0\xef\x9f\x04\x99\x31\x3c\x97\xa4\xe4\x5e\x3e\xee\xbd\x58\x1d\xb2\xc1\x2c\xe6\xc6\x38\x34\xf1\xf9\xf9\x8f\x2f\xfa\xfe\x77\x1a\x38\x50\xda\xf0\xec\xe2\xe2\xe2\xe2\xec\xfc\xe5\xcb\xbf\x29\xe7\xfc\xfc\xa7\xb3\x97\x17\x2f\x2e\xce\x7b\xff\x08\x00\x00\xff\xff\xfb\x44\xa2\xb4\x86\x16\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypointMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\x61\x73\xdb\xb8\x11\xfd\x2c\xfc\x8a\x3d\x76\x6e\x2a\xe5\x68\xd2\x92\xcf\x8e\x4f\x4d\x3e\xa8\xb6\x92\x68\xe2\xca\x19\x4b\xa9\x9b\x49\x3d\x09\x08\x2e\x49\x8c\x41\x80\x05\x40\xc9\x6c\x27\xff\xbd\xb3\x20\xed\xc8\xc9\x7d\xb0\x2c\x90\xc0\xdb\xb7\xef\x3d\xac\xd2\x17\xec\xc2\x34\x9d\x95\x65\xe5\x61\x76\x3c\x3d\x87\x6d\x85\xf0\xbe\xcd\xd0\x6a\xf4\xe8\x60\xd1\xfa\xca\x58\x97\x30\x76\x25\x05\x6a\x87\x39\xb4\x3a\x47\x0b\xbe\x42\x58\x34\x5c\x54\x08\xc3\x9b\x18\xfe\x89\xd6\x49\xa3\x61\x96\x1c\xc3\x98\x36\x44\xc3\xab\x68\xf2\x37\xd6\x99\x16\x6a\xde\x81\x36\x1e\x5a\x87\xe0\x2b\xe9\xa0\x90\x0a\x01\x1f\x04\x36\x1e\xa4\x06\x61\xea\x46\x49\xae\x05\xc2\x5e\xfa\x2a\x14\x19\x20\x12\xf6\x69\x00\x30\x99\xe7\x52\x03\x07\x61\x9a\x0e\x4c\x71\xb8\x0b\xb8\x67\x0c\x00\xa0\xf2\xbe\x99\xa7\xe9\x7e\xbf\x4f\x78\x60\x99\x18\x5b\xa6\xaa\xdf\xe5\xd2\xab\xd5\xc5\x72\xbd\x59\x1e\xcd\x92\x63\xc6\x3e\x6a\x85\xce\x81\xc5\xff\xb4\xd2\x62\x0e\x59\x07\xbc\x69\x94\x14\x3c\x53\x08\x8a\xef\xc1\x58\xe0\xa5\x45\xcc\xc1\x1b\xe2\xb9\xb7\xd2\x4b\x5d\xc6\xe0\x4c\xe1\xf7\xdc\x22\xcb\xa5\xf3\x56\x66\xad\x7f\x26\xd0\x23\x2b\xe9\xe0\x70\x83\xd1\xc0\x35\x44\x8b\x0d\xac\x36\x11\xfc\x7d\xb1\x59\x6d\x62\x76\xbb\xda\xbe\xbb\xfe\xb8\x85\xdb\xc5\xcd\xcd\x62\xbd\x5d\x2d\x37\x70\x7d\x03\x17\xd7\xeb\xcb\xd5\x76\x75\xbd\xde\xc0\xf5\x1b\x58\xac\x3f\xc1\xfb\xd5\xfa\x32\x06\x94\xbe\x42\x0b\xf8\xd0\x58\xe2\x6e\x2c\x48\x92\x0e\xf3\x84\x6d\x10\x9f\x15\x2f\x4c\x4f\xc6\x35\x28\x64\x21\x05\x28\xae\xcb\x96\x97\x08\xa5\xd9\xa1\xd5\x52\x97\xd0\xa0\xad\xa5\x23\xf3\x1c\x70\x9d\x33\x25\x6b\xe9\xb9\x0f\xeb\x9f\xda\x49\xd8\x8b\x94\xb1\xf4\x05\xdb\x92\x85\x54\x17\x6b\xd4\xde\x81\x69\x89\x06\x21\xa3\xf6\xb6\x6b\x8c\xd4\x3e\x81\x95\x9f\xb3\x23\xd8\x73\xe9\x5d\xe0\xb2\x59\xbd\xfd\xb8\xb9\x99\xb2\x23\xc2\xd4\x80\x0f\x28\x1c\x8c\xb9\x2d\x77\x9f\xa7\x77\x31\xf4\x5f\xe6\x77\x31\xa0\xde\x7d\x9e\xdf\x4d\x58\x5f\x87\x2b\x65\xf6\x0e\x5a\x47\x1e\x34\x68\x0b\x63\x6b\x30\x41\x05\x2e\x7a\xa6\x52\x07\x9a\x91\x36\x39\x46\x20\x8c\xa6\xa0\xa0\x85\x9d\xe4\xf0\x35\x37\xe2\x3e\x28\x86\xe2\x2b\xfb\x92\x61\x61\x2c\x7e\x81\x3d\x42\xc5\x77\x48\x10\x2d\x57\xaa\x83\x28\x33\xc6\x63\x1e\x05\x24\xa9\xa5\x27\x3d\x00\x77\x68\x3b\x5f\x91\x54\xa8\x28\x66\xca\xe8\xb2\xcf\xa8\xf4\x09\x63\xb7\x08\x82\xeb\xbe\x21\x87\x3a\x7f\x6c\x92\xb8\x86\xa0\x37\xd6\x08\x32\x8a\xd6\x56\x96\x25\x5a\x70\x9e\x5b\x4a\x51\xcf\xb9\x27\x10\xb1\xef\xca\xc1\x9e\xd0\xf6\x08\xdc\x22\xe4\x46\x23\x34\x96\x58\xd7\x74\x86\xeb\x8e\x30\x77\x92\x3c\xa3\x07\xe6\xb0\xf7\x84\xb1\xf5\xf5\x76\x39\xef\x6b\x1f\x9a\x84\x39\x70\x07\x1c\x9c\xd4\xa5\xa2\x04\x4c\x93\x7f\x85\x5b\x18\x43\xeb\x7a\x1c\xd5\xf5\x71\xf1\xb9\x92\x59\xd2\x8b\x5f\xf3\x7b\x74\x20\x3d\x20\x77\x92\xd2\x60\x20\x6b\xa5\xca\xa1\x31\xd6\xf3\x4c\x75\x71\x90\xa9\xb7\x89\x38\x6b\xba\x2c\xe4\xf6\xbe\xe2\x9e\x0e\xe6\x06\xdd\x10\x9c\x14\x96\xdf\x9b\x3c\x88\x0f\x07\x57\xd3\xf1\xc1\xa9\x1f\x93\x04\x9e\xa0\x7e\xce\x51\x9a\x42\xef\x66\xf0\x36\xf4\xe0\x92\x85\x2d\x1d\xa5\x88\x35\x5c\xdc\x13\x4e\xcd\xa5\x66\x4c\xd6\x44\x18\xc6\x6c\x14\x19\x17\x85\xcf\xd4\xc9\x52\x93\xf2\xa3\xc8\x75\x4e\x70\xa5\x22\xc6\x46\x91\x32\x65\xc4\x26\x81\x6d\x87\xae\x17\xd2\x55\xa6\x55\x39\x64\xfd\xfd\x12\x50\x73\x61\x4d\x0c\x59\xeb\x49\x7e\x25\x75\xfb\x40\x19\x1c\xf8\x77\xa6\xfd\xab\x25\x89\x83\xc7\x06\x4a\xf4\x3d\x0c\xd7\x5d\x65\xf6\x84\x3c\x4c\xa9\x9a\xeb\x97\xc3\x7c\xd2\xed\x03\x2d\x8f\x1a\x5e\xa2\x0b\x2f\x06\x7e\xc9\xcb\xa4\xf2\xb5\x7a\x3c\xe5\xe6\x69\x5a\x4a\x5f\xb5\x59\x22\x4c\x9d\xd6\x26\xeb\xfa\x8f\x4c\x99\x2c\x3d\x3d\x9b\xe5\xc5\xb9\x98\xe5\x67\xc5\xef\xe7\x67\xc7\x53\x71\x9e\x4f\xf3\xe2\xe5\xec\xf4\xec\xe4\xfc\x8f\xd3\xb3\x3f\xf2\xd9\xa9\x38\xce\x8a\x69\xda\xdc\x97\x03\xfe\xf0\xef\x4b\xa0\x90\x94\xe6\x2f\x57\xd3\x63\x26\x8c\x76\x1e\x9c\x2c\xad\xaf\xa5\x86\xd7\x70\xf2\x3b\x63\x45\xab\x45\x90\x73\x3c\x81\xff\xb1\x51\x9a\x52\x2e\x77\xa8\x3d\xfc\xd7\xd4\x99\xc4\xc7\xac\xa3\xa3\x94\xd1\x28\xa7\x69\xae\x14\xe9\xf6\x61\x75\x39\x0d\xe6\x71\xd8\x57\x52\x61\x38\xfe\xd8\x4f\x5f\x3a\x97\x98\x68\xf4\xd4\x7b\x3a\x4b\xc9\xee\x46\xe6\x6c\x34\xa8\xb0\x2a\xb5\xb1\x38\x1e\x9c\x4a\x36\xab\xb7\x17\xef\xae\x2e\x27\x2c\x00\x95\x96\x67\xfd\x2d\xb0\xc8\x55\x74\x98\x1d\x61\xea\x9a\x12\x1a\xfe\x6c\xe9\xa0\xb0\xa6\x0e\x03\x8b\x56\x6c\x24\x0b\x50\xa8\xc7\x43\x72\x26\xf0\x0a\x66\xd4\xdc\x48\x99\x32\x79\xc3\x3d\x57\xe3\x68\x6d\x3c\xa0\x36\x6d\x59\xd1\x99\xb6\xcf\xac\x37\x07\x55\x7e\x89\x26\x6c\xf4\x8d\x8d\x44\x9d\xf7\x73\x0c\xe6\xaf\xbf\x87\xf1\x2e\x7e\x16\xcc\xc0\x98\xda\x3b\x0c\x33\x8c\x0d\x8d\x28\x19\x02\xb5\x59\xbd\xbd\xd9\xfe\x63\xb5\xfe\xed\x84\xca\xd4\xdc\x8b\x0a\x5c\xe7\x3c\xd6\xf9\x84\x8d\x04\x81\xd3\xbd\x1c\x8b\x8a\x6b\x82\xde\x04\x89\x62\x98\x4e\x9e\xe4\x5a\x1b\x2f\x8b\x6e\x2c\x62\x38\x50\x8c\x0a\x1d\x3c\x08\x3b\xc7\x8f\x26\xff\x76\x32\x99\xb0\xd0\xf6\x07\x2b\xb5\x57\x7a\x1c\xdd\xf2\xf0\x6b\xf7\x8c\x67\x92\x24\x51\x5f\x86\x68\xbc\x3a\x12\x41\x42\x5a\xfe\xf2\xfa\xc7\x5a\x4f\x42\x06\xc4\x62\x1c\x2d\x1f\x7a\x40\x5e\x78\x9a\x83\x81\xc0\x1c\x7e\xdd\xd1\xd9\xe1\x4c\x14\xd3\xf3\x09\x1b\x8d\x2c\xfa\xd6\x6a\xd2\x35\x28\xf6\xf4\x9b\xd1\x8f\xd6\x3f\xf1\x3a\x86\x7b\xc4\xe6\x71\xb0\xa2\xde\xb1\x67\xc5\x6f\x50\xa0\xdc\xe1\xd3\x88\x8e\x9f\xc6\x86\x37\x81\xc4\xaf\xbb\x7f\xeb\x28\x86\x27\x13\xa9\xcd\xa1\xa1\xe5\x03\x8a\xf1\xd3\x8b\xe0\xe7\x52\xef\xa4\x35\x7a\x3c\x99\xb0\x6f\xec\xff\x01\x00\x00\xff\xff\x39\x8f\xbf\x84\x4f\x09\x00\x00")

func imagesBaseEntrypointMainGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypointMainGo,
		"images/base/entrypoint/main.go",
	)
}

func imagesBaseEntrypointMainGo() (*asset, error) {
	bytes, err := imagesBaseEntrypointMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint/main.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":         imagesBaseDockerfile,
	"images/base/entrypoint/main.go": imagesBaseEntrypointMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile": {imagesBaseDockerfile, map[string]*bintree{}},
			"entrypoint": {nil, map[string]*bintree{
				"main.go": {imagesBaseEntrypointMainGo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
