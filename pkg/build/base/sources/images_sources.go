// Code generated by go-bindata.
// sources:
// ../../../../images/base/Dockerfile
// ../../../../images/base/entrypoint/main.go
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7d\x6f\xdb\x38\xd2\xff\xdf\x9f\x62\x20\x07\x6d\xd2\xb5\xa4\x34\x69\xbb\xd9\x2c\x82\xe7\x71\x13\x37\x6b\xb4\xb5\x0b\xdb\xdd\xa2\xd8\x5b\x04\x94\x34\x96\x78\xa6\x48\x1d\x5f\xec\xba\xbd\xec\x67\x3f\x0c\xf5\x62\x3b\x6d\xef\x16\xd8\xbb\xa2\x40\x12\x91\x1c\xce\xeb\x6f\x7e\xc3\x3e\x5c\xab\x6a\xab\x79\x5e\x58\x38\x3b\x7d\x7a\x01\x8b\x02\xe1\xb5\x4b\x50\x4b\xb4\x68\x60\xe8\x6c\xa1\xb4\x89\x7a\xfd\x5e\x1f\xde\xf0\x14\xa5\xc1\x0c\x9c\xcc\x50\x83\x2d\x10\x86\x15\x4b\x0b\x6c\x57\x06\xf0\x2b\x6a\xc3\x95\x84\xb3\xe8\x14\x8e\x69\x43\xd0\x2c\x05\x27\x3f\xf7\xfa\xb0\x55\x0e\x4a\xb6\x05\xa9\x2c\x38\x83\x60\x0b\x6e\x60\xc9\x05\x02\x7e\x4a\xb1\xb2\xc0\x25\xa4\xaa\xac\x04\x67\x32\x45\xd8\x70\x5b\xf8\x6b\x1a\x21\x51\xaf\x0f\x1f\x1b\x11\x2a\xb1\x8c\x4b\x60\x90\xaa\x6a\x0b\x6a\xb9\xbf\x0f\x98\xf5\x0a\xd3\xbf\xc2\xda\xea\x32\x8e\x37\x9b\x4d\xc4\xbc\xb2\x91\xd2\x79\x2c\xea\x8d\x26\x7e\x33\xbe\x1e\x4d\xe6\xa3\xf0\x2c\x3a\xf5\x47\xde\x4b\x81\xc6\x80\xc6\x7f\x38\xae\x31\x83\x64\x0b\xac\xaa\x04\x4f\x59\x22\x10\x04\xdb\x80\xd2\xc0\x72\x8d\x98\x81\x55\xa4\xef\x46\x73\xcb\x65\x3e\x00\xa3\x96\x76\xc3\x34\xf6\xfa\x90\x71\x63\x35\x4f\x9c\x3d\x70\x56\xab\x1d\x37\x07\x1b\x94\x04\x26\x21\x18\xce\x61\x3c\x0f\xe0\xe5\x70\x3e\x9e\x0f\x7a\x7d\xf8\x30\x5e\xfc\x32\x7d\xbf\x80\x0f\xc3\xd9\x6c\x38\x59\x8c\x47\x73\x98\xce\xe0\x7a\x3a\xb9\x19\x2f\xc6\xd3\xc9\x1c\xa6\xaf\x60\x38\xf9\x08\xaf\xc7\x93\x9b\x01\x20\xb7\x05\x6a\xc0\x4f\x95\x26\xfd\x95\x06\x4e\x6e\xc4\x8c\x7c\x36\x47\x3c\x50\x60\xa9\x6a\x85\x4c\x85\x29\x5f\xf2\x14\x04\x93\xb9\x63\x39\x42\xae\xd6\xa8\x25\x97\x39\x54\xa8\x4b\x6e\x28\x98\x06\x98\xcc\x7a\x7d\x10\xbc\xe4\x96\x59\xff\xe5\x2b\xa3\xa2\x5e\xaf\x0f\x2b\x2e\x33\x48\x85\x33\x16\x35\x24\x8c\x4c\x2d\x59\x8e\x03\x48\x1c\x17\x96\x0c\xdd\xa5\xd6\x63\x03\x19\x26\x9c\xc9\x90\x36\xf6\xfa\xb0\x29\x78\x5a\x90\x6f\x12\x66\x78\xca\x84\xd8\x02\x83\x35\xea\x2d\x90\xab\xaa\x0a\x33\xc8\xd4\x46\x36\xa7\x6a\xc9\x70\xfc\xc7\xb3\xf3\xb7\x2f\x4f\x7a\x7d\xb0\x05\xb3\x60\x0a\x5e\x99\x3a\x6d\x18\x98\x92\x09\x01\xce\x72\xc1\xed\x16\x1e\xa7\x02\x99\x0c\xb9\x34\x96\x09\xf1\x78\x77\x1d\xc9\xca\x90\x09\xc8\xb4\xaa\x28\xa0\x4b\xa5\x7b\x7d\x60\x95\x0d\x73\xb4\xe0\xaa\x8c\x59\x84\x47\x8f\xba\x2f\x8d\x08\x38\xfa\x7f\xe8\xf5\xc1\x20\xfa\x1c\x33\x97\x71\x9c\x73\x5b\xb8\x24\x4a\x55\x19\xaf\x3a\x43\xf7\x7f\xb5\x1a\x31\x2e\x19\xf9\x27\x26\x9f\x64\xf1\x81\x0f\x7a\x7d\x58\xa8\xba\x28\x36\x08\x2c\xcb\xc0\x6c\x8d\xc5\x32\x1b\xc0\xf5\x64\x3c\xa0\x38\x80\xf2\x71\xb6\x4a\x09\x03\x12\x31\xab\xf3\x50\xbb\xda\xb7\x2c\x2b\xbd\x98\x57\x4a\xb7\x67\xe1\x07\xc8\x54\xba\x42\x0d\xa9\x92\x4b\x9e\x3b\xed\x63\x48\xf5\x97\x41\x82\x42\x6d\x06\xde\x08\x0a\xe6\x52\x09\xa1\x36\x14\x7e\x8d\x4b\xd4\x28\x53\x34\x97\xbd\x7e\x67\x20\x55\xd1\x92\x72\x1f\xcd\xca\xaa\xca\x97\xd2\x86\xaf\x78\x3c\x6f\x72\x3f\x6e\x2e\x8d\xaf\x95\xa4\xfa\x44\x3d\x96\x16\xf5\x92\xa5\x18\xef\xc9\xc9\x70\x8d\x42\x55\xa8\x4d\xa4\x31\x2b\x98\xf5\x3e\x4b\x84\xca\xe3\xb3\xd3\xa7\xcf\xe2\xd3\xe7\xf4\x5f\x3b\x49\xa9\x18\x36\x32\x43\x8a\x2b\x97\x61\x6d\x4d\x98\xb6\x37\xfc\x79\xc1\x2f\xe2\xd3\x9f\xe2\xa7\xe7\x5f\x09\xe6\x32\x64\xa1\x54\x32\xac\x34\x5f\x73\x81\x39\x66\xfb\xe2\x29\x2c\xd3\x9b\xe9\x71\x82\xd2\x16\x88\x22\x43\x7d\x72\x49\xa5\x26\x94\x46\x30\xae\xaa\x94\x26\x08\x68\x62\xc3\x74\x5a\xa0\x19\xc0\x78\xd4\xae\xd5\x50\x39\xbb\xfe\x05\x98\xce\xa3\x26\x3c\x52\x6d\xea\x50\x73\x03\xc6\x72\x21\x28\x13\x87\xb3\x5b\x30\x8a\xa2\x9f\x32\x09\x1a\x09\x24\x39\x9d\xd7\xca\xe5\x85\x72\xb5\x28\x9f\x3a\x54\x32\xdc\xfa\x6f\x64\x2f\x37\x5e\x05\xda\xac\xfc\xa6\xce\x80\xa8\x47\x52\xe9\xfa\xab\x80\x95\xd9\x8b\x67\x81\xff\xf0\x72\x38\x1f\xdd\x8d\xdf\x0e\x6f\x47\x77\xbf\x8e\x66\xf3\xf1\x74\x72\x15\x9c\x46\xe7\xd1\xd9\xc3\xe5\xab\x60\x75\x61\xa2\x3c\xd5\x11\x57\xfb\xf9\x1a\x1e\x7d\x21\xa1\xf7\x97\x47\x5f\xbe\x96\x75\x1f\xf4\x5e\xcd\xa6\x6f\x61\x7f\xed\x9e\x3c\x39\x99\x2e\x46\x97\xb5\x33\x4a\x67\x2c\x24\x08\x19\x2e\xb9\xc4\x0c\x58\xee\x11\x7d\x49\xe8\x41\x87\xf7\xe3\xaa\x52\x13\xd5\x81\xf7\x11\x45\x99\x73\x89\x71\x97\xa5\x75\x35\xa1\x8e\xfb\x26\x55\x15\x7e\x6d\xb1\xaf\x54\xeb\x5d\x74\x33\x7a\x39\x1e\x4e\xee\x5e\xcd\xa6\x93\xc5\x68\x72\x73\x25\x95\xe4\x94\xa4\x2c\xb5\x7c\x8d\x60\xac\xaa\x0c\x18\x55\x22\x55\x3c\x6c\x98\xc7\x43\x33\xe8\x82\x45\xcd\x8b\x00\x02\x34\xa1\x06\xd3\xb9\x2b\x51\xda\x01\x6c\xf0\xb1\x46\x38\x66\xc9\x89\x33\x74\x0f\xe9\x60\x15\x10\x64\x30\xb0\x58\x56\x4a\x33\xbd\x85\xd1\xe4\xd7\xda\xd2\x3a\x2e\xff\x5e\x9b\x5e\x1f\x6e\xd1\x42\x86\x15\xca\x0c\x65\xca\xd1\x50\x36\x52\x0e\x74\xf0\x0a\x4c\x68\x64\xd9\x16\x0a\x66\x2e\xc1\x98\x62\x40\x8a\x0f\xc0\x48\x56\x65\x7e\x77\xad\x77\xa2\xd5\x0a\x65\x0d\xa2\x5c\x5a\x45\x85\x1d\x42\xc5\xd2\x15\xcb\x91\xc0\x24\x45\x63\x48\x43\x6a\x0f\x0d\xc8\x91\x1d\xb5\xdb\x1f\x6e\xde\x47\x1e\x83\x7a\xcd\x53\x34\x70\xdc\x54\xd4\xc9\x37\x77\x93\xdc\x06\x8a\x62\x28\xb6\x15\x6a\x82\x46\x88\x61\x87\x90\xbe\xfb\x2b\x89\xd2\x1a\x2f\xa2\xe4\x26\xdd\xc9\x39\xae\xc1\x9c\xa3\xc7\x47\x5f\x1b\x12\x94\xd3\x40\x26\x11\x24\x72\x99\x9f\xd4\xfe\x91\xbe\x86\x08\xf2\x5d\x05\xc7\x1a\x4b\xb5\x26\x5b\x9c\xdc\x30\x49\x4d\xb7\x05\xc7\x56\xf5\x93\xff\x1d\x3a\xcd\xde\x4f\xe0\xa0\xf9\xc0\xdf\x7a\x9e\x9a\xf8\x8e\x62\x35\x93\x86\x40\x22\xf4\xd7\x43\xca\xc2\x14\xb5\xa5\xb6\xcc\xbc\x43\x9c\x16\x1d\xb5\x08\x2b\x4d\x7a\x91\x07\xc2\x54\x95\xa5\x92\x90\x4b\x57\xe5\x67\x20\x4c\x12\x6a\x14\x48\x59\xd1\x8a\xef\x6c\x6c\x34\x34\x5b\xb3\xee\x16\x79\x65\x89\xd2\x18\xe0\x95\x56\xce\xe2\x19\xa0\x2d\xc8\x87\x60\x54\xca\xac\xef\x9b\xa1\xe0\xd2\x7d\x82\x52\x39\x69\x01\x93\xe6\x80\xcb\x70\x0d\xab\x52\x65\xc0\xdc\xd2\x84\x75\x2b\x6a\xc5\x26\xcc\x14\xa0\xcd\x56\xa6\xcd\xa7\x47\x8f\x60\x49\xb4\x20\x16\x3c\xe9\xba\x43\xfd\x93\x7e\x70\xc9\x6d\x64\x99\xce\xd1\x46\x14\x1a\x13\x43\x28\x59\x89\x10\xb4\x5a\xdb\xb2\x22\x86\x68\x42\x83\xd6\x55\x51\x13\xb0\x00\xc2\x0c\x05\x5a\xdc\x5d\xa3\x4b\x08\x97\xdf\xbc\xa7\x74\xc2\xf2\xd0\x19\xd4\x87\x57\x3d\xf9\xea\x30\xda\xf4\xe1\xe1\x27\xdf\xdd\xfc\x8d\x9b\x84\x4a\x99\x08\x97\xe6\x3f\xdd\xf3\x2d\x67\x50\xe2\xd8\x87\x27\xc9\xd9\x7f\xe1\x38\xb9\x37\xb5\xe2\x4f\x49\xf0\xbc\xeb\xc1\x79\xc2\xcd\x71\x93\xb5\x75\x66\x0f\x1a\xe6\x44\x35\x6d\x08\x00\x0a\x56\x55\xd8\xc2\xf6\x06\x3b\x7a\xe4\x11\xb4\xe1\xe5\x5d\x05\xb3\x44\x79\x50\x23\xf4\xf2\xcc\xf7\x7b\x00\xdf\x48\x89\x7d\x06\xc6\x6d\x51\x61\xec\x12\x27\xad\x8b\xfb\x06\x6d\xe8\xaa\xd0\x16\x18\x6a\xac\x94\xe1\x56\xe9\x2d\xa1\xb2\xcc\x3a\x99\x3b\x58\xf1\x9d\x4b\xa5\x26\xf6\x39\x14\x73\xd9\x02\xaa\x6d\x2f\x0a\x57\x35\x7b\x8a\xfb\x3b\xe4\x0b\xf7\x90\x8f\x50\xbc\xfe\xf3\xb1\x81\xdb\x77\xb7\xb0\xc2\xad\x5f\x20\x96\xe6\xa9\x13\x97\x39\xea\x4a\x73\x69\x0f\xbe\x1f\x68\x17\xb6\x74\xd2\x03\x34\x7f\xe0\xd8\x06\xae\xba\x26\xf9\xf4\xc7\xe8\xf4\x9c\x90\x5b\x2d\x97\x3c\xe5\x9e\x12\x37\x8c\xa2\x9e\x4c\xf6\x06\xb5\xd4\x69\x8d\xd2\x8a\xed\xa0\xe1\x0f\x15\x97\x35\x13\x60\x36\xda\xc3\xb6\x6f\xf8\xc4\x32\xb3\x32\xb1\x2f\xe3\xaf\xbc\x51\xb7\xa8\xe9\xf5\xeb\xd1\x6c\xc7\x12\xbc\x5e\xd1\xd9\x1f\x29\x86\xa7\x7f\x34\x84\xc0\x58\x8d\x36\x2d\x02\x1f\x82\x86\xa3\x76\x2d\x0f\xe5\x7a\xe0\xdb\xe6\x83\x9e\x19\x75\x3d\xd9\xf7\x56\xab\x80\x01\xd1\xb0\xcf\xa8\x15\xac\x99\x70\x94\x2a\x86\x0b\xcf\x43\x1b\x5e\x5c\xb7\x63\x58\x6a\x55\x7a\xfc\x5c\xe1\x96\x1a\x59\xf0\xa1\x5e\xb8\x6c\x3f\x82\x72\xb6\x72\x34\x12\x28\x27\x32\x7f\x7b\x42\x89\xa8\x29\xf1\x8e\x8d\xcd\x88\x38\x35\xdd\x9c\xda\xb3\x2e\xb9\x64\xe2\xa4\x26\x3f\xc3\x77\x8b\xbb\xd7\xa3\x8f\x77\x37\xd3\xc9\xe2\xee\xc3\x70\x36\xb9\x9b\x4e\xee\x6e\x86\x93\xdb\xd1\x6c\xfa\x7e\x7e\xf7\x7e\xee\x69\xd1\x92\x09\x83\x41\x8d\xef\x84\xd2\xe1\xd2\xcc\xdf\x40\xb0\x4b\xe9\x8d\x14\x8a\x65\xfb\x69\x5d\xa7\xf3\xd1\x71\x54\x43\x8d\x32\x2d\x68\xff\x0c\x98\x16\x0a\x82\xa3\xf1\x4d\x70\x12\xe7\x55\x1e\xc0\x3f\x3b\x53\x28\x97\xc2\x5d\x09\xb7\x9f\xf7\x52\x0e\x4e\x47\x2f\x5f\x5d\xdf\x5c\x5c\xec\x76\xd5\xf4\xa7\xe1\x68\x01\xc9\x08\xe9\xe0\x2e\x1f\x3b\xcc\x06\x08\x32\x4c\xe0\x37\x22\xae\x57\xcd\x81\xdf\xe1\xaf\x9b\x01\x47\xc7\xc2\x24\x77\x6d\x5b\x0a\x53\x73\x02\xc6\x37\x91\x60\xa7\xe6\x61\x67\x0c\xba\x4a\xbf\x3a\xfa\x72\x98\x77\xf7\xc1\x3e\x18\x5d\x4f\xc6\x90\x70\xc9\x34\x91\x01\xab\x20\x56\x95\x8d\x53\xc9\xe3\x84\xcb\x6f\xf3\xf5\x4c\xa5\xb0\x29\xb6\x10\xc3\x86\x46\xc5\x02\x75\x4d\x13\xaf\x27\xe3\x7d\x02\xfc\x22\x3a\x0d\xba\xef\x8b\xe1\xec\xe5\xf0\xcd\x9b\xab\x20\x95\x3c\xac\x84\xcb\xb9\x34\x2d\xed\x0d\xd7\x47\x5f\xf6\xce\xde\x47\x36\xff\xbc\x3b\xe9\x59\xef\xfb\xd9\x9b\xab\x2e\x1d\x8c\x55\x9a\xe5\x18\xe5\x4a\xe5\x02\x59\xc5\xcd\x83\x41\xb1\xf5\x61\x2c\xd1\x6e\x94\x5e\xb5\x17\xc6\x3b\xa9\x5e\x60\x7d\x6d\x7b\xc1\x7d\xfd\x67\xa3\xe9\xfd\x7e\x3a\x52\x36\x86\xa1\x46\xab\xb7\xf0\x1c\xc2\xb0\xa9\x88\xd8\x96\x15\xb9\x8a\x14\x86\x46\x1a\x09\xda\x0b\x8a\x29\xd8\xd9\xf3\x17\xc6\x95\x87\x9b\xbb\xf5\x72\x95\x71\x0d\x61\x75\xe0\xf6\xdd\xb2\x65\x1a\xc2\xeb\xc3\xc5\xf0\xd3\xe7\xe5\x77\xa4\x51\x4b\xd2\x87\x8b\x14\x6a\x8b\xd4\x45\x1a\x0e\xe3\xc7\x7b\xee\x2b\x96\xcb\x96\x45\x1e\x73\x0b\x1b\x9a\x9c\xd2\x02\xd3\x55\xf7\xac\xd1\x71\x2f\x02\x9e\x93\xff\xda\xf8\x4a\xc4\x7d\x27\xba\xeb\x0d\xad\x86\xf8\x89\x5b\x43\x2d\x6d\x3e\xbe\x9d\x2d\xde\x8e\x27\x3f\x9c\xd7\xa0\x37\x1f\xdf\x2e\x46\xb3\xb7\x70\x5c\x37\x4e\x8d\x21\x7e\xc2\xd4\x11\x6a\x73\xbb\xaf\x5e\xe2\xf2\xcf\x5c\x08\xb6\xcf\x3a\x4d\xa1\x36\x77\x89\xcb\xa3\x34\xe7\xff\xc7\xb3\xab\xa7\x34\xc6\x3e\xff\xb1\x37\x5f\x4c\xdf\xcd\xc7\xb7\x93\xe1\x9b\xbd\xfb\xc8\x6b\x1b\xcd\xaa\x4e\x27\xff\x12\x42\x04\xd9\xbf\xf4\x30\x01\x28\xad\xde\x56\x8a\xd3\xbc\x42\x43\x7f\xb5\xca\xeb\xd1\xc9\x3b\xaf\xd8\x1b\x49\xfd\x93\x4d\xdd\xa9\x9b\xd7\x18\xbf\xf2\x77\x9a\xd9\x04\x5a\x03\xce\x10\x7a\x83\xab\xea\x4e\x4f\xe4\x37\x37\x90\xe0\x92\x86\x62\xf2\x13\x97\xce\x0f\xc5\xbe\x0f\x35\x1a\xd5\xef\x3c\x02\xa1\xd2\xe8\x99\x9c\xc7\x7e\x66\x3b\x8d\xb9\x81\x77\xe3\x9b\xa7\xbd\x7e\xa7\xd0\x06\x41\xe0\x1a\xa9\x76\xbc\x0a\x3b\xc5\x9b\x97\xa6\xde\xf5\xf4\xdd\x47\xf8\x0d\x82\x9d\x71\xf1\xee\xd7\x60\x00\x41\xec\x8c\xae\xa9\x19\xa5\x62\x1c\xc0\xef\xbd\x3e\x7c\x40\xcf\x61\x76\x19\xa6\xa8\x41\xd0\xe5\xed\x58\x43\xb9\xb4\x66\x9a\x2b\x6f\x6a\x3b\xe2\xb4\xdd\x9a\x0a\x57\xa0\x1d\x00\xda\x34\x3a\xe9\x9a\x76\xeb\xbf\x27\x4a\x8a\xed\x93\x76\xe6\xf1\xed\xce\xbf\xbb\x0c\xbc\xd8\x9d\x7e\xbe\xbf\xaf\x51\x6b\x9e\x65\x44\xa3\x2c\x5d\x6d\x79\x89\xbd\xd1\x64\x31\xfb\xf8\x6e\x3a\x9e\x2c\xc8\xb8\x07\x36\x3c\x30\xd0\xd0\x37\x22\x7b\x64\xdb\x77\xf0\x8f\x3a\xaf\x4f\x88\xd6\xe2\xb7\xc3\x6b\x6a\x0b\xfe\xc1\x90\x19\xc3\x73\x49\x5a\xee\x25\xe4\xde\x7b\xd6\x21\x57\xcc\x62\x6e\x8c\x43\x13\x9f\x9f\xff\xf8\xac\xef\x7f\xa7\x71\x04\xa5\x0d\xcf\x2e\x2e\x2e\x2e\xce\xce\x9f\x3f\xff\x8b\x72\xce\xcf\x7f\x3a\x7b\x7e\xf1\xec\xe2\xbc\xf7\xaf\x00\x00\x00\xff\xff\x54\xea\x00\x9b\xa4\x16\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypointMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\x61\x73\xdb\xb8\x11\xfd\x2c\xfc\x8a\x3d\x76\x6e\x2a\xe5\x68\xd2\x92\xcf\x8e\x4f\x4d\x3e\xa8\xb6\x92\x68\xe2\xca\x19\x4b\xa9\x9b\x49\x3d\x09\x08\x2e\x49\x8c\x41\x80\x05\x40\xc9\x6c\x27\xff\xbd\xb3\x20\xed\xc8\xc9\x7d\xb0\x2c\x90\xc0\xdb\xb7\xef\x3d\xac\xd2\x17\xec\xc2\x34\x9d\x95\x65\xe5\x61\x76\x3c\x3d\x87\x6d\x85\xf0\xbe\xcd\xd0\x6a\xf4\xe8\x60\xd1\xfa\xca\x58\x97\x30\x76\x25\x05\x6a\x87\x39\xb4\x3a\x47\x0b\xbe\x42\x58\x34\x5c\x54\x08\xc3\x9b\x18\xfe\x89\xd6\x49\xa3\x61\x96\x1c\xc3\x98\x36\x44\xc3\xab\x68\xf2\x37\xd6\x99\x16\x6a\xde\x81\x36\x1e\x5a\x87\xe0\x2b\xe9\xa0\x90\x0a\x01\x1f\x04\x36\x1e\xa4\x06\x61\xea\x46\x49\xae\x05\xc2\x5e\xfa\x2a\x14\x19\x20\x12\xf6\x69\x00\x30\x99\xe7\x52\x03\x07\x61\x9a\x0e\x4c\x71\xb8\x0b\xb8\x67\x0c\x00\xa0\xf2\xbe\x99\xa7\xe9\x7e\xbf\x4f\x78\x60\x99\x18\x5b\xa6\xaa\xdf\xe5\xd2\xab\xd5\xc5\x72\xbd\x59\x1e\xcd\x92\x63\xc6\x3e\x6a\x85\xce\x81\xc5\xff\xb4\xd2\x62\x0e\x59\x07\xbc\x69\x94\x14\x3c\x53\x08\x8a\xef\xc1\x58\xe0\xa5\x45\xcc\xc1\x1b\xe2\xb9\xb7\xd2\x4b\x5d\xc6\xe0\x4c\xe1\xf7\xdc\x22\xcb\xa5\xf3\x56\x66\xad\x7f\x26\xd0\x23\x2b\xe9\xe0\x70\x83\xd1\xc0\x35\x44\x8b\x0d\xac\x36\x11\xfc\x7d\xb1\x59\x6d\x62\x76\xbb\xda\xbe\xbb\xfe\xb8\x85\xdb\xc5\xcd\xcd\x62\xbd\x5d\x2d\x37\x70\x7d\x03\x17\xd7\xeb\xcb\xd5\x76\x75\xbd\xde\xc0\xf5\x1b\x58\xac\x3f\xc1\xfb\xd5\xfa\x32\x06\x94\xbe\x42\x0b\xf8\xd0\x58\xe2\x6e\x2c\x48\x92\x0e\xf3\x84\x6d\x10\x9f\x15\x2f\x4c\x4f\xc6\x35\x28\x64\x21\x05\x28\xae\xcb\x96\x97\x08\xa5\xd9\xa1\xd5\x52\x97\xd0\xa0\xad\xa5\x23\xf3\x1c\x70\x9d\x33\x25\x6b\xe9\xb9\x0f\xeb\x9f\xda\x49\xd8\x8b\x94\xb1\xf4\x05\xdb\x92\x85\x54\x17\x6b\xd4\xde\x81\x69\x89\x06\x21\xa3\xf6\xb6\x6b\x8c\xd4\x3e\x81\x95\x9f\xb3\x23\xd8\x73\xe9\x5d\xe0\xb2\x59\xbd\xfd\xb8\xb9\x99\xb2\x23\xc2\xd4\x80\x0f\x28\x1c\x8c\xb9\x2d\x77\x9f\xa7\x77\x31\xf4\x5f\xe6\x77\x31\xa0\xde\x7d\x9e\xdf\x4d\x58\x5f\x87\x2b\x65\xf6\x0e\x5a\x47\x1e\x34\x68\x0b\x63\x6b\x30\x41\x05\x2e\x7a\xa6\x52\x07\x9a\x91\x36\x39\x46\x20\x8c\xa6\xa0\xa0\x85\x9d\xe4\xf0\x35\x37\xe2\x3e\x28\x86\xe2\x2b\xfb\x92\x61\x61\x2c\x7e\x81\x3d\x42\xc5\x77\x48\x10\x2d\x57\xaa\x83\x28\x33\xc6\x63\x1e\x05\x24\xa9\xa5\x27\x3d\x00\x77\x68\x3b\x5f\x91\x54\xa8\x28\x66\xca\xe8\xb2\xcf\xa8\xf4\x09\x63\xb7\x08\x82\xeb\xbe\x21\x87\x3a\x7f\x6c\x92\xb8\x86\xa0\x37\xd6\x08\x32\x8a\xd6\x56\x96\x25\x5a\x70\x9e\x5b\x4a\x51\xcf\xb9\x27\x10\xb1\xef\xca\xc1\x9e\xd0\xf6\x08\xdc\x22\xe4\x46\x23\x34\x96\x58\xd7\x74\x86\xeb\x8e\x30\x77\x92\x3c\xa3\x07\xe6\xb0\xf7\x84\xb1\xf5\xf5\x76\x39\xef\x6b\x1f\x9a\x84\x39\x70\x07\x1c\x9c\xd4\xa5\xa2\x04\x4c\x93\x7f\x85\x5b\x18\x43\xeb\x7a\x1c\xd5\xf5\x71\xf1\xb9\x92\x59\xd2\x8b\x5f\xf3\x7b\x74\x20\x3d\x20\x77\x92\xd2\x60\x20\x6b\xa5\xca\xa1\x31\xd6\xf3\x4c\x75\x71\x90\xa9\xb7\x89\x38\x6b\xba\x2c\xe4\xf6\xbe\xe2\x9e\x0e\xe6\x06\xdd\x10\x9c\x14\x96\xdf\x9b\x3c\x88\x0f\x07\x57\xd3\xf1\xc1\xa9\x1f\x93\x04\x9e\xa0\x7e\xce\x51\x9a\x42\xef\x66\xf0\x36\xf4\xe0\x92\x85\x2d\x1d\xa5\x88\x35\x5c\xdc\x13\x4e\xcd\xa5\x66\x4c\xd6\x44\x18\xc6\x6c\x14\x19\x17\x85\xcf\xd4\xc9\x52\x93\xf2\xa3\xc8\x75\x4e\x70\xa5\x22\xc6\x46\x91\x32\x65\xc4\x26\x81\x6d\x87\xae\x17\xd2\x55\xa6\x55\x39\x64\xfd\xfd\x12\x50\x73\x61\x4d\x0c\x59\xeb\x49\x7e\x25\x75\xfb\x40\x19\x1c\xf8\x77\xa6\xfd\xab\x25\x89\x83\xc7\x06\x4a\xf4\x3d\x0c\xd7\x5d\x65\xf6\x84\x3c\x4c\xa9\x9a\xeb\x97\xc3\x7c\xd2\xed\x03\x2d\x8f\x1a\x5e\xa2\x0b\x2f\x06\x7e\xc9\xcb\xa4\xf2\xb5\x7a\x3c\xe5\xe6\x69\x5a\x4a\x5f\xb5\x59\x22\x4c\x9d\xd6\x26\xeb\xfa\x8f\x4c\x99\x2c\x3d\x3d\x9b\xe5\xc5\xb9\x98\xe5\x67\xc5\xef\xe7\x67\xc7\x53\x71\x9e\x4f\xf3\xe2\xe5\xec\xf4\xec\xe4\xfc\x8f\xd3\xb3\x3f\xf2\xd9\xa9\x38\xce\x8a\x69\xda\xdc\x97\x03\xfe\xf0\xef\x4b\xa0\x90\x94\xe6\x2f\x57\xd3\x63\x26\x8c\x76\x1e\x9c\x2c\xad\xaf\xa5\x86\xd7\x70\xf2\x3b\x63\x45\xab\x45\x90\x73\x3c\x81\xff\xb1\x51\x9a\x52\x2e\x77\xa8\x3d\xfc\xd7\xd4\x99\xc4\xc7\xac\xa3\xa3\x94\xd1\x28\xa7\x69\xae\x14\xe9\xf6\x61\x75\x39\x0d\xe6\x71\xd8\x57\x52\x61\x38\xfe\xd8\x4f\x5f\x3a\x97\x98\x68\xf4\xd4\x7b\x3a\x4b\xc9\xee\x46\xe6\x6c\x34\xa8\xb0\x2a\xb5\xb1\x38\x1e\x9c\x4a\x36\xab\xb7\x17\xef\xae\x2e\x27\x2c\x00\x95\x96\x67\xfd\x2d\xb0\xc8\x55\x74\x98\x1d\x61\xea\x9a\x12\x1a\xfe\x6c\xe9\xa0\xb0\xa6\x0e\x03\x8b\x56\x6c\x24\x0b\x50\xa8\xc7\x43\x72\x26\xf0\x0a\x66\xd4\xdc\x48\x99\x32\x79\xc3\x3d\x57\xe3\x68\x6d\x3c\xa0\x36\x6d\x59\xd1\x99\xb6\xcf\xac\x37\x07\x55\x7e\x89\x26\x6c\xf4\x8d\x8d\x44\x9d\xf7\x73\x0c\xe6\xaf\xbf\x87\xf1\x2e\x7e\x16\xcc\xc0\x98\xda\x3b\x0c\x33\x8c\x0d\x8d\x28\x19\x02\xb5\x59\xbd\xbd\xd9\xfe\x63\xb5\xfe\xed\x84\xca\xd4\xdc\x8b\x0a\x5c\xe7\x3c\xd6\xf9\x84\x8d\x04\x81\xd3\xbd\x1c\x8b\x8a\x6b\x82\xde\x04\x89\x62\x98\x4e\x9e\xe4\x5a\x1b\x2f\x8b\x6e\x2c\x62\x38\x50\x8c\x0a\x1d\x3c\x08\x3b\xc7\x8f\x26\xff\x76\x32\x99\xb0\xd0\xf6\x07\x2b\xb5\x57\x7a\x1c\xdd\xf2\xf0\x6b\xf7\x8c\x67\x92\x24\x51\x5f\x86\x68\xbc\x3a\x12\x41\x42\x5a\xfe\xf2\xfa\xc7\x5a\x4f\x42\x06\xc4\x62\x1c\x2d\x1f\x7a\x40\x5e\x78\x9a\x83\x81\xc0\x1c\x7e\xdd\xd1\xd9\xe1\x4c\x14\xd3\xf3\x09\x1b\x8d\x2c\xfa\xd6\x6a\xd2\x35\x28\xf6\xf4\x9b\xd1\x8f\xd6\x3f\xf1\x3a\x86\x7b\xc4\xe6\x71\xb0\xa2\xde\xb1\x67\xc5\x6f\x50\xa0\xdc\xe1\xd3\x88\x8e\x9f\xc6\x86\x37\x81\xc4\xaf\xbb\x7f\xeb\x28\x86\x27\x13\xa9\xcd\xa1\xa1\xe5\x03\x8a\xf1\xd3\x8b\xe0\xe7\x52\xef\xa4\x35\x7a\x3c\x99\xb0\x6f\xec\xff\x01\x00\x00\xff\xff\x39\x8f\xbf\x84\x4f\x09\x00\x00")

func imagesBaseEntrypointMainGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypointMainGo,
		"images/base/entrypoint/main.go",
	)
}

func imagesBaseEntrypointMainGo() (*asset, error) {
	bytes, err := imagesBaseEntrypointMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint/main.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":         imagesBaseDockerfile,
	"images/base/entrypoint/main.go": imagesBaseEntrypointMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile": {imagesBaseDockerfile, map[string]*bintree{}},
			"entrypoint": {nil, map[string]*bintree{
				"main.go": {imagesBaseEntrypointMainGo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
