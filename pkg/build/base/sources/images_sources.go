// Code generated by go-bindata.
// sources:
// ../../../../images/base/Dockerfile
// ../../../../images/base/clean-install
// ../../../../images/base/entrypoint
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7b\x6f\xdb\x46\x12\xff\x5f\x9f\x62\x20\x05\x8d\xed\x8a\xa4\x9f\xb5\xe3\xab\x73\x50\x1c\x25\x15\x6a\x4b\x81\xa4\xb4\x08\x7a\x45\xb0\x5c\x8e\xc8\xad\x96\xbb\xbc\x7d\x48\x56\xd2\x7c\xf7\xc3\x2c\xa9\x87\x1d\xa7\xe9\xa1\xad\x61\x40\x12\x77\x76\xde\xf3\x9b\x19\x76\xe0\x5a\x57\x2b\x23\xf2\xc2\xc1\xf1\xe1\xd1\x05\x4c\x0b\x84\x1f\x7d\x8a\x46\xa1\x43\x0b\x3d\xef\x0a\x6d\x6c\xdc\xea\xb4\x3a\x70\x23\x38\x2a\x8b\x19\x78\x95\xa1\x01\x57\x20\xf4\x2a\xc6\x0b\x5c\x9f\x74\xe1\x27\x34\x56\x68\x05\xc7\xf1\x21\xec\x11\x41\xbb\x39\x6a\xef\xff\xab\xd5\x81\x95\xf6\x50\xb2\x15\x28\xed\xc0\x5b\x04\x57\x08\x0b\x33\x21\x11\xf0\x8e\x63\xe5\x40\x28\xe0\xba\xac\xa4\x60\x8a\x23\x2c\x85\x2b\x82\x98\x86\x49\xdc\xea\xc0\xbb\x86\x85\x4e\x1d\x13\x0a\x18\x70\x5d\xad\x40\xcf\x76\xe9\x80\xb9\xa0\x30\xfd\x15\xce\x55\x97\x49\xb2\x5c\x2e\x63\x16\x94\x8d\xb5\xc9\x13\x59\x13\xda\xe4\x66\x70\xdd\x1f\x4e\xfa\xd1\x71\x7c\x18\xae\xbc\x55\x12\xad\x05\x83\xff\xf5\xc2\x60\x06\xe9\x0a\x58\x55\x49\xc1\x59\x2a\x11\x24\x5b\x82\x36\xc0\x72\x83\x98\x81\xd3\xa4\xef\xd2\x08\x27\x54\xde\x05\xab\x67\x6e\xc9\x0c\xb6\x3a\x90\x09\xeb\x8c\x48\xbd\xbb\xe7\xac\xb5\x76\xc2\xde\x23\xd0\x0a\x98\x82\x76\x6f\x02\x83\x49\x1b\x5e\xf4\x26\x83\x49\xb7\xd5\x81\x9f\x07\xd3\x1f\x46\x6f\xa7\xf0\x73\x6f\x3c\xee\x0d\xa7\x83\xfe\x04\x46\x63\xb8\x1e\x0d\x5f\x0e\xa6\x83\xd1\x70\x02\xa3\x57\xd0\x1b\xbe\x83\x1f\x07\xc3\x97\x5d\x40\xe1\x0a\x34\x80\x77\x95\x21\xfd\xb5\x01\x41\x6e\xc4\x8c\x7c\x36\x41\xbc\xa7\xc0\x4c\xd7\x0a\xd9\x0a\xb9\x98\x09\x0e\x92\xa9\xdc\xb3\x1c\x21\xd7\x0b\x34\x4a\xa8\x1c\x2a\x34\xa5\xb0\x14\x4c\x0b\x4c\x65\xad\x0e\x48\x51\x0a\xc7\x5c\x78\xf2\x99\x51\x71\xab\xd5\x81\xb9\x50\x19\x70\xe9\xad\x43\x03\x29\x23\x53\x4b\x96\x63\x70\xec\x2b\x6d\xc0\xae\xac\xc3\x32\x83\x6f\x21\xd3\x7c\x8e\x06\xb8\x56\x33\x91\x7b\x13\xb8\x52\x46\x64\x90\xa2\xd4\xcb\x2e\xd8\x46\xe5\x99\x96\x52\x2f\x49\x21\x83\x33\x34\xa8\x38\xda\xcb\x56\x27\x84\xd5\x36\x71\x9d\x51\x34\xd0\xce\x9d\xae\x42\x70\x97\x62\x2e\x92\x49\x13\x8d\xa4\x11\x9a\x5c\x6b\x45\x19\x83\x66\xa0\x1c\x9a\x19\xe3\x98\xec\xf0\xc9\x70\x81\x52\x57\x68\x6c\x6c\x30\x2b\x98\x8b\xb9\x2e\x93\x54\xea\x3c\x39\x3e\x3c\x3a\x4d\x0e\xcf\xe8\xdf\x78\x45\xce\x89\x1a\x9e\x11\x25\xa8\x50\x51\x6d\x4d\xc4\xd7\x12\xfe\x3c\xe3\xef\x92\xc3\x67\xc9\xd1\xc9\x67\x8c\x85\x8a\x58\xa4\xb4\x8a\x2a\x23\x16\x42\x62\x8e\xd9\x2e\xfb\x56\x6f\xfc\x9a\x32\xa5\xff\x7e\x70\xdb\x7b\xdd\xbf\x6a\xfb\xd4\x2b\xe7\x2f\x8f\x9e\xc5\x87\xa7\xed\xd6\xab\xf1\xe8\x16\x9e\x7c\xdc\x12\x7c\xa2\xe8\x58\x74\x94\xa8\xf0\xb2\xff\x62\xd0\x1b\xbe\x7f\x35\x1e\x0d\xa7\xfd\xe1\xcb\x2b\xa5\x95\x20\x97\x30\xee\xc4\x02\xc1\x3a\x5d\x59\xb0\xba\x44\x60\x95\x83\x25\x0b\xf9\x60\xbb\x75\xb1\x0a\x1b\x8a\xb7\xd5\x01\x06\x06\x99\x04\x66\x72\x5f\xa2\x72\x5d\x58\xe2\x53\x83\xb0\xc7\xd2\x7d\x6f\x49\x0e\xe9\xe8\x34\xe4\xe8\x80\x81\xc3\xb2\xd2\x86\x99\x15\xf4\x87\x3f\x01\xcb\x99\x50\x71\xb0\xe2\x8f\xb5\x69\xb5\xae\x47\x6f\xde\x01\x97\xc8\x54\x24\x94\x75\x4c\x4a\x48\xbc\x35\x89\xd4\x9c\xc9\x24\x15\x2a\xb9\x77\xd8\x1a\xbf\x1d\x02\x2f\x4a\x9d\xc1\xb7\x77\x7f\x4c\xd9\xea\xc0\x6b\x74\x90\x61\x85\x2a\x43\xc5\x05\xda\x56\x27\x00\xe0\x36\x75\x81\x49\x83\x2c\x5b\x41\xc1\xec\x25\x58\x5b\x74\xc9\x29\x5d\xb0\x8a\x55\x59\xa0\xae\x7d\x92\x1a\x3d\x47\x05\x99\x5e\x2a\x10\xca\x69\xd8\x43\xc6\x8b\x50\xda\x20\x85\xc2\x7d\xca\xd9\x08\x2a\xc6\xe7\x2c\x47\x0b\x8a\x32\x36\x20\x88\xf1\x0a\x2c\x9a\x85\xe0\x68\x61\xaf\x89\xff\x7e\xa0\xbe\x1e\x0f\x60\x6f\x13\xf5\xe6\xe1\x43\x16\x54\xcb\xf3\x2d\x60\x13\x7a\x6a\x85\xca\xd9\x40\x5d\x0a\xcb\xb7\x57\x42\x7d\x7a\x8b\x16\x84\xb3\x28\x67\xb5\xb9\x0a\x96\x58\x7b\xd8\x57\xb0\x67\xb0\xd4\x0b\x0a\x9f\x57\x4b\xa6\x08\x9f\xd6\x55\xbb\xd6\x72\x7f\xe7\x5a\x26\x6c\x00\xc6\x79\x69\x73\x02\xc3\xdf\xb4\x37\x8a\xc9\x2c\x80\xbf\x45\x90\x3a\x07\x54\xce\x08\xb4\xb0\xd4\x5e\x52\x7d\x87\xaa\x0f\x29\xb2\x1f\x90\xe1\xe0\x2b\x7f\xdf\x4f\xfb\xb7\x6f\x46\xe3\xde\xf8\xdd\xf3\xaf\x91\x1e\x1c\x1c\x04\x96\x3f\x07\xf0\xa8\xe3\x21\x35\xcb\xa8\x4d\x38\x03\xa9\x50\x94\x81\xa1\xad\x30\x70\x42\xad\x80\x65\x99\x20\xf0\x61\x12\x66\xc8\x9c\x0f\xf0\xbd\xc4\xa6\x3b\x31\xb7\x4e\xf8\x15\x3a\x28\xd1\xe4\x98\x41\xb2\x76\x68\x56\xb7\xc5\x09\xe2\xe5\xa6\xdc\x73\xe1\x0a\x9f\x86\x1a\xdf\x46\x6e\xf7\x6b\xe5\xa5\x4c\x4e\x8e\xcf\x9e\x85\xbb\x21\x7f\x1a\xb5\xe8\x9b\x17\xd2\xd5\xfa\x15\x8c\xcf\x13\xfa\x9d\x25\xdc\x19\x02\x88\xd8\x16\x24\x4d\x7b\x43\x18\xf8\x98\xc4\x17\xa8\xa6\x05\xf6\x65\x86\x66\x57\xa4\x33\x88\x09\xc5\xbe\xd5\x81\xde\xd6\x5e\xae\xcb\x52\xb8\x5d\x30\xfd\x3a\xab\xfa\x4e\xc2\xd3\x73\x7e\x7e\x71\xc8\x66\xc7\x27\xcf\x4e\x59\x7a\x78\x91\x9d\x65\x17\xec\xe4\xd9\xc9\x31\x67\xe7\xa7\x27\xe7\x87\xe7\xa7\x0c\x8f\xce\x1b\x1b\x47\x2f\x47\x7b\x29\x2a\x57\x20\x12\xbf\xfd\x4b\x08\x49\xd6\xb4\x7f\x4d\x9d\x3e\x8a\x94\x8e\xbc\x22\xc7\x92\x1f\xd6\x0e\x06\x5f\x59\x67\x90\x95\xf1\x9f\xc9\x94\xef\x93\xff\x3f\x53\xfe\x21\xfc\x0f\x28\x74\x0f\xb4\xfe\xd3\x0a\xe3\xc8\xb6\x9a\x1a\x16\x76\x65\x17\x20\x45\xda\xfc\x3e\xdc\x10\x6e\xbd\xbe\xfb\x48\x39\x13\x7c\x54\x39\xaa\x3b\x0b\xa2\x32\xda\x3b\x3c\x06\x74\x85\xd3\x5a\x82\xd5\x9c\x39\xf0\x4e\xc8\x48\x0a\xe5\xef\xa0\xd4\x5e\x39\xc0\xb4\xb9\xe0\x33\x5c\xc0\x9c\xf0\x71\xcd\x35\x65\xb6\x00\xce\x22\x8e\xc6\xd1\x34\xc0\x02\x8e\x78\x23\xc1\xd8\x95\xe2\x0d\xdd\x37\xdf\xc0\x8c\xe0\x23\x91\x22\xdd\xf4\xd4\xfa\x93\x3e\x84\x12\x2e\x76\xcc\xe4\xe8\x62\xc2\x0d\x9b\x40\xa4\x58\x89\xd0\x5e\x1b\xea\xca\x8a\x26\x3d\x1b\x59\x74\xbe\x8a\x1b\x34\x69\x43\x94\xa1\x44\x87\x5b\x31\xa6\x84\x68\xf6\xa8\x9c\xd2\x4b\x27\x22\x6f\xd1\xdc\x17\x75\xf0\xd9\x65\x74\xfc\xe1\xe5\x83\x2f\x12\x3f\x22\x29\xf4\x8c\x68\x66\xbf\x26\xe7\x31\x67\x50\x32\xb8\x87\x37\xc9\xed\x7f\xe1\x3a\xb9\x97\x3b\xf9\xa7\x38\xa4\xcc\x0a\xfe\x45\xc5\x91\x17\x1a\xda\x63\x64\xd9\x8f\xb7\x36\xbf\x52\xba\x0d\xcf\x9f\xdf\x77\xd8\x1a\xc4\x63\x02\xea\xed\xcd\xfa\x98\x3b\x09\xa8\x02\xe8\x7f\x96\xa1\xc4\xfe\xae\xd2\xc6\x41\x6f\x7c\xfd\xc3\xd5\x93\xbd\xac\x9a\xe7\x10\xd1\x10\xa3\x5c\xc4\x0c\x2f\x84\x43\x4e\x20\x0b\xbf\x03\x0d\x7b\x4f\x6d\x52\x55\xfc\xbb\x53\x94\xf5\xa7\xc4\xe4\xe9\xfe\x96\x59\x48\xc2\x68\x36\xb9\x81\x48\x7f\xd6\xcb\x9d\xd9\x64\x70\x7b\x5d\xc5\xd6\x69\xc3\x72\x8c\x73\xad\x73\x89\xac\x12\xb6\x2e\xe3\x2d\xf8\x44\x84\x83\x51\x86\x8b\x5d\x54\x0b\x85\x92\x3c\xf9\x48\x5a\x7f\x22\xce\xed\x1d\x1d\xbe\x34\x4b\x6c\xe4\x6f\x9c\x9a\x69\x85\xd0\xd4\x7b\x18\xa1\x9b\xbe\xdb\xa6\x51\x23\xc3\xd4\xe7\xbb\x2e\x5b\x34\xab\x12\xa3\x99\xd9\x20\x73\x08\x19\xce\x98\x97\xae\x19\x8b\x69\xc6\xda\xa0\xb5\x5c\x75\x37\xcd\x36\xcc\x66\x95\xf4\xb9\x50\x36\x34\x61\xad\x9e\xd6\xfb\x54\x02\xd6\x57\x14\x80\x1a\x80\xb6\xc2\xa2\x68\x2d\x6e\xa3\x73\x39\xcf\x84\x81\xa8\xaa\x63\xff\x68\x2c\xc9\xaa\xa7\x8d\xd4\xec\xfd\x5a\xe2\x15\xfc\xd2\x66\x7e\x66\xdb\x5d\x68\xa7\xce\xd4\x5f\x3e\xcc\x6c\xfb\xd7\xa7\xf0\xfc\x21\xb7\xa4\xb6\x25\x76\xba\x94\x3b\x4e\xdd\x4a\xab\xcf\x37\xa6\x3f\xff\x43\x0e\xe4\xc8\x41\x03\xa8\xd7\xc3\x41\xdd\x39\x69\xb6\x70\x1a\x12\x5d\xb9\x84\x2b\x41\xd1\x79\xbc\xeb\x64\x9a\xc3\xb2\x58\x41\x02\x4b\xea\xec\x05\x1a\x0c\x23\xe8\xf5\x70\xf0\xfe\xa7\xfe\x78\x32\x18\x0d\xaf\xda\x87\xf1\x79\x7c\xd6\xde\x3c\x0f\x33\xf4\xdb\xf1\xcd\xd5\xd7\x72\x6c\x3b\x83\x45\x06\x25\x32\x8b\x89\x42\xb7\xd4\x66\x1e\x35\x8e\x4b\xda\x21\x2a\x7f\x6b\x85\x34\xcc\x48\xd3\x69\x6f\xfc\xa2\x77\x73\x73\xd5\xe6\x4a\xac\x45\x46\x4d\x4e\x47\x8b\x27\x1f\x77\xac\xfc\x14\xbb\xfc\x43\xfb\x51\x2e\xc1\xd4\x9a\x78\x6d\xfa\xa7\xfa\x67\xc3\xff\x53\xfb\x61\x7d\x5a\xaa\xcf\xc8\xa0\x33\x2b\x38\x83\x28\xd2\xde\x55\xde\x41\xe2\xca\x8a\xe2\x41\xb2\xa0\x61\x49\xdc\x76\xee\xdb\x82\x1d\x9f\x7d\x67\x7d\x79\x9f\xf8\x91\x14\xdd\x89\xed\xf6\xd8\x31\x03\xd1\xf5\xfd\xc3\xe8\xee\xc3\xec\x0b\xdc\x08\x31\xcd\xfd\xc3\xdd\x7c\xe2\x46\x10\xb6\xb9\x87\x48\x53\xa7\xc2\x78\x70\x3d\xbd\xd9\x66\xc9\xe2\x28\x3e\x3a\x8d\x0f\xff\x81\x88\x6e\x31\xaf\xfd\xc8\x58\xb6\x93\x65\x56\xe4\x36\xe1\x46\x44\xd4\xf6\x6d\xd2\x24\x9d\x4d\xd6\x33\x6f\xf2\xe4\xe3\x7d\xad\x3f\x25\xb5\x89\xd1\x67\x07\xf5\xa4\xb0\x4e\x16\x6a\x1d\x31\xe5\xc7\xef\xc1\xc3\x77\x1f\xae\x1f\x7a\xa4\xd5\x01\x87\x52\x6e\x66\x99\x7a\x50\x0e\xb3\xb2\x50\xeb\xdd\x7e\x4f\xd0\x24\x4b\x8e\x2d\x90\xcf\x37\xef\x1c\x36\x85\x0d\xa8\x16\xfb\x7f\xdb\x26\x4f\x5b\xe5\x96\x75\xad\x02\xed\xbc\x8d\x86\x78\x27\x1c\x8d\x9a\x30\x19\xbc\x1e\x4f\x6f\x07\xc3\x6f\x4f\xba\x61\xae\x9f\x0c\x5e\x4f\xfb\xe3\x5b\xd8\x5b\x16\x82\x17\x60\x30\xc2\x3b\xe4\xde\x85\x1d\x69\x57\xbd\xd4\xe7\x1f\x84\x94\x6c\x77\x3c\xb4\x85\x5e\xbe\x4f\x7d\x1e\xf3\x5c\xfc\x5b\x64\x57\x47\xb4\xd1\x9f\x9d\xb7\x26\xd3\xd1\x9b\xc9\xe0\xf5\xb0\x77\xb3\x23\x8f\xbc\xb6\x34\xac\xda\xe8\x14\xc6\x7c\xed\x4d\xfd\x1a\x86\xc9\xb0\x28\xad\x2a\x2d\x68\x99\xb6\x88\x50\xcd\xf3\x7a\x03\x08\xce\x2b\xf4\x72\xb3\x82\x87\x3d\xa1\xd5\x81\xd0\xea\xa9\x39\xd4\x27\xbf\x79\xeb\x40\xa2\xb3\xe0\x2d\xad\xfb\xe0\xab\xba\x59\xd0\x94\x9a\x5b\x48\x71\xa6\x4d\x1d\x02\xa1\x3c\xb5\x28\xad\x28\xe1\x1b\x8d\x48\xc1\x42\x48\x84\xca\x60\x18\xcf\x54\x5e\x87\x76\xad\xb1\xb0\xf0\x66\xf0\xf2\xa8\xd5\xd9\x28\xb4\x44\x90\xb8\x40\x02\xc4\xa0\xc2\x56\xf1\xe6\x35\x50\xbd\xbf\xff\x02\xed\xad\x71\xd4\x2e\x1e\x34\xd3\x36\xfc\x5a\x6f\x6d\xb4\xd4\x6e\xd3\x4a\xd3\xb6\x48\x12\xd7\x8b\x32\x25\xd0\x82\x19\xa1\x83\x7d\xeb\xa5\xb9\x8e\x76\x37\xac\xc1\x12\x5d\x17\xd0\xf1\x98\x62\x37\x1c\x4d\xfb\x97\x1b\xa7\x1d\x68\x25\x57\x07\x41\xf5\x4c\xf3\xf0\xd2\x22\xbc\x77\xea\x06\xb6\x5b\xfd\x88\x56\x2f\xd0\x18\x91\x65\xa8\x20\x5d\x85\x73\xa5\xb3\xf5\xeb\xac\xfe\x70\x3a\x7e\xf7\x66\x34\x18\x4e\xc9\xb0\x07\xa6\x3c\xb0\xd3\xd2\x33\x9a\xde\xc8\xc4\x2f\xb4\x25\x64\xb2\x4e\x86\xb5\xe1\xb7\xbd\x6b\x6a\xfd\xe1\x4d\x1e\xb3\x56\xe4\x8a\x94\x7d\x7c\x51\xbb\x3f\xfc\x65\x89\xb0\xd6\xa3\x4d\x4e\x4e\xce\x4f\x3b\xe1\x3b\xad\x6c\xa8\x5c\x74\x7c\x71\x71\x71\x71\x7c\x72\x76\xf6\x17\xf9\x9c\x9c\x3c\x3b\x3e\xbb\x38\xbd\x38\x69\xfd\x2f\x00\x00\xff\xff\xcc\x77\x28\x1b\x3d\x16\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseCleanInstall = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x51\x6f\xdb\x36\x14\x85\xdf\xf9\x2b\xce\xac\x62\xd8\x8a\xc8\x4a\xf3\x32\x60\xc5\x86\x79\x49\x86\x19\x2d\x6c\x20\x76\x57\x14\xdb\x1e\xae\xa8\x2b\xe9\x22\x12\xc9\x91\x57\x75\xfc\xef\x07\x2a\x71\x10\xa3\xd1\x93\xc8\x73\xc8\xf3\xf1\x90\xc5\x77\x55\x2d\xae\x4a\xbd\x31\x05\xae\x7d\x38\x46\xe9\x7a\xc5\xd5\xe5\xbb\x9f\xb0\xef\x19\x1f\xa6\x9a\xa3\x63\xe5\x84\xd5\xa4\xbd\x8f\x69\x69\x0a\x53\xe0\xa3\x58\x76\x89\x1b\x4c\xae\xe1\x08\xed\x19\xab\x40\xb6\xe7\x93\x72\x81\xbf\x38\x26\xf1\x0e\x57\xcb\x4b\xfc\x90\x0d\x8b\x27\x69\xf1\xe3\x7b\x53\xe0\xe8\x27\x8c\x74\x84\xf3\x8a\x29\x31\xb4\x97\x84\x56\x06\x06\x3f\x58\x0e\x0a\x71\xb0\x7e\x0c\x83\x90\xb3\x8c\x83\x68\x3f\xc7\x3c\x6d\xb2\x34\x05\xbe\x3c\x6d\xe1\x6b\x25\x71\x20\x58\x1f\x8e\xf0\xed\x4b\x1f\x48\x67\xe0\xfc\xf5\xaa\xe1\xe7\xaa\x3a\x1c\x0e\x4b\x9a\x61\x97\x3e\x76\xd5\xf0\x68\x4c\xd5\xc7\xf5\xf5\xed\x66\x77\x5b\x5e\x2d\x2f\xe7\x25\x9f\xdc\xc0\x29\x21\xf2\x7f\x93\x44\x6e\x50\x1f\x41\x21\x0c\x62\xa9\x1e\x18\x03\x1d\xe0\x23\xa8\x8b\xcc\x0d\xd4\x67\xde\x43\x14\x15\xd7\x5d\x20\xf9\x56\x0f\x14\xd9\x14\x68\x24\x69\x94\x7a\xd2\xb3\xb2\x4e\x74\x92\xce\x0c\xde\x81\x1c\x16\xab\x1d\xd6\xbb\x05\x7e\x5f\xed\xd6\xbb\x0b\x53\xe0\xf3\x7a\xff\xe7\xf6\xd3\x1e\x9f\x57\x77\x77\xab\xcd\x7e\x7d\xbb\xc3\xf6\x0e\xd7\xdb\xcd\xcd\x7a\xbf\xde\x6e\x76\xd8\xfe\x81\xd5\xe6\x0b\x3e\xac\x37\x37\x17\x60\xd1\x9e\x23\xf8\x21\xc4\xcc\xef\x23\x24\xd7\xc8\x4d\xee\x6c\xc7\x7c\x06\xd0\xfa\x47\xa0\x14\xd8\x4a\x2b\x16\x03\xb9\x6e\xa2\x8e\xd1\xf9\xaf\x1c\x9d\xb8\x0e\x81\xe3\x28\x29\x5f\x66\x02\xb9\xc6\x14\x18\x64\x14\x25\x9d\x67\xbe\x39\xd4\x32\xbf\xa5\x15\x92\x8d\x12\x14\xec\x2c\x85\x34\x0d\x94\x9b\x99\xef\x68\x1c\xbd\xc3\x8d\xb7\xf7\x1c\x65\xcc\x49\x81\x54\x39\xba\x99\x45\x5c\x52\x1a\x86\x39\x96\xec\x3d\x75\x9c\x4c\x91\x53\x73\x82\x83\x1d\x98\x66\xa6\x29\xcc\x91\x93\x73\x6c\x39\x25\x8a\xc7\xd3\x52\x50\x54\x69\xc9\x6a\x7e\xaa\xe0\x65\xb7\x7c\x5c\x55\x9e\x74\x09\x9a\x6f\x30\x81\xeb\xa7\x1f\xeb\x9d\xd3\x48\xf6\xde\x98\xc4\x8a\xd2\x83\x63\xe4\x07\x51\x63\xa4\xc5\xdf\x78\x53\xe0\x17\x5c\xe2\xdf\xf7\x33\x84\x01\xd8\xf6\x1e\xbf\x7e\x7f\x85\xc5\xc6\x3f\x73\x9e\x3a\xe4\x66\x91\x2d\x0f\xa2\x78\x67\x5a\x31\x86\x82\x96\x1d\x2b\xa6\xd0\x90\xf2\xf3\xf0\xc4\x53\x1e\x51\x96\xce\x9f\xf8\xca\xc8\xb9\x23\x76\x4d\xc2\xe2\xcd\x6f\x8b\x67\xff\x7c\x0a\x94\x47\x13\x47\x94\xb1\xc5\x3f\x06\x40\xf5\x95\x62\x65\xf3\x63\xae\x1a\xae\xad\x77\x6d\xf5\xf6\x85\x32\x48\x5d\x51\xd0\x6a\x90\xa4\xe9\x5c\xf1\xdd\xf3\x58\xc7\x70\xa6\xbd\x1c\x4f\x29\x56\xa9\xa7\xc8\x55\xe3\xed\x2b\xb3\x23\xb9\x57\x66\x07\x6f\x69\xa8\xde\x9a\xff\x03\x00\x00\xff\xff\x02\x8e\x04\x89\x60\x04\x00\x00")

func imagesBaseCleanInstallBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseCleanInstall,
		"images/base/clean-install",
	)
}

func imagesBaseCleanInstall() (*asset, error) {
	bytes, err := imagesBaseCleanInstallBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/clean-install", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypoint = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x7f\x6f\xdb\x38\x12\xfd\x5f\x9f\xe2\x9d\x1d\xa0\x09\x60\x49\x69\x70\x38\xe0\x72\x6d\x71\xde\x24\x45\x8d\x06\x76\x11\xbb\xdb\x2d\x16\x8b\x94\x12\xc7\xd2\xc0\x12\xa9\x25\x29\xcb\x46\x36\xdf\x7d\x41\xca\x3f\xe2\x76\x17\xd8\xfc\x13\x91\x9c\x1f\x8f\x33\x8f\x6f\x3c\xfc\x57\x9a\xb1\x4a\x33\x61\xcb\x28\x1a\xe2\x46\x37\x5b\xc3\x45\xe9\x70\x75\xf9\xfa\xbf\x58\x94\x84\x8f\x6d\x46\x46\x91\x23\x8b\x71\xeb\x4a\x6d\x6c\x12\x0d\xa3\x21\xee\x39\x27\x65\x49\xa2\x55\x92\x0c\x5c\x49\x18\x37\x22\x2f\x69\x7f\x32\xc2\xcf\x64\x2c\x6b\x85\xab\xe4\x12\xe7\xde\x60\xb0\x3b\x1a\x5c\xfc\x2f\x1a\x62\xab\x5b\xd4\x62\x0b\xa5\x1d\x5a\x4b\x70\x25\x5b\x2c\xb9\x22\xd0\x26\xa7\xc6\x81\x15\x72\x5d\x37\x15\x0b\x95\x13\x3a\x76\x65\x48\xb3\x0b\x92\x44\x43\x7c\xdd\x85\xd0\x99\x13\xac\x20\x90\xeb\x66\x0b\xbd\x7c\x69\x07\xe1\x02\x60\xff\x57\x3a\xd7\x5c\xa7\x69\xd7\x75\x89\x08\x60\x13\x6d\x8a\xb4\xea\x0d\x6d\x7a\x3f\xb9\xb9\x9b\xce\xef\xe2\xab\xe4\x32\xb8\x7c\x56\x15\x59\x0b\x43\xbf\xb7\x6c\x48\x22\xdb\x42\x34\x4d\xc5\xb9\xc8\x2a\x42\x25\x3a\x68\x03\x51\x18\x22\x09\xa7\x3d\xde\xce\xb0\x63\x55\x8c\x60\xf5\xd2\x75\xc2\x50\x34\x84\x64\xeb\x0c\x67\xad\x3b\x29\xd6\x1e\x1d\xdb\x13\x03\xad\x20\x14\x06\xe3\x39\x26\xf3\x01\x7e\x1a\xcf\x27\xf3\x51\x34\xc4\x97\xc9\xe2\xc3\xec\xf3\x02\x5f\xc6\x0f\x0f\xe3\xe9\x62\x72\x37\xc7\xec\x01\x37\xb3\xe9\xed\x64\x31\x99\x4d\xe7\x98\xbd\xc7\x78\xfa\x15\x1f\x27\xd3\xdb\x11\x88\x5d\x49\x06\xb4\x69\x8c\xc7\xaf\x0d\xd8\x97\x91\xa4\xaf\xd9\x9c\xe8\x04\xc0\x52\xf7\x80\x6c\x43\x39\x2f\x39\x47\x25\x54\xd1\x8a\x82\x50\xe8\x35\x19\xc5\xaa\x40\x43\xa6\x66\xeb\x9b\x69\x21\x94\x8c\x86\xa8\xb8\x66\x27\x5c\xd8\xf9\xe1\x52\x49\x14\x59\x72\x88\x35\xc8\x18\xda\xb0\xdb\x2f\x95\x6e\x95\xa5\xc3\xb2\xe1\x86\x96\x82\xab\x28\xca\xb5\x5a\x72\xd1\x1a\x7a\x6c\x8c\xde\x6c\xcf\x2f\xf0\x14\x01\x43\xdc\x6a\xf5\xaa\x67\x47\xd8\x3f\x80\xad\x74\x2e\x2a\x28\x72\x9d\x36\xab\x08\xb8\x9f\xdd\x8c\xef\x1f\xa7\x77\x8b\x2f\xb3\x87\x8f\x6f\xcf\xce\xb9\x81\xd1\xad\x23\x54\x6c\x1d\x24\xad\x41\xae\xbc\xf4\x41\x9c\xc6\xca\x13\xba\xc2\x1f\x10\xdd\x0a\xaf\x9e\xd0\x18\x56\x0e\x67\xaf\xf1\xfc\xea\x22\x8a\x80\x7a\x25\xd9\x20\x6e\x90\x92\xcb\x53\xbb\xb5\x8e\x6a\xb9\xfb\x9f\xe6\x5a\x79\xae\x91\x91\x89\x25\xb3\xe6\x9c\x12\x99\x46\x40\x2e\x1c\xde\xbc\xb9\x9b\xbd\xc7\xbb\x7f\xec\xe6\xe9\x18\x87\x8b\x25\xbe\x00\xd1\xaf\xf3\xfe\xe8\xb7\xe8\x4e\xad\xd9\x68\x55\x93\x72\x6f\x07\x1f\x16\x8b\x4f\x8f\x9f\x1e\x66\xbf\x7c\x7d\x7b\xf6\x74\x5c\x5c\xc7\xcf\x83\x1f\x0d\xe7\x27\x96\xf3\xbf\x33\x9d\xce\x0e\x76\xfb\xcf\xeb\x38\x54\xb5\xd4\xd6\x3d\x8f\xce\x9e\x4e\x4a\xea\xdd\x67\xef\xa3\xe7\x28\x5a\xf2\xe6\xb1\xd6\xad\x72\x87\x1e\x29\xca\xc9\x5a\x61\xb6\xd0\xaa\xda\xa2\x2b\x49\xf9\x8e\x19\x65\x63\x43\xb5\x68\x3c\xc5\x49\xf9\x27\x13\xe8\xed\xdb\xe7\x73\x8c\x90\xb5\x0e\xa5\x30\xb5\x7f\x64\x21\x92\xd7\x9b\x8c\x95\x0f\x15\x64\x29\xe4\x81\x2d\x75\x5b\x49\x64\x04\xdd\xa9\xfe\x15\x1a\xad\x9d\x27\x22\x4a\xb1\xee\xd9\x6c\xc9\xb5\x2c\x91\xb1\xf3\xbd\x28\x75\xa7\x82\xd1\x75\xb0\x3c\x06\x0b\x87\xb5\x96\x88\xed\xcb\xdd\x90\x7d\xd7\xb1\x98\x55\x2c\xe2\x43\xbf\xf6\xe9\x43\x26\x43\x42\xf6\xb7\xf4\x7d\x0d\x5e\xbe\x87\x76\xa7\x29\x4b\xaf\x04\x64\x57\x4e\x37\x41\x58\x3a\x5e\x71\x3a\xdf\x29\xc1\x81\x11\x37\xfb\xd0\x13\xe5\xc8\x2c\x45\x4e\x69\x1f\x49\x77\xb4\x26\x33\x42\x47\x50\x5e\x52\x74\x78\xc5\xae\x64\x55\x58\x2c\x8d\xae\xf1\x4d\xea\x7c\x45\x06\xa6\x55\x88\xe3\xc6\xf0\x9a\x2b\x2a\x48\x7e\x43\x92\x24\x21\x88\x2f\x4a\x2f\xa4\x95\x28\x20\x2a\xab\x51\x8a\xa6\x21\x65\xbd\x42\xd5\x62\x45\x01\x3a\x4c\x37\x82\xa8\xb5\x2a\xac\x3b\xc9\xe3\xe9\x1f\xaa\x1e\x6b\x18\x0a\x9f\x23\xa3\xfb\xeb\xee\xbb\x2f\xf2\x92\x15\x3d\xb2\x3c\x3e\x53\xaa\xc2\x84\xf0\x9d\xd8\x1d\xc7\x2c\x41\x75\x46\x52\x92\xf4\xca\xe8\x8f\x94\x96\x04\xae\xbd\xb6\x78\x9c\x05\x29\x32\xc2\xfb\x09\x28\xea\xa0\x15\x25\x3b\x1e\xb0\xf5\xac\x39\x32\x2b\xa3\x5c\x78\x15\xc8\xb4\x2b\xb1\x6a\x33\x9f\x2f\xc4\xe8\xb1\xfb\x31\xa1\x15\x29\x67\x51\xf1\x8a\xd0\x91\xef\x96\x22\x17\xc2\x79\xc7\x17\xa8\xd8\x97\x5d\x89\xaa\xda\xfa\x92\x78\xf1\x65\x55\xb4\x6c\xcb\x80\xcf\x7a\x08\xa6\x46\xbc\xec\x9f\xff\xd1\x31\xc2\x81\x22\xc7\xcd\xd8\x13\xaf\xd9\x97\xa6\x31\x5a\xb6\xb9\x7b\x54\xa2\xa6\x43\x71\xdc\xee\x36\x02\xb6\x16\x55\x85\x25\x6f\x7c\xe2\x92\x65\x4f\xdd\x20\x9f\xd5\xd6\xeb\x6c\x29\x8c\xf4\x5c\x09\x57\xf3\x76\x6c\x6d\x4b\x18\xfe\xfb\xea\x3f\x27\x64\x2b\xd8\x95\x6d\x96\xe4\xba\x4e\x57\x87\xf9\x1c\x5b\x2e\x6c\xba\x62\x25\xd3\xe0\x66\xd3\xde\x8d\xf2\x52\x63\xe0\xf7\x07\x78\x87\xde\xe0\x25\xd0\x93\x96\xeb\x51\xc6\x4a\xfe\x85\x55\xa0\x40\x9a\x57\xc2\xda\x54\xd6\x9c\xf2\x77\x41\x9e\xfd\xef\x07\xcf\xcb\xc6\x50\xcc\x8a\x9d\xc7\xdf\x36\xf6\x28\x18\xdf\x91\xe7\x87\x82\x7d\x3f\x04\x7c\xc0\x8e\xd0\x09\xe5\x42\x9d\x72\x5d\xd7\xbe\x2e\xe7\xb4\x69\x28\x77\xfd\xcc\xcd\x68\xdf\x94\x8b\xdd\xf2\xd3\xe4\xf6\xb5\x9f\xbf\xa0\x0d\xe5\x61\x2c\xbb\x28\x7c\x0e\xce\xfe\x3f\x88\xfe\x0c\x00\x00\xff\xff\x85\x1a\x0b\x2a\xf1\x08\x00\x00")

func imagesBaseEntrypointBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypoint,
		"images/base/entrypoint",
	)
}

func imagesBaseEntrypoint() (*asset, error) {
	bytes, err := imagesBaseEntrypointBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":    imagesBaseDockerfile,
	"images/base/clean-install": imagesBaseCleanInstall,
	"images/base/entrypoint":    imagesBaseEntrypoint,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile":    {imagesBaseDockerfile, map[string]*bintree{}},
			"clean-install": {imagesBaseCleanInstall, map[string]*bintree{}},
			"entrypoint":    {imagesBaseEntrypoint, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
