// Code generated by go-bindata.
// sources:
// ../../../../images/base/Dockerfile
// ../../../../images/base/clean-install
// ../../../../images/base/entrypoint/main.go
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xfb\x6f\xdb\x46\x12\xfe\x5d\x7f\xc5\x80\x32\x1a\x3b\x15\x49\xc7\x8e\x5b\xc7\x85\x7b\x50\x6c\xc5\x15\xe2\x48\x81\xa4\x24\x08\xee\x0e\xc6\x92\x1c\x91\x5b\x2d\x77\x79\xfb\x90\xac\xe4\xfc\xbf\x1f\x66\x49\xea\xe1\x38\xbd\x02\xbd\x2b\x0a\xc4\x22\x77\xe7\xb5\xdf\x7c\xf3\x2d\xbb\x70\xa5\xaa\xb5\xe6\x79\x61\xe1\xe4\xf8\xc5\x39\xcc\x0a\x84\xb7\x2e\x41\x2d\xd1\xa2\x81\xbe\xb3\x85\xd2\x26\xea\x74\x3b\x5d\xb8\xe5\x29\x4a\x83\x19\x38\x99\xa1\x06\x5b\x20\xf4\x2b\x96\x16\xd8\xbe\xe9\xc1\x47\xd4\x86\x2b\x09\x27\xd1\x31\x1c\xd2\x82\xa0\x79\x15\x1c\xfd\xd2\xe9\xc2\x5a\x39\x28\xd9\x1a\xa4\xb2\xe0\x0c\x82\x2d\xb8\x81\x39\x17\x08\x78\x9f\x62\x65\x81\x4b\x48\x55\x59\x09\xce\x64\x8a\xb0\xe2\xb6\xf0\x6e\x1a\x23\x51\xa7\x0b\x9f\x1b\x13\x2a\xb1\x8c\x4b\x60\x90\xaa\x6a\x0d\x6a\xbe\xbb\x0e\x98\xf5\x01\xd3\x7f\x85\xb5\xd5\x45\x1c\xaf\x56\xab\x88\xf9\x60\x23\xa5\xf3\x58\xd4\x0b\x4d\x7c\x3b\xbc\x1a\x8c\xa6\x83\xf0\x24\x3a\xf6\x5b\x3e\x48\x81\xc6\x80\xc6\x7f\x39\xae\x31\x83\x64\x0d\xac\xaa\x04\x4f\x59\x22\x10\x04\x5b\x81\xd2\xc0\x72\x8d\x98\x81\x55\x14\xef\x4a\x73\xcb\x65\xde\x03\xa3\xe6\x76\xc5\x34\x76\xba\x90\x71\x63\x35\x4f\x9c\xdd\x2b\x56\x1b\x1d\x37\x7b\x0b\x94\x04\x26\x21\xe8\x4f\x61\x38\x0d\xe0\x75\x7f\x3a\x9c\xf6\x3a\x5d\xf8\x34\x9c\xfd\x36\xfe\x30\x83\x4f\xfd\xc9\xa4\x3f\x9a\x0d\x07\x53\x18\x4f\xe0\x6a\x3c\xba\x1e\xce\x86\xe3\xd1\x14\xc6\x6f\xa0\x3f\xfa\x0c\x6f\x87\xa3\xeb\x1e\x20\xb7\x05\x6a\xc0\xfb\x4a\x53\xfc\x4a\x03\xa7\x32\x62\x46\x35\x9b\x22\xee\x05\x30\x57\x75\x40\xa6\xc2\x94\xcf\x79\x0a\x82\xc9\xdc\xb1\x1c\x21\x57\x4b\xd4\x92\xcb\x1c\x2a\xd4\x25\x37\x74\x98\x06\x98\xcc\x3a\x5d\x10\xbc\xe4\x96\x59\xff\xe4\x9b\xa4\xa2\x4e\xa7\x0b\x0b\x2e\x33\x48\x85\x33\x16\x35\x24\x8c\x52\x2d\x59\x8e\x3d\x48\x1c\x17\x96\x12\x75\x89\x93\xd6\x5d\xbc\x38\x8f\x8e\x5f\xfa\x7a\xcf\x54\x0d\x82\x15\x02\xcb\x32\x30\x6b\x63\xb1\xcc\x7a\x70\x35\x1a\xf6\xc8\x2f\x28\x9f\x97\x55\x4a\x18\x90\x88\x59\x5d\x77\xed\xa4\x87\x29\xcb\x4a\x6f\xe6\x8d\xd2\xed\x5e\xf8\x11\x32\x95\x2e\x50\x43\xaa\xe4\x9c\xe7\x4e\xfb\x98\x09\x6f\x19\x24\x28\xd4\xaa\x07\xa6\x29\xc8\x5c\x09\xa1\x56\x94\xae\xc6\x39\x6a\x94\x29\x9a\x8b\x4e\xd7\x83\xc6\x34\xa8\x99\xd3\x59\xa3\x59\x58\x55\x79\xe8\xac\xf8\x82\xc7\xd3\xe6\xac\xe3\xc6\x69\x7c\xa5\x24\xe1\x11\xf5\x50\x5a\xd4\x73\x96\x62\xbc\x63\x27\xc3\x25\x0a\x55\xa1\x36\x91\xc6\xac\x60\x36\x4a\x55\x19\x27\x42\xe5\xf1\xc9\xf1\x8b\x97\xf1\xf1\x19\xfd\xaf\x9d\xa4\xd2\x87\x8d\xcd\x90\xe0\xcf\x65\x58\x67\x13\xa6\xad\x87\x3f\x6f\xf8\xa7\xf8\xf8\x55\xfc\xe2\xf4\x1b\xc3\x5c\x86\x2c\x94\x4a\x86\x95\xe6\x4b\x2e\x30\xc7\x6c\xd7\x7c\xa7\x3f\xb9\x21\x1c\x0e\xee\x86\xef\xfa\x37\x83\xcb\x60\xf7\xd4\x82\xce\x9b\xc9\xf8\x1d\x1c\x7c\xdd\x2e\x78\xa0\xb3\x37\x68\xa9\x0d\xe0\x7a\xf0\x7a\xd8\x1f\xdd\xbd\x99\x8c\x47\xb3\xc1\xe8\xfa\x52\x2a\xc9\xa9\x24\x2c\xb5\x7c\x89\x60\xac\xaa\x0c\x18\x55\x22\xb0\xca\xc2\x8a\x79\xb4\x99\x5e\x8d\x02\x6e\x3c\x35\x74\xba\xc0\x40\x23\x13\xc0\x74\xee\x4a\x94\xb6\x07\x2b\x7c\xa6\x11\x0e\x59\x72\xe4\x0c\xf9\xa1\x18\xad\x82\x1c\x2d\x30\xb0\x58\x56\x4a\x33\xbd\x86\xc1\xe8\x23\xb0\x9c\x71\x19\xf9\x2c\xfe\x38\x9a\x4e\xe7\x6a\xfc\xfe\x33\xa4\x02\x99\x0c\xb9\x34\x96\x09\x01\xb1\x33\x3a\x16\x2a\x65\x22\x4e\xb8\x8c\xf7\x5e\x76\x26\x1f\x46\x90\x16\xa5\xca\xe0\xc7\xfb\x3f\x5e\xd9\xe9\xc2\x0d\x5a\xc8\xb0\x42\x99\xa1\x4c\x39\x1a\x82\x7b\x81\x3b\x8d\x01\x4c\x68\x64\xd9\x1a\x0a\x66\x2e\xc0\x98\xa2\x47\x45\xe9\x81\x91\xac\xca\xfc\xea\xba\x26\x89\x56\x0b\x94\x90\xa9\x95\x04\x2e\xad\x82\x43\x64\x69\xe1\x89\x03\x04\x97\x78\x44\x98\x0d\xa1\x62\xe9\x82\xe5\x48\x7d\x92\xa2\x31\x54\x0e\xea\xf4\x26\x22\x2a\x5a\x0d\xa5\xc7\x8b\x77\x9b\xca\xa0\x5e\xf2\x14\x0d\x1c\x36\x60\x39\x7a\x72\x35\xd9\x6d\xba\x2c\x86\x62\x5d\xa1\x5e\xb8\x04\x21\x86\xc5\x76\x76\x10\x91\x2b\x89\xd2\x1a\x6f\xa2\xe4\x26\xdd\xda\x39\x74\x96\x0b\x6e\x39\xfa\xd6\xa7\x59\xc0\x25\x28\xa7\x81\x72\xa4\x6e\xe7\x32\x3f\xaa\x0b\x26\x69\x85\x2f\xae\xab\xe0\x50\x63\xa9\x96\x94\x8b\x93\x2b\x26\x89\x3f\xdb\xbe\x6f\x43\xa7\x6d\x6f\xb8\x64\x42\xac\x69\x67\xc6\x8d\xe7\xee\x45\x69\x72\x72\xf2\xbb\x72\x5a\x32\x91\xfd\xff\xda\xd3\x83\x64\x0f\x53\xff\xe8\xf8\x59\x44\xa7\x1b\x5a\xcd\xa4\xa9\x94\xb6\xa1\x77\x0f\x29\x0b\x53\xd4\x96\x78\x98\xf9\xb2\x39\x2d\x36\xb3\x24\xac\x34\xc5\x45\x75\x0a\x53\x55\x96\x4a\x42\x2e\x5d\x95\x9f\x80\x30\x49\xa8\x51\x20\x81\xa9\x35\xbf\xa9\x44\x13\xa1\x59\x9b\x25\x08\x9e\x34\xbf\x8f\x37\x0b\x53\x25\xa5\xd5\x2c\x5d\x00\xaf\x2c\x55\xc7\x00\xaf\xb4\x72\x16\x4f\x00\x6d\x41\xf5\x07\xa3\x52\x66\x81\x8e\x29\x14\x5c\xba\x7b\x28\x95\x93\x16\x30\x69\x36\xb8\x0c\x97\xb0\xa0\x56\x60\x6e\x6e\xc2\x9a\xa1\x5b\x07\x09\x33\x05\x68\xb3\x96\x69\xf3\xe8\x87\x1f\x60\x4e\xd3\x21\x16\x3c\xd9\x90\x66\xfd\x2f\xfd\xc3\x25\xb7\x91\x65\x3a\x47\x1b\xd1\xb1\x9a\x18\x42\xc9\x4a\x84\xa0\xcd\xc5\x96\x15\x09\x05\x13\x1a\xb4\xae\x8a\x9a\xc3\x0e\x20\xcc\x50\xa0\xc5\xad\x1b\x5d\x42\x38\x7f\xd2\x4f\xe9\x84\xe5\xa1\x33\xa8\xf7\x5d\x3d\xff\x66\x33\xda\xf4\xf1\xe6\xe7\xdf\x5d\xfc\x84\x27\x4f\x0a\xe1\xdc\xfc\x37\x3f\x4f\x15\x83\xe0\x64\x1f\xef\xa4\x62\xff\x85\xed\x54\xde\xd4\x8a\x3f\x65\x21\x61\x86\xa7\xdf\x0d\x1c\xd3\x42\x41\x30\x41\x96\xbd\x7d\x67\xf2\x4b\xa9\x02\xf8\xf5\xd7\xfd\x82\xb5\x0d\x16\xd1\xfc\x25\x1e\x1c\x36\x5d\x50\x77\x4a\x0f\x56\x05\x4f\x0b\xcf\x24\x86\x68\xa7\x60\x55\x85\x12\xd8\x9c\x54\xc3\x0a\x5b\xbe\xaa\x87\x44\x23\xec\x36\xbc\xc1\x12\xb5\x24\x85\x45\x24\xea\xa5\xd3\xa6\x87\x55\x6a\xa2\xda\x83\xef\xde\xc6\x4a\xec\xb1\x1b\xb7\x4d\x8a\x71\x3d\xcb\xe2\xae\x41\x1b\xba\x2a\xb4\x05\x86\x1a\x2b\x65\xb8\x55\x7a\x4d\x83\x47\x66\x1b\x9b\x5b\x32\x8b\xb8\xf2\x1e\x62\x8f\xbe\x98\xcb\x96\xd7\x6d\xeb\x28\x5c\xd4\x72\x24\xee\x6e\xf9\x36\xdc\xe1\x5b\x1a\x54\xf5\xcf\x67\x06\x6e\xde\xdf\xc0\x02\xd7\xfe\x05\xc9\x1e\xaf\x45\xb8\xcc\x51\x57\x9a\x4b\xbb\xf7\x7c\x2f\xba\x10\x5c\x95\x31\x8b\xf5\x9c\xe0\x8f\x0a\xdb\x90\x64\xa7\x0b\xa3\xf1\x6c\x70\x01\x34\xb0\x5f\xd1\x00\x51\xf3\x39\x4f\xb9\x67\x44\xe3\x2a\x22\x9f\x5a\xda\xee\x28\xfd\xd4\x69\x8d\xd2\x8a\x35\x09\x59\x3a\x86\x8a\x13\x11\x83\x25\x3a\xdc\xe1\xca\x27\x6a\x62\x99\x59\x98\xd8\x13\xc0\x37\xd5\xa8\xa7\xf0\xf8\xea\xed\x60\x72\xf7\x71\x30\x99\x0e\xc7\xa3\xcb\xe0\xcc\x4b\x89\x57\xd1\xf3\xc0\x17\xbc\x91\x78\x9b\x19\x8e\x72\xd9\xf3\x3a\xe0\x91\x08\x88\x36\x22\xc3\x8b\x05\xab\x80\x01\xa9\x98\x2f\xa8\x15\x2c\x99\x70\x04\x0c\xc3\x85\x97\x71\x8d\xac\xac\xf5\x05\xcc\xb5\x2a\x3d\xfb\x2e\x70\x4d\xc3\x32\xf8\x54\xbf\xb8\x68\x1f\x82\x72\xb6\x72\x16\x4c\xa1\x9c\xc8\xbc\xf7\x84\x60\xa7\x09\x66\x87\xc6\x66\xca\xd9\x56\x9e\x90\xde\xd0\x25\x4d\x98\xa3\xc0\xe7\xd7\x7f\x3f\xbb\x7b\x3b\xf8\x7c\x77\x3d\x1e\xcd\xee\x3e\xf5\x27\xa3\xbb\xf1\xe8\xee\xba\x3f\xba\x19\x4c\xc6\x1f\xa6\x77\x1f\xa6\x5e\x45\xcd\x99\x30\x18\xd4\xd3\x81\x38\x3e\x9c\x9b\xe9\x2d\x04\x5b\x00\xaf\xa4\x50\x2c\xdb\x05\x71\x0d\xde\x83\xc3\xa8\xee\x30\x65\x5a\xca\xff\xa5\x69\xc4\x83\xe1\x75\x70\x14\xe7\x55\x1e\xc0\xbf\x37\xa9\x10\x72\xc2\x6d\xcb\xb6\x8f\x77\x00\x06\xc7\x83\xd7\x6f\xae\xae\xcf\xcf\x77\x56\x65\x59\x48\x2b\xb7\x70\xdb\x90\x39\x40\x90\x61\x02\x7f\x3d\x50\x38\x38\x14\x26\xb9\x6b\xc7\x56\x98\x9a\x23\x30\x7e\x9c\x04\xdb\x40\xf6\x27\x67\xb0\xe9\xdc\xcb\x83\xaf\xfb\x38\x7a\x08\x88\x5c\x06\xd2\x4f\xf7\xab\xc9\xd0\x8b\x92\xcd\x18\xce\x7c\xa1\xcb\x45\xc6\x35\x84\x55\x1d\x56\xa3\x58\x5a\x1a\x7b\xf6\x35\x48\x35\xdf\x4e\xee\x2c\xb8\x00\xab\x1d\x3e\x3c\x83\x5f\x77\x37\xc4\x19\xc3\x52\xc9\xe8\x77\xa3\xe4\x13\x56\xb7\xfb\x7d\xf8\xdb\x5f\xf5\xfd\x03\x32\x9c\x33\x27\x6c\x6b\x73\xbb\x20\xae\x17\x44\x56\x95\x62\x97\x27\xaf\x46\x43\x48\xb8\x64\x9a\xd4\x91\x55\x10\xab\xca\xc6\xa9\xe4\xa4\x32\x49\x12\x8d\xaf\xc7\x87\x09\x4a\x5b\x20\x8a\x0c\xf5\xd1\x05\x11\x00\xac\x8a\x35\xc4\xb0\x2a\x98\x85\x02\x35\x7a\x60\x5e\x8d\x86\xdb\xae\x3b\x8e\x7e\x8e\xce\x82\xcd\x73\xaf\xdf\x3f\x4c\x6e\x2f\x37\x08\x34\x56\x69\x96\x63\x94\x2b\x95\x0b\x64\x15\x37\xfe\x6c\xb7\x1d\xdf\x1e\x6a\x2c\xd1\xae\x94\x5e\x84\x95\x70\x39\x97\x26\xae\x51\x8d\xf7\xc4\x2c\xd0\x9f\x5c\xfd\x76\x79\x70\x98\x55\x8b\x1c\xc2\xd0\xe3\x2d\x64\x3a\x2d\xb8\xc5\xd4\x3a\x8d\x47\x3b\xd3\xa4\xde\x41\xe1\xcc\xfa\x93\xd7\xfd\xdb\xdb\xcb\x20\x95\xbc\xb5\x1b\x1e\x7c\x25\x63\x0f\xe1\xf2\xe0\xeb\x4e\x2a\x0f\x91\xcd\xbf\x04\x4f\x5a\xf1\xf9\xd4\x8b\xdb\xfc\x1e\xea\x9f\x8d\xfd\x87\x5d\xa4\xf9\x2e\xa4\x26\x0c\x43\x8d\x56\xaf\xe1\x0c\xc2\xb0\x21\x82\xd8\x96\x15\x15\x9d\x7c\x41\x63\x92\xac\xed\xec\x37\x05\x3b\x39\xfb\xc9\xb8\x72\x7f\xf1\xe6\xfd\x16\x26\x3b\x07\xb8\x7d\x6d\x99\x86\xf0\x6a\xff\x65\x78\xff\x65\xfe\x1d\x6b\x34\xb1\xf5\xfe\x4b\x02\x8d\x45\x1a\x95\x8d\xf0\x23\xb2\x06\xee\x89\x8a\xcb\x56\xa0\x1f\x72\x0b\x2b\x2e\x04\xa4\x05\xa6\x8b\xcd\xe5\x7f\x83\x43\xe2\xdb\xa3\xff\xd9\xa5\x97\x2e\x60\x5b\xd3\x9b\x01\xd8\x46\x88\xf7\xdc\x1a\x9a\xdb\xd3\xe1\xcd\x64\xf6\x6e\x38\xfa\xf1\xb4\xe6\xfa\xe9\xf0\x66\x36\x98\xbc\x83\xc3\x5a\x1d\x68\x0c\xf1\x1e\x53\x47\xa3\x89\xdb\xdd\xf0\x12\x97\x7f\xe1\x42\xb0\x5d\xa9\x6e\x0a\xb5\xba\x4b\x5c\x1e\xa5\x39\xff\x1b\xcf\x2e\x5f\xd0\xe5\xf7\xec\xe7\xce\x74\x36\x7e\x3f\x1d\xde\x8c\xfa\xb7\x3b\xfe\xa8\x6a\x2b\xcd\xaa\x4d\x4c\xfe\x33\x13\xdd\x3d\xfc\xf7\x10\x26\x00\xa5\xd5\xeb\x4a\x71\xba\x77\x1a\x44\xa8\x16\x79\x9c\x38\x2e\xea\x7b\x4f\xa1\x56\x9b\xdb\xaa\xff\xb0\x51\xcb\x11\x9e\xfa\xf9\xea\xdf\xfc\xee\x8c\x05\x81\xd6\x80\x33\x34\xb4\xc0\x55\xb5\x9c\xa1\x1b\x43\x6e\x20\xc1\xb9\xd2\xf5\x11\x70\xe9\x68\x40\x29\x3f\x6c\x9b\x88\x28\xc0\x82\x0b\x84\x4a\xa3\x17\xba\x7e\xe4\x31\xbb\x89\x98\x1b\x78\x3f\xbc\x7e\xd1\xe9\x6e\x02\x5a\x21\x08\x5c\x22\xf5\xaf\x0f\x61\x1b\x78\xf3\x3d\xa6\xbe\xea\xfe\x1d\x82\x6d\x72\xf1\xf6\xcf\xa0\x07\xc1\xa3\xeb\x6c\x00\xff\xec\x74\xe1\x13\x7a\xa1\xb6\x45\x98\xa2\xb9\x48\xce\xdb\x1b\x23\x61\x69\xc9\x34\x57\x3e\xd5\xf6\xf6\xd8\x4a\x12\x22\x0f\x81\xb6\x07\x68\xd3\xe8\x68\xa3\x4c\xda\xfa\x3d\x57\x52\xac\x9f\xb7\xd7\x49\x3f\xe5\xfd\xd7\x9a\x9e\x37\xbb\x8d\xcf\x8b\x98\x25\x6a\xcd\xb3\x8c\xb4\xa2\x25\xd7\x96\x97\xd8\x19\x8c\x66\x93\xcf\xef\xc7\xc3\xd1\x8c\x92\x7b\x94\xc3\xa3\x04\x0d\x3d\x23\x2d\x4c\xb9\x51\xef\x14\xd8\x36\x49\xae\x59\x55\x40\x49\xe7\x96\x20\x30\x58\x2a\xe1\xe8\xbc\x14\xb0\xa5\xe2\x99\x77\x2e\xd8\x9a\xce\xa9\xf9\x73\x93\x0b\xdd\x31\x9b\xaf\x58\x82\xf9\xfd\x29\xa3\x0b\x6d\x5a\x30\x99\xd3\xd1\x6d\xac\x79\xa0\x31\xb8\xf6\x2e\xfd\x67\x4f\x72\xd8\xe9\x82\x4a\x53\xa7\x5b\x54\x64\x38\xe7\x5e\xb4\x70\xdb\x7c\xbc\xbb\xf8\xae\xca\x45\xf2\x80\xf1\xe6\xeb\x55\x0d\x53\xd4\x71\xb7\x76\xd9\xf9\x38\xbe\xfd\xf0\x6e\xe0\x4b\xb3\x64\xda\xeb\xfd\x7a\x7b\x53\x82\xa7\x86\x09\x69\x2e\x1f\x6a\x7b\xe8\xef\xfa\x57\xa4\x0f\xfc\x97\x45\x66\x0c\xcf\x25\x1d\xd4\x4e\x4f\xe6\xdc\x16\x2e\xa9\x5b\x71\xef\x36\x91\xc5\xdc\x18\x87\x26\x3e\x3d\xfd\xf9\x65\xd7\xff\x4d\xd7\x58\x94\x36\x3c\x39\x3f\x3f\x3f\x3f\x39\x3d\x3b\xfb\x8b\x76\x4e\x4f\x5f\x9d\x9c\x9d\xbf\x3c\x3f\xed\xfc\x27\x00\x00\xff\xff\xad\x47\x22\x9b\xcd\x16\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseCleanInstall = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\x51\x6f\xdb\x36\x14\x85\xdf\xf9\x2b\xce\xac\x62\xd8\x86\x48\x4a\xf3\x32\x60\xc5\x86\x79\x49\x86\x19\x2d\x6c\x20\x76\x57\x14\xdb\x1e\xae\xa8\x2b\xe9\x22\x12\xc9\x91\x57\x75\xfc\xef\x07\x2a\x71\x50\x63\x7e\x32\x75\x0e\x79\x3e\x1e\xde\xe2\x9b\xba\x11\x57\xa7\xc1\x98\x02\xb7\x3e\x9c\xa2\xf4\x83\xe2\xe6\xfa\xed\x8f\x38\x0c\x8c\xf7\x73\xc3\xd1\xb1\x72\xc2\x7a\xd6\xc1\xc7\x54\x99\xc2\x14\xf8\x20\x96\x5d\xe2\x16\xb3\x6b\x39\x42\x07\xc6\x3a\x90\x1d\xf8\xac\x5c\xe1\x4f\x8e\x49\xbc\xc3\x4d\x75\x8d\xef\xb2\x61\xf5\x22\xad\xbe\x7f\x67\x0a\x9c\xfc\x8c\x89\x4e\x70\x5e\x31\x27\x86\x0e\x92\xd0\xc9\xc8\xe0\x27\xcb\x41\x21\x0e\xd6\x4f\x61\x14\x72\x96\x71\x14\x1d\x96\x98\x97\x43\x2a\x53\xe0\xf3\xcb\x11\xbe\x51\x12\x07\x82\xf5\xe1\x04\xdf\x7d\xed\x03\xe9\x02\x9c\x7f\x83\x6a\xf8\xa9\xae\x8f\xc7\x63\x45\x0b\x6c\xe5\x63\x5f\x8f\xcf\xc6\x54\x7f\xd8\xdc\xde\x6f\xf7\xf7\xe5\x4d\x75\xbd\x6c\xf9\xe8\x46\x4e\x09\x91\xff\x9d\x25\x72\x8b\xe6\x04\x0a\x61\x14\x4b\xcd\xc8\x18\xe9\x08\x1f\x41\x7d\x64\x6e\xa1\x3e\xf3\x1e\xa3\xa8\xb8\xfe\x0a\xc9\x77\x7a\xa4\xc8\xa6\x40\x2b\x49\xa3\x34\xb3\x5e\x94\x75\xa6\x93\x74\x61\xf0\x0e\xe4\xb0\x5a\xef\xb1\xd9\xaf\xf0\xdb\x7a\xbf\xd9\x5f\x99\x02\x9f\x36\x87\x3f\x76\x1f\x0f\xf8\xb4\x7e\x78\x58\x6f\x0f\x9b\xfb\x3d\x76\x0f\xb8\xdd\x6d\xef\x36\x87\xcd\x6e\xbb\xc7\xee\x77\xac\xb7\x9f\xf1\x7e\xb3\xbd\xbb\x02\x8b\x0e\x1c\xc1\x4f\x21\x66\x7e\x1f\x21\xb9\x46\x6e\x73\x67\x7b\xe6\x0b\x80\xce\x3f\x03\xa5\xc0\x56\x3a\xb1\x18\xc9\xf5\x33\xf5\x8c\xde\x7f\xe1\xe8\xc4\xf5\x08\x1c\x27\x49\xf9\x31\x13\xc8\xb5\xa6\xc0\x28\x93\x28\xe9\xf2\xe5\x7f\x97\xaa\xf2\x2c\xad\x91\x6c\x94\xa0\x60\x67\x29\xa4\x79\xa4\xdc\xcc\xf2\x46\xd3\xe4\x1d\xee\xbc\x7d\xe4\x28\x53\x4e\x0a\xa4\xca\xd1\x2d\x2c\xe2\x92\xd2\x38\x2e\xb1\x64\x1f\xa9\xe7\x64\x8a\x9c\x9a\x13\x1c\xec\xc8\xb4\x30\xcd\x61\x89\x9c\x9d\x63\xcb\x29\x51\x3c\x9d\xb7\x82\xa2\x4a\x47\x56\xf3\xa8\x82\xab\xbe\x7a\xde\x55\x9e\x75\x09\x9a\x5f\x30\x81\x9b\x97\x3f\xd6\x3b\xa7\x91\xec\xa3\x31\x89\x15\xa5\x07\xc7\xc8\x4f\xa2\xc6\x48\x87\xbf\xf0\xa6\xc0\xcf\xb8\xc6\x3f\xef\x16\x08\x03\xb0\x1d\x3c\x7e\xf9\xf6\x06\xab\xad\x7f\xe5\x3c\x77\xc8\xed\x2a\x5b\x9e\x44\xf1\xd6\x74\x62\x0c\x05\x2d\x7b\x56\xcc\xa1\x25\xe5\xd7\xe5\x99\xa7\x3c\xa1\x2c\x9d\x3f\xf3\x95\x91\x73\x47\xec\xda\x84\x37\xbf\xbe\xba\x97\x3b\xa0\x3c\x99\x38\xa1\x8c\x1d\xfe\x36\x00\xea\x2f\x14\x6b\x9b\x47\xb9\x6e\xb9\xb1\xde\x75\xf5\x0f\x5f\x29\xa3\x34\x35\x05\xad\x47\x49\x9a\x2e\x15\xdf\xbf\xae\x75\x0a\x17\xda\xb2\x36\xff\x05\x00\x00\xff\xff\xdd\xdb\xd0\x5d\x1a\x04\x00\x00")

func imagesBaseCleanInstallBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseCleanInstall,
		"images/base/clean-install",
	)
}

func imagesBaseCleanInstall() (*asset, error) {
	bytes, err := imagesBaseCleanInstallBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/clean-install", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypointMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\x61\x73\xdb\xb8\x11\xfd\x2c\xfc\x8a\x3d\x76\x6e\x2a\xe5\x68\xd2\x92\xcf\x8e\x4f\x4d\x3e\xa8\xb6\x92\x68\xe2\xca\x19\x4b\xa9\x9b\x49\x3d\x09\x08\x2e\x49\x8c\x41\x80\x05\x40\xc9\x6c\x27\xff\xbd\xb3\x20\xed\xc8\xc9\x7d\xb0\x2c\x90\xc0\xdb\xb7\xef\x3d\xac\xd2\x17\xec\xc2\x34\x9d\x95\x65\xe5\x61\x76\x3c\x3d\x87\x6d\x85\xf0\xbe\xcd\xd0\x6a\xf4\xe8\x60\xd1\xfa\xca\x58\x97\x30\x76\x25\x05\x6a\x87\x39\xb4\x3a\x47\x0b\xbe\x42\x58\x34\x5c\x54\x08\xc3\x9b\x18\xfe\x89\xd6\x49\xa3\x61\x96\x1c\xc3\x98\x36\x44\xc3\xab\x68\xf2\x37\xd6\x99\x16\x6a\xde\x81\x36\x1e\x5a\x87\xe0\x2b\xe9\xa0\x90\x0a\x01\x1f\x04\x36\x1e\xa4\x06\x61\xea\x46\x49\xae\x05\xc2\x5e\xfa\x2a\x14\x19\x20\x12\xf6\x69\x00\x30\x99\xe7\x52\x03\x07\x61\x9a\x0e\x4c\x71\xb8\x0b\xb8\x67\x0c\x00\xa0\xf2\xbe\x99\xa7\xe9\x7e\xbf\x4f\x78\x60\x99\x18\x5b\xa6\xaa\xdf\xe5\xd2\xab\xd5\xc5\x72\xbd\x59\x1e\xcd\x92\x63\xc6\x3e\x6a\x85\xce\x81\xc5\xff\xb4\xd2\x62\x0e\x59\x07\xbc\x69\x94\x14\x3c\x53\x08\x8a\xef\xc1\x58\xe0\xa5\x45\xcc\xc1\x1b\xe2\xb9\xb7\xd2\x4b\x5d\xc6\xe0\x4c\xe1\xf7\xdc\x22\xcb\xa5\xf3\x56\x66\xad\x7f\x26\xd0\x23\x2b\xe9\xe0\x70\x83\xd1\xc0\x35\x44\x8b\x0d\xac\x36\x11\xfc\x7d\xb1\x59\x6d\x62\x76\xbb\xda\xbe\xbb\xfe\xb8\x85\xdb\xc5\xcd\xcd\x62\xbd\x5d\x2d\x37\x70\x7d\x03\x17\xd7\xeb\xcb\xd5\x76\x75\xbd\xde\xc0\xf5\x1b\x58\xac\x3f\xc1\xfb\xd5\xfa\x32\x06\x94\xbe\x42\x0b\xf8\xd0\x58\xe2\x6e\x2c\x48\x92\x0e\xf3\x84\x6d\x10\x9f\x15\x2f\x4c\x4f\xc6\x35\x28\x64\x21\x05\x28\xae\xcb\x96\x97\x08\xa5\xd9\xa1\xd5\x52\x97\xd0\xa0\xad\xa5\x23\xf3\x1c\x70\x9d\x33\x25\x6b\xe9\xb9\x0f\xeb\x9f\xda\x49\xd8\x8b\x94\xb1\xf4\x05\xdb\x92\x85\x54\x17\x6b\xd4\xde\x81\x69\x89\x06\x21\xa3\xf6\xb6\x6b\x8c\xd4\x3e\x81\x95\x9f\xb3\x23\xd8\x73\xe9\x5d\xe0\xb2\x59\xbd\xfd\xb8\xb9\x99\xb2\x23\xc2\xd4\x80\x0f\x28\x1c\x8c\xb9\x2d\x77\x9f\xa7\x77\x31\xf4\x5f\xe6\x77\x31\xa0\xde\x7d\x9e\xdf\x4d\x58\x5f\x87\x2b\x65\xf6\x0e\x5a\x47\x1e\x34\x68\x0b\x63\x6b\x30\x41\x05\x2e\x7a\xa6\x52\x07\x9a\x91\x36\x39\x46\x20\x8c\xa6\xa0\xa0\x85\x9d\xe4\xf0\x35\x37\xe2\x3e\x28\x86\xe2\x2b\xfb\x92\x61\x61\x2c\x7e\x81\x3d\x42\xc5\x77\x48\x10\x2d\x57\xaa\x83\x28\x33\xc6\x63\x1e\x05\x24\xa9\xa5\x27\x3d\x00\x77\x68\x3b\x5f\x91\x54\xa8\x28\x66\xca\xe8\xb2\xcf\xa8\xf4\x09\x63\xb7\x08\x82\xeb\xbe\x21\x87\x3a\x7f\x6c\x92\xb8\x86\xa0\x37\xd6\x08\x32\x8a\xd6\x56\x96\x25\x5a\x70\x9e\x5b\x4a\x51\xcf\xb9\x27\x10\xb1\xef\xca\xc1\x9e\xd0\xf6\x08\xdc\x22\xe4\x46\x23\x34\x96\x58\xd7\x74\x86\xeb\x8e\x30\x77\x92\x3c\xa3\x07\xe6\xb0\xf7\x84\xb1\xf5\xf5\x76\x39\xef\x6b\x1f\x9a\x84\x39\x70\x07\x1c\x9c\xd4\xa5\xa2\x04\x4c\x93\x7f\x85\x5b\x18\x43\xeb\x7a\x1c\xd5\xf5\x71\xf1\xb9\x92\x59\xd2\x8b\x5f\xf3\x7b\x74\x20\x3d\x20\x77\x92\xd2\x60\x20\x6b\xa5\xca\xa1\x31\xd6\xf3\x4c\x75\x71\x90\xa9\xb7\x89\x38\x6b\xba\x2c\xe4\xf6\xbe\xe2\x9e\x0e\xe6\x06\xdd\x10\x9c\x14\x96\xdf\x9b\x3c\x88\x0f\x07\x57\xd3\xf1\xc1\xa9\x1f\x93\x04\x9e\xa0\x7e\xce\x51\x9a\x42\xef\x66\xf0\x36\xf4\xe0\x92\x85\x2d\x1d\xa5\x88\x35\x5c\xdc\x13\x4e\xcd\xa5\x66\x4c\xd6\x44\x18\xc6\x6c\x14\x19\x17\x85\xcf\xd4\xc9\x52\x93\xf2\xa3\xc8\x75\x4e\x70\xa5\x22\xc6\x46\x91\x32\x65\xc4\x26\x81\x6d\x87\xae\x17\xd2\x55\xa6\x55\x39\x64\xfd\xfd\x12\x50\x73\x61\x4d\x0c\x59\xeb\x49\x7e\x25\x75\xfb\x40\x19\x1c\xf8\x77\xa6\xfd\xab\x25\x89\x83\xc7\x06\x4a\xf4\x3d\x0c\xd7\x5d\x65\xf6\x84\x3c\x4c\xa9\x9a\xeb\x97\xc3\x7c\xd2\xed\x03\x2d\x8f\x1a\x5e\xa2\x0b\x2f\x06\x7e\xc9\xcb\xa4\xf2\xb5\x7a\x3c\xe5\xe6\x69\x5a\x4a\x5f\xb5\x59\x22\x4c\x9d\xd6\x26\xeb\xfa\x8f\x4c\x99\x2c\x3d\x3d\x9b\xe5\xc5\xb9\x98\xe5\x67\xc5\xef\xe7\x67\xc7\x53\x71\x9e\x4f\xf3\xe2\xe5\xec\xf4\xec\xe4\xfc\x8f\xd3\xb3\x3f\xf2\xd9\xa9\x38\xce\x8a\x69\xda\xdc\x97\x03\xfe\xf0\xef\x4b\xa0\x90\x94\xe6\x2f\x57\xd3\x63\x26\x8c\x76\x1e\x9c\x2c\xad\xaf\xa5\x86\xd7\x70\xf2\x3b\x63\x45\xab\x45\x90\x73\x3c\x81\xff\xb1\x51\x9a\x52\x2e\x77\xa8\x3d\xfc\xd7\xd4\x99\xc4\xc7\xac\xa3\xa3\x94\xd1\x28\xa7\x69\xae\x14\xe9\xf6\x61\x75\x39\x0d\xe6\x71\xd8\x57\x52\x61\x38\xfe\xd8\x4f\x5f\x3a\x97\x98\x68\xf4\xd4\x7b\x3a\x4b\xc9\xee\x46\xe6\x6c\x34\xa8\xb0\x2a\xb5\xb1\x38\x1e\x9c\x4a\x36\xab\xb7\x17\xef\xae\x2e\x27\x2c\x00\x95\x96\x67\xfd\x2d\xb0\xc8\x55\x74\x98\x1d\x61\xea\x9a\x12\x1a\xfe\x6c\xe9\xa0\xb0\xa6\x0e\x03\x8b\x56\x6c\x24\x0b\x50\xa8\xc7\x43\x72\x26\xf0\x0a\x66\xd4\xdc\x48\x99\x32\x79\xc3\x3d\x57\xe3\x68\x6d\x3c\xa0\x36\x6d\x59\xd1\x99\xb6\xcf\xac\x37\x07\x55\x7e\x89\x26\x6c\xf4\x8d\x8d\x44\x9d\xf7\x73\x0c\xe6\xaf\xbf\x87\xf1\x2e\x7e\x16\xcc\xc0\x98\xda\x3b\x0c\x33\x8c\x0d\x8d\x28\x19\x02\xb5\x59\xbd\xbd\xd9\xfe\x63\xb5\xfe\xed\x84\xca\xd4\xdc\x8b\x0a\x5c\xe7\x3c\xd6\xf9\x84\x8d\x04\x81\xd3\xbd\x1c\x8b\x8a\x6b\x82\xde\x04\x89\x62\x98\x4e\x9e\xe4\x5a\x1b\x2f\x8b\x6e\x2c\x62\x38\x50\x8c\x0a\x1d\x3c\x08\x3b\xc7\x8f\x26\xff\x76\x32\x99\xb0\xd0\xf6\x07\x2b\xb5\x57\x7a\x1c\xdd\xf2\xf0\x6b\xf7\x8c\x67\x92\x24\x51\x5f\x86\x68\xbc\x3a\x12\x41\x42\x5a\xfe\xf2\xfa\xc7\x5a\x4f\x42\x06\xc4\x62\x1c\x2d\x1f\x7a\x40\x5e\x78\x9a\x83\x81\xc0\x1c\x7e\xdd\xd1\xd9\xe1\x4c\x14\xd3\xf3\x09\x1b\x8d\x2c\xfa\xd6\x6a\xd2\x35\x28\xf6\xf4\x9b\xd1\x8f\xd6\x3f\xf1\x3a\x86\x7b\xc4\xe6\x71\xb0\xa2\xde\xb1\x67\xc5\x6f\x50\xa0\xdc\xe1\xd3\x88\x8e\x9f\xc6\x86\x37\x81\xc4\xaf\xbb\x7f\xeb\x28\x86\x27\x13\xa9\xcd\xa1\xa1\xe5\x03\x8a\xf1\xd3\x8b\xe0\xe7\x52\xef\xa4\x35\x7a\x3c\x99\xb0\x6f\xec\xff\x01\x00\x00\xff\xff\x39\x8f\xbf\x84\x4f\x09\x00\x00")

func imagesBaseEntrypointMainGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypointMainGo,
		"images/base/entrypoint/main.go",
	)
}

func imagesBaseEntrypointMainGo() (*asset, error) {
	bytes, err := imagesBaseEntrypointMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint/main.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":         imagesBaseDockerfile,
	"images/base/clean-install":      imagesBaseCleanInstall,
	"images/base/entrypoint/main.go": imagesBaseEntrypointMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile":    {imagesBaseDockerfile, map[string]*bintree{}},
			"clean-install": {imagesBaseCleanInstall, map[string]*bintree{}},
			"entrypoint": {nil, map[string]*bintree{
				"main.go": {imagesBaseEntrypointMainGo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
