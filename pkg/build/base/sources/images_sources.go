// Code generated by go-bindata.
// sources:
// ../../../../images/base/Dockerfile
// ../../../../images/base/clean-install
// ../../../../images/base/entrypoint
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x6b\x6f\xdb\x46\xd6\xfe\xce\x5f\x71\x20\x05\xa9\x9d\x8a\xa4\x2f\x71\xeb\xe6\x85\xfb\x42\x55\x9c\x54\xa8\x23\x05\x92\x92\x22\xd8\x5d\x04\xc3\xe1\x11\x39\xd5\x70\x86\x3b\x17\xd1\x4a\x9a\xff\xbe\x38\x43\xea\xe6\x24\xdd\x2e\xba\x5b\x14\x50\xcc\x39\x97\xe7\x5c\xe7\x99\x3e\x8c\x74\xbd\x31\xa2\x28\x1d\x5c\x9c\x9d\x5f\xc3\xa2\x44\xf8\xc5\x67\x68\x14\x3a\xb4\x30\xf4\xae\xd4\xc6\x26\x51\x3f\xea\xc3\x9d\xe0\xa8\x2c\xe6\xe0\x55\x8e\x06\x5c\x89\x30\xac\x19\x2f\x71\x7b\x32\x80\xb7\x68\xac\xd0\x0a\x2e\x92\x33\x38\x21\x81\x5e\x77\xd4\x3b\xfd\xbf\xa8\x0f\x1b\xed\xa1\x62\x1b\x50\xda\x81\xb7\x08\xae\x14\x16\x96\x42\x22\xe0\x3d\xc7\xda\x81\x50\xc0\x75\x55\x4b\xc1\x14\x47\x68\x84\x2b\x83\x9b\xce\x48\x12\xf5\xe1\x5d\x67\x42\x67\x8e\x09\x05\x0c\xb8\xae\x37\xa0\x97\x87\x72\xc0\x5c\x00\x4c\xff\x95\xce\xd5\xcf\xd2\xb4\x69\x9a\x84\x05\xb0\x89\x36\x45\x2a\x5b\x41\x9b\xde\x8d\x47\xb7\x93\xf9\x6d\x7c\x91\x9c\x05\x95\x37\x4a\xa2\xb5\x60\xf0\x9f\x5e\x18\xcc\x21\xdb\x00\xab\x6b\x29\x38\xcb\x24\x82\x64\x0d\x68\x03\xac\x30\x88\x39\x38\x4d\x78\x1b\x23\x9c\x50\xc5\x00\xac\x5e\xba\x86\x19\x8c\xfa\x90\x0b\xeb\x8c\xc8\xbc\x3b\x4a\xd6\x16\x9d\xb0\x47\x02\x5a\x01\x53\xd0\x1b\xce\x61\x3c\xef\xc1\x4f\xc3\xf9\x78\x3e\x88\xfa\xf0\xeb\x78\xf1\xf3\xf4\xcd\x02\x7e\x1d\xce\x66\xc3\xc9\x62\x7c\x3b\x87\xe9\x0c\x46\xd3\xc9\xf3\xf1\x62\x3c\x9d\xcc\x61\xfa\x02\x86\x93\x77\xf0\xcb\x78\xf2\x7c\x00\x28\x5c\x89\x06\xf0\xbe\x36\x84\x5f\x1b\x10\x94\x46\xcc\x29\x67\x73\xc4\x23\x00\x4b\xdd\x02\xb2\x35\x72\xb1\x14\x1c\x24\x53\x85\x67\x05\x42\xa1\xd7\x68\x94\x50\x05\xd4\x68\x2a\x61\xa9\x98\x16\x98\xca\xa3\x3e\x48\x51\x09\xc7\x5c\xf8\xf2\x59\x50\x49\x14\xf5\x61\x25\x54\x0e\x5c\x7a\xeb\xd0\x40\xc6\x28\xd4\x8a\x15\x18\x12\xfb\x42\x1b\xb0\x1b\xeb\xb0\xca\xe1\x5b\xc8\x35\x5f\xa1\x01\xae\xd5\x52\x14\xde\x04\xab\xd4\x11\x39\x64\x28\x75\x33\x00\xdb\x41\x5e\x6a\x29\x75\x43\x80\x0c\x2e\xd1\xa0\xe2\x68\x9f\x45\xfd\x50\x56\xdb\xd5\x75\x49\xd5\x40\xbb\x72\xba\x0e\xc5\x6d\xc4\x4a\xa4\xf3\xae\x1a\x69\xe7\x34\x1d\x69\x45\x1d\x83\x66\xac\x1c\x9a\x25\xe3\x98\x1e\xd8\xc9\x71\x8d\x52\xd7\x68\x6c\x62\x30\x2f\x99\x4b\xb8\xae\xd2\x4c\xea\x22\xbd\x38\x3b\x7f\x9a\x9e\x5d\xd1\xff\xc6\x2b\x4a\x4e\xdc\xd9\x8c\xa9\x41\x85\x8a\xdb\x68\x62\xbe\xf5\xf0\xe7\x0d\x7f\x97\x9e\xfd\x90\x9e\x5f\x7e\x66\x58\xa8\x98\xc5\x4a\xab\xb8\x36\x62\x2d\x24\x16\x98\x1f\x9a\x8f\x86\xb3\x97\xd4\x29\xb7\xef\xc7\xaf\x86\x2f\x6f\x6f\x7a\x3e\xf3\xca\xf9\x67\xe7\x3f\x24\x67\x4f\x7b\xd1\x8b\xd9\xf4\x15\x3c\xfa\xb8\x17\xf8\x44\xd5\xb1\xe8\xa8\x51\xe1\xf9\xed\x4f\xe3\xe1\xe4\xfd\x8b\xd9\x74\xb2\xb8\x9d\x3c\xbf\x51\x5a\x09\x4a\x09\xe3\x4e\xac\x11\xac\xd3\xb5\x05\xab\x2b\x04\x56\x3b\x68\x58\xe8\x07\x3b\x68\x87\x55\xd8\x30\xbc\x51\x1f\x18\x18\x64\x12\x98\x29\x7c\x85\xca\x0d\xa0\xc1\x6f\x0c\xc2\x09\xcb\x4e\xbd\x25\x3f\x84\xd1\x69\x28\xd0\x01\x03\x87\x55\xad\x0d\x33\x1b\xb8\x9d\xbc\x05\x56\x30\xa1\x92\x10\xc5\x1f\xa3\x89\xa2\xd1\xf4\xf5\x3b\xe0\x12\x99\x8a\x85\xb2\x8e\x49\x09\xa9\xb7\x26\x95\x9a\x33\x99\x66\x42\xa5\x47\x87\xd1\xec\xcd\x04\x78\x59\xe9\x1c\xbe\xbd\xff\x63\xc9\xa8\x0f\x2f\xd1\x41\x8e\x35\xaa\x1c\x15\x17\x68\xa3\x7e\x58\x80\xfb\xd6\x05\x26\x0d\xb2\x7c\x03\x25\xb3\xcf\xc0\xda\x72\x40\x49\x19\x80\x55\xac\xce\x83\x74\x9b\x93\xcc\xe8\x15\x2a\xc8\x75\xa3\x40\x28\xa7\xe1\x04\x19\x2f\xc3\x68\x83\x14\x0a\x4f\xa9\x67\x63\xa8\x19\x5f\xb1\x02\x2d\x28\xea\xd8\xb0\x41\x8c\x57\x60\xd1\xac\x05\x47\x0b\x27\x5d\xfd\x4f\x83\xf4\x68\x36\x86\x93\x5d\xd5\xbb\x8f\x0f\x4d\xd0\x2c\xaf\xf6\x0b\x9b\xb6\xa7\x56\xa8\x9c\x0d\xd2\x95\xb0\x7c\xaf\x12\xe6\xd3\x5b\xb4\x20\x9c\x45\xb9\x6c\xc3\x55\xd0\x60\x9b\x61\x5f\xc3\x89\xc1\x4a\xaf\xa9\x7c\x5e\x35\x4c\xd1\x7e\xda\x4e\xed\x16\x25\xe1\x78\x21\x14\x93\x72\x43\x9a\xb9\xb0\x61\x37\xae\x2a\x5b\xd0\x3e\xfc\x4d\x7b\xa3\x98\xcc\xff\x77\xc3\x15\x4a\x7c\xd4\x11\x7f\x8f\xc2\xae\xdf\x43\xed\x4c\xd8\x8d\x5d\x83\x14\x59\xf7\xf7\xd9\x4e\x70\x9f\xd5\xc3\x4f\xca\x19\xc6\x57\x20\x6a\x47\x11\x59\x10\xb5\xd1\xde\xe1\x05\xa0\x2b\x9d\xd6\x12\xac\xe6\xcc\x81\x77\x42\xc6\x52\x28\x7f\x0f\x95\xf6\xca\x01\x66\x9d\x82\xcf\x71\x0d\x2b\x6a\xbe\xad\xd5\x8c\xd9\x12\x38\x8b\x39\x1a\x47\xab\x96\x85\x22\x79\x23\xc1\xd8\x8d\xe2\x9d\xdc\xe3\xc7\xb0\xa4\xda\xa4\x52\x64\xbb\x85\xd5\xfe\xd2\x8f\x50\xc2\x25\x8e\x99\x02\x5d\x42\x45\xb1\x29\xc4\x8a\x55\x08\xbd\x6d\xa0\xae\xaa\xe9\x1a\xb5\xb1\x45\xe7\xeb\xa4\x2b\x55\x0f\xe2\x1c\x25\x3a\xdc\xbb\x31\x15\xc4\xcb\x2f\xfa\xa9\xbc\x74\x22\xf6\x16\xcd\xb1\xab\x27\x9f\x29\xa3\xe3\x0f\x95\x9f\x7c\x55\xf8\x0b\x9e\xc2\x40\xc6\x4b\xfb\xef\xfc\x7c\x29\x19\xd4\x0c\xee\xa1\x26\xa5\xfd\x2f\xa8\x53\x7a\xb9\x93\x7f\xca\x42\xc6\xac\xe0\x5f\x05\x8e\xbc\xd4\xd0\x9b\x21\xcb\x7f\x79\x65\x8b\x1b\xa5\x7b\xf0\xe3\x8f\xc7\x09\xdb\x8e\x47\x42\x77\xdf\x5e\xb3\x3d\xe6\x4e\x02\xaa\x30\x4e\x9f\x75\xe8\xce\x7c\xae\x15\x42\xd7\xf9\xe1\xa6\xee\xc6\xbb\x47\x1b\x2d\xc7\xcc\x17\x87\xca\xeb\x8e\x91\x31\xba\x9a\x0d\x32\x87\x90\xe3\x92\x79\xe9\xba\xdb\xb7\x1d\xa7\xbd\x42\x1c\x6f\x55\x76\x7e\xab\x55\x2e\x0c\xc4\x75\x1b\xc9\x81\xec\xe3\xc7\x87\x9a\xad\xbd\x9d\xf9\x1f\x1f\x8a\xa7\xad\x40\xe2\x74\x15\xb6\xef\xb8\x9b\xde\xd1\x64\x0c\x99\x50\xcc\x08\xb4\xb4\x12\x53\x5d\xbb\x94\x2b\x41\x3b\x9b\x56\xd4\xf4\xf9\xf4\x24\x43\xe5\x4a\x44\x99\xa3\x39\x7d\x46\xf4\x01\x9a\x72\x03\x29\x34\x25\x73\x50\xa2\xc1\x70\x99\x8c\x26\xe3\xf7\x6f\x6f\x67\xf3\xf1\x74\x72\xd3\x3b\x4b\xbe\x4f\xae\x7a\xbb\xef\xe1\x36\x7c\x33\xbb\xbb\xe9\x6d\xd7\x92\x75\xda\xb0\x02\x93\x42\xeb\x42\x22\xab\x85\x0d\x7b\x69\xbf\x4d\x63\x83\x12\x99\xc5\x54\xa1\x6b\xb4\x59\xc5\xb5\xf4\x85\x50\x36\xed\x85\xa4\xe1\x7d\xad\x8d\x83\xe1\x6c\xf4\xf3\xcd\xa3\x93\xbc\x5e\x15\x10\xd3\x85\xad\x5c\xcc\x0c\x2f\x85\x43\xee\xbc\xc1\xdf\x81\x78\xcd\x37\x36\xad\x6b\xfe\xdd\x53\x94\xed\xaf\xc4\xf4\x9b\xd3\x83\xd2\xb6\xb6\x08\xe8\x62\x38\xfb\x69\x78\x77\x77\xd3\xe3\x4a\x6c\x3d\xc6\x8f\x3e\x92\x9b\x4f\xf1\xfa\xd1\xc7\x83\x20\x3f\x25\xae\xf8\xd0\xfb\xa2\x95\x10\x69\x2b\xbc\x8d\xfc\x53\xfb\x67\x67\xff\xd3\x81\x5e\x58\x48\xb1\x9d\xdf\x41\x1c\x1b\x74\x66\x03\x57\x10\xc7\xda\xbb\xda\x3b\x48\x5d\x55\x53\x39\xc8\x17\x74\x26\xc9\xda\x81\xbe\x2d\xd9\xc5\xd5\x77\xd6\x57\xc7\xc2\x5f\x68\xa0\x83\xd2\xee\x8f\x1d\x33\x10\x8f\x8e\x0f\xe3\xfb\x0f\xcb\xaf\x58\xa3\xe9\x34\xc7\x87\x87\xed\xc4\x8d\xa0\x39\xa2\x46\x3a\xba\xfe\xdb\x4e\x98\x8d\x47\x8b\xbb\x7d\x93\xac\xcf\x93\xf3\xa7\xc9\xd9\x7f\x54\xd0\xd3\x87\x89\x5b\xce\xef\x60\xd7\x55\x85\x70\xa5\xcf\x1e\x76\x92\x15\x85\x4d\xb9\x11\x31\xdd\x23\x36\xed\x1a\xcb\xa6\xc4\x18\xa4\x66\x79\xfa\xe8\xe3\x31\xb4\x4f\x69\x1b\x47\xfc\xd9\x41\x7b\xf5\x6c\x3b\x82\x76\x51\x42\x4d\xf0\x7b\x48\xe3\xfd\x87\xd1\xc3\xb0\xa3\x3e\x38\x94\x72\x77\x39\x3a\x1a\x19\xe1\x88\xb6\x08\xb5\x65\xe2\x27\xc2\x41\x23\x28\x7b\x25\xf2\xd5\xee\x85\xb0\x1b\x5e\x40\xb5\x3e\xfd\xaf\xf1\x6e\xe2\x80\x7b\xd3\x2d\x04\x62\xa8\x1d\x42\xbc\x17\xce\x12\x79\x9a\x8f\x5f\xce\x16\xaf\xc6\x93\x6f\x2f\x07\x81\x76\xce\xc7\x2f\x17\xb7\xb3\x57\x70\xd2\x94\x82\x97\x60\x30\xc6\x7b\xe4\xde\x05\x46\x73\x08\x2f\xf3\xc5\x07\x21\x25\x3b\xe4\x1b\xb6\xd4\xcd\xfb\xcc\x17\x09\x2f\xc4\xff\x8b\xfc\xe6\x9c\xf8\xf7\xd5\xf7\xd1\x7c\x31\x7d\x3d\x1f\xbf\x9c\x0c\xef\x0e\xfc\x51\xd6\x1a\xc3\xea\x1d\xa6\xf0\x16\xd5\xde\xb4\x8f\x26\x46\x7b\xda\x99\x4d\xad\x05\x51\x5f\x7a\xad\xd4\xab\x22\xcd\xbc\x90\x2d\x25\x2b\x75\xb3\x23\xcc\xf4\xd5\x45\x7d\x08\x77\x47\xa0\x4d\xe1\xe4\x37\x6f\x1d\x48\x74\x16\xbc\x25\x72\x0e\xbe\x6e\x69\x37\xd1\x9e\xc2\x42\x86\x4b\x6d\xda\x12\x08\xe5\x69\xd3\x6b\x45\x5d\xdd\x21\x22\x80\x25\x3d\x9d\xe9\xc5\x47\xf7\xbd\x2a\xda\xd2\x6e\x11\x0b\x0b\xaf\xc7\xcf\xcf\xa3\xfe\x0e\x50\x83\x20\x71\x8d\xb4\xf4\x02\x84\x3d\xf0\xee\xd1\xd6\xb2\xed\xbf\x41\x6f\x1f\x5c\x6f\x00\xbd\x07\x34\xba\x07\xff\xa0\xf7\x29\x06\x0a\xba\x6f\x2b\x0d\x19\x06\x8f\x5b\x5a\x4b\x0d\xb4\x66\x46\xe8\x10\xdf\x96\xe2\xb6\xd5\x1e\x04\xd2\x2a\xd1\x0d\x00\x1d\x4f\xa8\x76\x93\xe9\xe2\xf6\xd9\x2e\x69\x4f\xb4\x92\x9b\x27\x01\x7a\xae\x79\x78\x62\x84\x57\xe2\x20\x98\xdd\xe3\x23\x59\x7a\xb4\x1a\x91\xe7\xa8\x80\x39\x72\xed\x44\x85\xd1\xed\x64\x31\x7b\xf7\x7a\x3a\x9e\x2c\x28\xa2\x07\x31\x3c\x08\xd0\xd2\x37\xe2\x01\x14\xdb\x57\xee\x1c\x7a\xed\x84\x2e\xd8\x46\xfc\x6a\x38\x02\x96\xe7\xe1\xc1\xcd\xac\x15\x85\x22\x94\x07\x5d\x78\xb0\x0a\x8e\x69\x44\x9e\x0a\x6b\x3d\xda\xf4\xf2\xf2\xfb\xa7\xfd\xf0\x6f\xae\x2b\xd2\x8e\x2f\xae\xaf\xaf\xaf\x2f\x2e\xaf\xae\xfe\xa2\x9d\xcb\xcb\x1f\x2e\xae\xae\x9f\x5e\x5f\x46\xff\x0a\x00\x00\xff\xff\x32\x4c\x39\x33\xe4\x11\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseCleanInstall = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x51\x6f\xdb\x36\x14\x85\xdf\xf9\x2b\xce\xac\x62\xd8\x8a\xc8\x4a\xf3\x32\x60\xc5\x86\x79\x49\x86\x19\x2d\x6c\x20\x76\x57\x14\xdb\x1e\xae\xa8\x2b\xe9\x22\x12\xc9\x91\x57\x75\xfc\xef\x07\x2a\x71\x10\xa3\xd1\x93\xc8\x73\xc8\xf3\xf1\x90\xc5\x77\x55\x2d\xae\x4a\xbd\x31\x05\xae\x7d\x38\x46\xe9\x7a\xc5\xd5\xe5\xbb\x9f\xb0\xef\x19\x1f\xa6\x9a\xa3\x63\xe5\x84\xd5\xa4\xbd\x8f\x69\x69\x0a\x53\xe0\xa3\x58\x76\x89\x1b\x4c\xae\xe1\x08\xed\x19\xab\x40\xb6\xe7\x93\x72\x81\xbf\x38\x26\xf1\x0e\x57\xcb\x4b\xfc\x90\x0d\x8b\x27\x69\xf1\xe3\x7b\x53\xe0\xe8\x27\x8c\x74\x84\xf3\x8a\x29\x31\xb4\x97\x84\x56\x06\x06\x3f\x58\x0e\x0a\x71\xb0\x7e\x0c\x83\x90\xb3\x8c\x83\x68\x3f\xc7\x3c\x6d\xb2\x34\x05\xbe\x3c\x6d\xe1\x6b\x25\x71\x20\x58\x1f\x8e\xf0\xed\x4b\x1f\x48\x67\xe0\xfc\xf5\xaa\xe1\xe7\xaa\x3a\x1c\x0e\x4b\x9a\x61\x97\x3e\x76\xd5\xf0\x68\x4c\xd5\xc7\xf5\xf5\xed\x66\x77\x5b\x5e\x2d\x2f\xe7\x25\x9f\xdc\xc0\x29\x21\xf2\x7f\x93\x44\x6e\x50\x1f\x41\x21\x0c\x62\xa9\x1e\x18\x03\x1d\xe0\x23\xa8\x8b\xcc\x0d\xd4\x67\xde\x43\x14\x15\xd7\x5d\x20\xf9\x56\x0f\x14\xd9\x14\x68\x24\x69\x94\x7a\xd2\xb3\xb2\x4e\x74\x92\xce\x0c\xde\x81\x1c\x16\xab\x1d\xd6\xbb\x05\x7e\x5f\xed\xd6\xbb\x0b\x53\xe0\xf3\x7a\xff\xe7\xf6\xd3\x1e\x9f\x57\x77\x77\xab\xcd\x7e\x7d\xbb\xc3\xf6\x0e\xd7\xdb\xcd\xcd\x7a\xbf\xde\x6e\x76\xd8\xfe\x81\xd5\xe6\x0b\x3e\xac\x37\x37\x17\x60\xd1\x9e\x23\xf8\x21\xc4\xcc\xef\x23\x24\xd7\xc8\x4d\xee\x6c\xc7\x7c\x06\xd0\xfa\x47\xa0\x14\xd8\x4a\x2b\x16\x03\xb9\x6e\xa2\x8e\xd1\xf9\xaf\x1c\x9d\xb8\x0e\x81\xe3\x28\x29\x5f\x66\x02\xb9\xc6\x14\x18\x64\x14\x25\x9d\x67\xbe\x39\xd4\x32\xbf\xa5\x15\x92\x8d\x12\x14\xec\x2c\x85\x34\x0d\x94\x9b\x99\xef\x68\x1c\xbd\xc3\x8d\xb7\xf7\x1c\x65\xcc\x49\x81\x54\x39\xba\x99\x45\x5c\x52\x1a\x86\x39\x96\xec\x3d\x75\x9c\x4c\x91\x53\x73\x82\x83\x1d\x98\x66\xa6\x29\xcc\x91\x93\x73\x6c\x39\x25\x8a\xc7\xd3\x52\x50\x54\x69\xc9\x6a\x7e\xaa\xe0\x65\xb7\x7c\x5c\x55\x9e\x74\x09\x9a\x6f\x30\x81\xeb\xa7\x1f\xeb\x9d\xd3\x48\xf6\xde\x98\xc4\x8a\xd2\x83\x63\xe4\x07\x51\x63\xa4\xc5\xdf\x78\x53\xe0\x17\x5c\xe2\xdf\xf7\x33\x84\x01\xd8\xf6\x1e\xbf\x7e\x7f\x85\xc5\xc6\x3f\x73\x9e\x3a\xe4\x66\x91\x2d\x0f\xa2\x78\x67\x5a\x31\x86\x82\x96\x1d\x2b\xa6\xd0\x90\xf2\xf3\xf0\xc4\x53\x1e\x51\x96\xce\x9f\xf8\xca\xc8\xb9\x23\x76\x4d\xc2\xe2\xcd\x6f\x8b\x67\xff\x7c\x0a\x94\x47\x13\x47\x94\xb1\xc5\x3f\x06\x40\xf5\x95\x62\x65\xf3\x63\xae\x1a\xae\xad\x77\x6d\xf5\xf6\x85\x32\x48\x5d\x51\xd0\x6a\x90\xa4\xe9\x5c\xf1\xdd\xf3\x58\xc7\x70\xa6\xbd\x1c\x4f\x29\x56\xa9\xa7\xc8\x55\xe3\xed\x2b\xb3\x23\xb9\x57\x66\x07\x6f\x69\xa8\xde\x9a\xff\x03\x00\x00\xff\xff\x02\x8e\x04\x89\x60\x04\x00\x00")

func imagesBaseCleanInstallBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseCleanInstall,
		"images/base/clean-install",
	)
}

func imagesBaseCleanInstall() (*asset, error) {
	bytes, err := imagesBaseCleanInstallBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/clean-install", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypoint = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xdf\x8f\xdb\x36\x0c\x7e\xae\xff\x0a\x2e\xe9\x43\x0b\xc4\x76\x7b\x18\x06\xac\x6b\x8b\xdd\xee\xae\x68\xd0\x22\x29\x2e\xe9\xba\x62\x18\xae\xb2\x44\xdb\x44\x6c\xca\x93\xe4\x73\x82\xa2\xff\xfb\x40\xd9\xb9\x5f\xdd\x80\xe5\x25\xb6\xf5\x91\xfc\x48\x7e\xa4\xe6\x3f\xe4\x05\x71\x5e\x28\x5f\x27\xc9\x1c\xce\x6c\x77\x70\x54\xd5\x01\x4e\x9e\x3d\xff\x19\xb6\x35\xc2\xbb\xbe\x40\xc7\x18\xd0\xc3\x69\x1f\x6a\xeb\x7c\x96\xcc\x93\x39\xbc\x27\x8d\xec\xd1\x40\xcf\x06\x1d\x84\x1a\xe1\xb4\x53\xba\xc6\xe3\xc9\x02\x7e\x47\xe7\xc9\x32\x9c\x64\xcf\xe0\x89\x00\x66\xd3\xd1\xec\xe9\x2f\xc9\x1c\x0e\xb6\x87\x56\x1d\x80\x6d\x80\xde\x23\x84\x9a\x3c\x94\xd4\x20\xe0\x5e\x63\x17\x80\x18\xb4\x6d\xbb\x86\x14\x6b\x84\x81\x42\x1d\xc3\x4c\x4e\xb2\x64\x0e\x9f\x27\x17\xb6\x08\x8a\x18\x14\x68\xdb\x1d\xc0\x96\x77\x71\xa0\x42\x24\x2c\xbf\x3a\x84\xee\x45\x9e\x0f\xc3\x90\xa9\x48\x36\xb3\xae\xca\x9b\x11\xe8\xf3\xf7\xcb\xb3\x8b\xd5\xe6\x22\x3d\xc9\x9e\x45\x93\x8f\xdc\xa0\xf7\xe0\xf0\xef\x9e\x1c\x1a\x28\x0e\xa0\xba\xae\x21\xad\x8a\x06\xa1\x51\x03\x58\x07\xaa\x72\x88\x06\x82\x15\xbe\x83\xa3\x40\x5c\x2d\xc0\xdb\x32\x0c\xca\x61\x32\x07\x43\x3e\x38\x2a\xfa\x70\xaf\x58\x47\x76\xe4\xef\x01\x2c\x83\x62\x98\x9d\x6e\x60\xb9\x99\xc1\x6f\xa7\x9b\xe5\x66\x91\xcc\xe1\xd3\x72\xfb\x76\xfd\x71\x0b\x9f\x4e\x2f\x2f\x4f\x57\xdb\xe5\xc5\x06\xd6\x97\x70\xb6\x5e\x9d\x2f\xb7\xcb\xf5\x6a\x03\xeb\x37\x70\xba\xfa\x0c\xef\x96\xab\xf3\x05\x20\x85\x1a\x1d\xe0\xbe\x73\xc2\xdf\x3a\x20\x29\x23\x1a\xa9\xd9\x06\xf1\x1e\x81\xd2\x8e\x84\x7c\x87\x9a\x4a\xd2\xd0\x28\xae\x7a\x55\x21\x54\xf6\x1a\x1d\x13\x57\xd0\xa1\x6b\xc9\x4b\x33\x3d\x28\x36\xc9\x1c\x1a\x6a\x29\xa8\x10\xbf\x7c\x97\x54\x96\x24\x1e\x03\xa4\x16\xd0\x39\xdc\x53\x38\xbe\xb2\xed\xd9\xe3\xcd\x6b\x47\x1d\x96\x8a\x9a\x24\xd1\x96\x4b\xaa\x7a\x87\x57\x9d\xb3\xfb\xc3\x93\xa7\xf0\x35\x91\x86\xb5\x3b\x43\x0e\xd2\x0e\x72\x0c\x3a\xf7\x07\x1f\xb0\x35\xd3\x7f\xae\x2d\x4b\xdb\xd1\x99\xcc\xa3\xbb\x26\x8d\x99\xc9\xa3\x99\x56\x01\x5e\xbe\xbc\x58\xbf\x81\xd7\xff\xdb\x50\xb4\x91\xc6\xe8\x99\xb0\x49\xfe\xdc\x8c\x47\x7f\x25\x17\x7c\x4d\xce\x72\x8b\x1c\x5e\xcd\xde\x6e\xb7\x1f\xae\x3e\x5c\xae\xff\xf8\xfc\xea\xf1\xd7\xdb\x97\x17\xe9\xb7\xd9\xf7\xc0\xcd\x3d\xe4\xe6\xbf\xa0\xab\xf5\x0d\xee\xf8\x38\x82\xd6\x6f\x92\x6f\x49\x52\xd2\xfe\xaa\xb5\x3d\x87\x9b\xb2\xcc\x81\x51\xa3\xf7\xca\x1d\xc0\x72\x73\x80\xa1\x46\x96\x21\x72\xec\x53\x87\xad\xea\x44\x57\xc8\xa2\xd3\xa8\x29\x69\x4e\x6d\x7d\x58\x40\xd1\x07\xa8\x95\x6b\x45\xd9\x93\x2f\x19\xf3\x82\x58\x9c\xc5\x6d\x10\x63\x81\xaf\x6d\xdf\x18\x28\x10\xec\xc0\xa3\xf8\x9d\xb5\x41\xfa\x0f\xb5\xba\x1e\x45\xe4\x31\xf4\x64\xa0\xa0\x30\xd6\xbd\xb6\x03\x47\xd8\x8b\x88\xbd\x75\x37\x1d\xb7\xd6\x40\xea\xef\x7e\x9f\x38\x4c\x1d\x4a\x89\x53\x95\xde\xf4\xe7\x48\x22\xc6\x73\xa8\xcc\x98\xad\xf4\x71\xb2\x93\xae\xf9\x69\xa4\x4b\x19\x44\xf4\xbb\x60\xbb\x38\xd7\x03\xed\x28\xdf\x4c\x83\x78\xa3\x81\xb3\xa3\xf3\x25\x07\x74\xa5\xd2\x98\x1f\x7d\xd9\x01\xaf\xd1\x2d\x60\x40\x60\x99\x69\x1b\xc7\x28\xd4\xc4\x95\x87\xd2\xd9\x16\xbe\x18\xab\x77\xe8\xc0\xf5\x0c\x69\xda\x39\xba\xa6\x06\x2b\x34\x5f\x20\xcb\xb2\xc9\x8d\x14\x68\xdc\x65\x8d\xaa\x40\x35\xde\x42\xad\xba\x0e\xd9\xcb\x92\x68\xd5\x0e\x63\x02\xe0\x86\x05\xa8\xd6\x72\xe5\xc3\xbd\x48\xa3\xf0\x63\x0f\x52\x0b\x0e\xe3\xe3\xc2\xd9\x31\xed\xa3\x1e\x94\xae\x89\xf1\x8a\xcc\x1d\x51\x9c\x63\x13\x17\xb5\x74\x66\x02\xa4\x64\x00\xdb\x02\x8d\x41\x23\x0b\x4a\x8e\xd8\x1a\x04\x6a\x65\xc4\x85\x6b\x85\x8c\x4e\x89\x9d\x02\xc6\x01\x2c\x63\x96\x3c\x12\x59\x90\x17\x19\xdd\x4a\xad\x40\xad\x64\x53\x17\x36\xd4\xb0\xeb\x0b\x09\x17\x5d\x8c\xf4\x65\x59\x5b\x46\x0e\x1e\x1a\xda\x21\x0c\x28\x6d\x63\x0c\xe2\x4d\xec\xee\x70\x22\x29\x3e\xab\xa6\x39\x48\x51\x64\x03\x12\x57\x3d\xf9\x3a\xb2\xf3\x59\xf2\xc8\xb5\x90\x96\xe3\xdc\xdf\xda\x25\x8f\x8e\x42\xb9\xfd\x96\x8a\x08\xbb\x63\x61\x3a\x67\x4d\xaf\xc3\x15\xab\x16\xef\x94\x26\x4c\xc9\x28\xf0\xad\x6a\x1a\x28\x69\x2f\x81\x6b\x32\xa3\x90\xe3\x0e\x6b\x0e\xb2\xec\x6a\xe5\x8c\x28\x26\x66\x26\x38\xf2\xbe\x47\x98\xff\x78\xf2\xd3\x03\xd1\x55\x14\xea\xbe\xc8\xb4\x6d\xf3\xdd\xcd\x35\x99\x7a\xaa\x7c\xbe\x23\x36\x79\x34\xf4\xf9\xd1\x10\x75\x6d\x61\x26\x27\x33\x78\x0d\x23\xe4\x2e\xdd\x07\x8d\xb7\x8b\x82\xd8\xfc\x0b\x2e\x0a\x21\xd7\x8d\xf2\x3e\x37\x2d\xe5\xf4\xc0\xcd\x37\xb9\xca\x45\xa1\x9d\xc3\x94\x98\x82\x64\xd1\x77\xfe\x76\x91\x3c\x90\xd0\x77\x85\x7b\xb8\x8f\xc5\xe1\x80\x30\x28\x0e\xb1\x5a\xda\xb6\xad\x54\xe7\x09\xee\x3b\xd4\x61\xbc\xfe\x0a\x3c\x4e\xf1\xd3\xe9\xf5\xc3\xf2\xfc\xb9\x5c\x85\x80\x7b\xd4\xf1\x86\x0c\x49\x7c\x9c\x3d\xfe\x75\x96\xfc\x13\x00\x00\xff\xff\xca\xcc\x44\x26\x7c\x08\x00\x00")

func imagesBaseEntrypointBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypoint,
		"images/base/entrypoint",
	)
}

func imagesBaseEntrypoint() (*asset, error) {
	bytes, err := imagesBaseEntrypointBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":    imagesBaseDockerfile,
	"images/base/clean-install": imagesBaseCleanInstall,
	"images/base/entrypoint":    imagesBaseEntrypoint,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile":    {imagesBaseDockerfile, map[string]*bintree{}},
			"clean-install": {imagesBaseCleanInstall, map[string]*bintree{}},
			"entrypoint":    {imagesBaseEntrypoint, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
