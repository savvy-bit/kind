// Code generated by go-bindata.
// sources:
// ../../../../images/base/Dockerfile
// ../../../../images/base/clean-install
// ../../../../images/base/entrypoint/main.go
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7d\x6f\xdb\x46\xd2\xff\x5f\x9f\x62\x40\x05\xad\x9d\x8a\xa2\x63\x27\xa9\xeb\xc2\x7d\xa0\xd8\x8a\x2b\xc4\x91\x02\x49\x49\x10\xf4\x29\x8c\xe5\x72\x44\x6e\xb5\xdc\xe5\xed\x8b\x64\x25\x97\xef\x7e\x98\x25\xa9\x17\x27\xe9\x15\xd7\x3b\xc3\x80\x24\x72\x77\xde\x67\x7e\xbf\xdd\x2e\x5c\xe9\x6a\x63\x44\x5e\x38\x38\x3d\x79\x72\x0e\xf3\x02\xe1\x95\x4f\xd1\x28\x74\x68\x61\xe0\x5d\xa1\x8d\xed\x77\xba\x9d\x2e\xdc\x0a\x8e\xca\x62\x06\x5e\x65\x68\xc0\x15\x08\x83\x8a\xf1\x02\xdb\x37\x3d\x78\x87\xc6\x0a\xad\xe0\xb4\x7f\x02\x47\xb4\x20\x6a\x5e\x45\xc7\x3f\x77\xba\xb0\xd1\x1e\x4a\xb6\x01\xa5\x1d\x78\x8b\xe0\x0a\x61\x61\x21\x24\x02\xde\x73\xac\x1c\x08\x05\x5c\x97\x95\x14\x4c\x71\x84\xb5\x70\x45\x50\xd3\x08\xe9\x77\xba\xf0\xa1\x11\xa1\x53\xc7\x84\x02\x06\x5c\x57\x1b\xd0\x8b\xfd\x75\xc0\x5c\x30\x98\xfe\x0a\xe7\xaa\x8b\x24\x59\xaf\xd7\x7d\x16\x8c\xed\x6b\x93\x27\xb2\x5e\x68\x93\xdb\xd1\xd5\x70\x3c\x1b\xc6\xa7\xfd\x93\xb0\xe5\xad\x92\x68\x2d\x18\xfc\x87\x17\x06\x33\x48\x37\xc0\xaa\x4a\x0a\xce\x52\x89\x20\xd9\x1a\xb4\x01\x96\x1b\xc4\x0c\x9c\x26\x7b\xd7\x46\x38\xa1\xf2\x1e\x58\xbd\x70\x6b\x66\xb0\xd3\x85\x4c\x58\x67\x44\xea\xdd\x41\xb0\x5a\xeb\x84\x3d\x58\xa0\x15\x30\x05\xd1\x60\x06\xa3\x59\x04\x2f\x06\xb3\xd1\xac\xd7\xe9\xc2\xfb\xd1\xfc\xd7\xc9\xdb\x39\xbc\x1f\x4c\xa7\x83\xf1\x7c\x34\x9c\xc1\x64\x0a\x57\x93\xf1\xf5\x68\x3e\x9a\x8c\x67\x30\x79\x09\x83\xf1\x07\x78\x35\x1a\x5f\xf7\x00\x85\x2b\xd0\x00\xde\x57\x86\xec\xd7\x06\x04\x85\x11\x33\x8a\xd9\x0c\xf1\xc0\x80\x85\xae\x0d\xb2\x15\x72\xb1\x10\x1c\x24\x53\xb9\x67\x39\x42\xae\x57\x68\x94\x50\x39\x54\x68\x4a\x61\x29\x99\x16\x98\xca\x3a\x5d\x90\xa2\x14\x8e\xb9\xf0\xe4\x0b\xa7\xfa\x9d\x4e\x17\x96\x42\x65\xc0\xa5\xb7\x0e\x0d\xa4\x8c\x5c\x2d\x59\x8e\x3d\x48\xbd\x90\x8e\x1c\xf5\xa9\x57\xce\x5f\x3c\x39\xef\x9f\x3c\x0d\xf1\x9e\xeb\xba\x08\xd6\x08\x2c\xcb\xc0\x6e\xac\xc3\x32\xeb\xc1\xd5\x78\xd4\x23\xbd\xa0\x83\x5f\x4e\x6b\x69\x41\x21\x66\x75\xdc\x8d\x57\xa1\x4c\x59\x56\x06\x31\x2f\xb5\x69\xf7\xc2\x0f\x90\x69\xbe\x44\x03\x5c\xab\x85\xc8\xbd\x09\x36\x53\xbd\x65\x90\xa2\xd4\xeb\x1e\xd8\x26\x20\x0b\x2d\xa5\x5e\x93\xbb\x06\x17\x68\x50\x71\xb4\x17\x9d\x6e\x28\x1a\xdb\x54\xcd\x82\x72\x8d\x76\xe9\x74\x15\x4a\x67\x2d\x96\x22\x99\x35\xb9\x4e\x1a\xa5\xc9\x95\x56\x54\x8f\x68\x46\xca\xa1\x59\x30\x8e\xc9\x9e\x9c\x0c\x57\x28\x75\x85\xc6\xf6\x0d\x66\x05\x73\x7d\xae\xcb\x24\x95\x3a\x4f\x4e\x4f\x9e\x3c\x4d\x4e\x9e\xd1\xbf\xf1\x8a\x42\x1f\x37\x32\x63\x2a\x7f\xa1\xe2\xda\x9b\x98\xb7\x1a\xfe\xba\xe0\xe7\xc9\xc9\x4f\xc9\x93\xb3\x2f\x04\x0b\x15\xb3\x58\x69\x15\x57\x46\xac\x84\xc4\x1c\xb3\x7d\xf1\x9d\xc1\xf4\x86\xea\x70\x78\x37\x7a\x3d\xb8\x19\x5e\x46\xfb\x59\x8b\x3a\x2f\xa7\x93\xd7\xf0\xe8\xd3\x6e\xc1\x67\xca\xfd\x78\x32\x1f\x5e\xc0\x60\x7a\xf5\x2b\x94\xde\x3a\x48\x11\x32\x5c\x08\x85\x19\xb0\x3c\x74\xea\x82\xaa\x82\x36\xef\xdb\xaf\xb9\xed\xd7\x0e\x06\xcb\x51\xe5\x42\x61\xb2\xcd\x46\x42\x95\x93\xa1\x49\xba\x96\xeb\x0a\x83\x65\xa4\xe3\x32\x62\x65\xf6\xfc\x69\x44\x9a\x2d\x3a\x6a\x40\xb8\x1e\xbe\x18\x0d\xc6\x77\x2f\xa7\x93\xf1\x7c\x38\xbe\xbe\x54\x5a\x09\x4a\x06\xe3\x4e\xac\x10\xac\xd3\x95\x05\xab\x4b\x04\x56\x39\x58\xb3\x50\xe7\xb6\x57\xd7\x9f\xb0\x61\x28\x75\xba\xc0\xc0\x20\x93\xc0\x4c\xee\x4b\x54\xae\x07\x6b\xfc\xde\x20\x1c\xb1\xf4\xd8\x5b\xd2\x43\x36\x38\x0d\x39\x3a\x60\xe0\xb0\xac\xb4\x61\x66\x03\xc3\xf1\xbb\xda\xd3\x7e\xb0\xf2\xcf\xad\xe9\x74\xae\x26\x6f\x3e\x00\x97\xc8\x54\x2c\x94\x75\x4c\x4a\x48\xbc\x35\x89\xd4\x9c\xc9\x24\x15\x2a\x39\x78\xd9\x99\xbe\x1d\x03\x2f\x4a\x9d\xc1\x0f\xf7\x7f\xbe\xb2\xd3\x85\x1b\x74\x90\x61\x85\x2a\x43\xc5\x05\x5a\x6a\xb4\x02\xf7\x5a\x12\x98\x34\xc8\xb2\x0d\x14\xcc\x5e\x80\xb5\x45\x8f\x82\xd2\x03\xab\x58\x95\x85\xd5\x75\x4c\x52\xa3\x97\xa8\x20\xd3\x6b\x05\x42\x39\x0d\x47\xc8\x78\x11\x46\x16\x48\xa1\xf0\x98\xba\x25\x86\x8a\xf1\x25\xcb\x91\x3a\x94\xa3\xb5\x14\x0e\x9a\x31\x8d\x45\x14\xb4\x3a\xc7\x0f\x17\xef\xb7\xb3\x45\xb3\x12\x1c\x2d\x1c\x35\x65\x7a\xfc\xd5\xd5\x24\xb7\xe9\xef\x04\x8a\x4d\x85\x66\xe9\x53\x84\x04\x96\x3b\xd4\x22\x08\xd1\x0a\x95\xb3\x41\x44\x29\x2c\xdf\xc9\x39\xf2\x4e\x48\xe1\x04\x86\xa1\x43\x28\x24\x14\x68\x6f\x80\x7c\xa4\x39\x23\x54\x7e\x5c\x07\x4c\xd1\x8a\x10\x5c\x5f\xc1\x91\xc1\x52\xaf\xc8\x17\xaf\xd6\x4c\xd1\xe4\x6e\x27\x4e\x6b\x3a\x6d\x7b\x29\x14\x93\x72\x43\x3b\x33\x61\x03\x6a\x2c\x4b\x9b\x93\x92\x3f\xb4\x37\x8a\xc9\xec\x7f\x37\x18\x42\x91\x1c\xd4\xd4\xff\x77\x02\x0a\x52\x76\x63\x67\x98\xb2\x95\x36\x2e\x0e\xea\x81\xb3\x98\xa3\x71\x84\x00\x2c\x84\xcd\x1b\xb9\x45\xb1\xb8\x32\x64\x17\xc5\x29\xe6\xba\x2c\xb5\x82\x5c\xf9\x2a\x3f\x05\x69\xd3\xd8\xa0\x44\x2a\xa6\x56\xfc\x36\x12\x8d\x85\x76\x63\x57\x20\x45\xda\xfc\x3e\xd9\x2e\xe4\x5a\x29\x67\x18\x5f\x82\xa8\x1c\x45\xc7\x82\xa8\x8c\xf6\x0e\x4f\x01\x5d\x41\xf1\x07\xab\x39\x73\x40\x69\x8a\xa5\x50\xfe\x1e\x4a\xed\x95\x03\x4c\x9b\x0d\x3e\xc3\x15\x2c\xa9\x15\x98\x5f\xd8\xb8\xc6\x86\x56\x41\xca\x6c\x01\xc6\x6e\x14\x6f\x1e\x7d\xf7\x1d\x2c\x08\x97\x12\x29\xd2\xed\xb8\xae\x3f\xe9\x43\x28\xe1\xfa\x8e\x99\x1c\x5d\x9f\xd2\x6a\x13\x88\x15\x2b\x11\xa2\xd6\x17\x57\x56\x44\x51\x6c\x6c\xd1\xf9\xaa\xdf\x24\x3b\x82\x38\x43\x89\x0e\x77\x6a\x4c\x09\xf1\xe2\xab\x7a\x4a\x2f\x9d\x88\xbd\x45\x73\xa8\xea\xf1\x17\x9b\xd1\xf1\x87\x9b\x1f\x7f\x73\xf1\x57\x34\x85\xa1\x10\x2f\xec\xbf\xd3\xf3\xb5\x60\x50\x39\xb9\x87\x3b\x29\xd8\x7f\x63\x3b\x85\x97\x3b\xf9\x97\x24\xa4\xcc\x0a\xfe\x4d\xc3\x91\x17\x1a\xa2\x29\xb2\xec\xd5\x6b\x9b\x5f\x2a\x1d\xc1\x2f\xbf\x1c\x06\xac\x6d\xb0\x3e\x21\x3f\xcd\xc1\x51\xd3\x05\x75\xa7\xf4\x60\x5d\x08\x5e\x84\x49\x62\x69\xec\x14\xac\xaa\xb0\x45\xa6\x35\xb6\xf3\xaa\x06\x89\x86\x52\x6e\xe7\x06\x4b\xf5\x8a\xb8\x1d\x0d\xd1\x40\xda\xbe\x85\x61\x8d\x94\x24\xd4\x6e\xd2\x36\x29\x26\x35\x8a\x26\x5d\x8b\x2e\xf6\x55\xec\x0a\x8c\x0d\x56\xda\x0a\xa7\xcd\x86\x80\x47\x65\x5b\x99\xbb\x61\xd6\x17\x3a\x68\x48\x42\xf5\x25\x42\xb5\x73\xdd\xb5\x8a\xe2\x65\x4d\x84\x92\xee\x6e\xde\xc6\x7b\xf3\x96\x80\xaa\xfe\xf9\xbd\x85\x9b\x37\x37\xb0\xc4\x4d\x78\x41\x84\x2b\xb0\x20\xa1\x72\x34\x95\x11\xca\x1d\x3c\x3f\xb0\x2e\x06\x5f\x65\xcc\x61\x8d\x13\xe2\x41\x60\x9b\x21\xb9\xe5\x01\x44\x15\x9e\x13\x80\xe8\xc5\x42\x70\x11\x26\xa2\xf5\x15\x0d\x9f\x9a\x54\xef\x9d\x31\xb8\x37\x06\x95\x93\x1b\xa2\xd0\x94\x86\x4a\xd0\x20\x06\x47\xe3\x70\x6f\x56\x7e\x25\x26\x8e\xd9\xa5\x4d\xc2\x00\xf8\x22\x1a\x35\x0a\x4f\xae\x5e\x0d\xa7\x77\xef\x86\xd3\xd9\x68\x32\xbe\x8c\x82\x5d\xfd\xc7\x51\x08\x77\x43\x2d\xb7\x08\x8e\x6a\xd5\x0b\x2c\xe0\x01\x05\xe8\x6f\x29\x46\xa0\x0a\x4e\x03\x03\x62\x4f\x1f\xd1\x68\x58\x31\xe9\xa9\x2c\xac\x90\x81\x3e\x36\x74\xb6\x66\x17\xb0\x30\xba\x0c\xb3\x77\x89\x1b\x82\xca\xe8\x7d\xfd\xe2\xa2\x7d\x08\xda\xbb\xca\x3b\xb0\x85\xf6\x32\x0b\xda\x53\x2a\x3a\x43\x45\x76\x64\x5d\xa6\xbd\x6b\xc9\x09\xb1\x0d\x53\x12\xbe\x1c\x47\x35\x13\x7a\x33\xbf\x7b\x35\xfc\x70\x77\x3d\x19\xcf\xef\xde\x0f\xa6\xe3\xbb\xc9\xf8\xee\x7a\x30\xbe\x19\x4e\x27\x6f\x67\x77\x6f\x67\x81\xbd\x2d\x98\xb4\x18\xd5\xd8\x40\x13\x3e\x5e\xd8\xd9\x2d\x44\xbb\xf2\x5d\x2b\xa9\x59\xb6\x5f\xc2\x75\xe9\x3e\x3a\xea\xd7\xfd\xa5\x6d\x3b\xf0\x7f\x6e\xda\xf0\xd1\xe8\x3a\x3a\x4e\xf2\x2a\x8f\xe0\x9f\x5b\x57\xa8\x6e\xe2\x5d\xc3\xb6\x8f\xf7\xca\x0b\x4e\x86\x2f\x5e\x5e\x5d\x9f\x9f\xef\x56\xd5\x6c\xee\xd1\x27\xfa\xfc\x1c\x91\x8c\x98\x36\xee\x6a\x6f\x3b\xd9\x01\xa2\x0c\x53\xf8\x8d\x19\x5e\x5c\x36\x1b\x7e\x87\xbf\xef\x06\x3c\x3a\x92\x36\xbd\x6b\x21\x2d\xe6\xf6\x18\x6c\x80\x9a\x68\x67\xe6\x21\xaa\x46\xdb\xae\xbe\x7c\xf4\xe9\xb0\xc6\x3e\x47\xfb\x83\xe7\x6a\x3c\x82\x54\x28\x66\x88\x6e\x38\x0d\x89\xae\x5c\xc2\x95\x20\xda\x46\x1c\x63\x72\x3d\x39\x4a\x51\xb9\x02\x91\x68\xee\xf1\x05\x75\x14\xac\x8b\x0d\x24\xb0\x2e\x98\x83\x02\x4d\xcd\x7a\xaf\xc6\xa3\x5d\x19\x9f\xf4\x9f\xf7\x4f\xa2\xed\xf3\xf9\x60\xfa\x62\x70\x7b\x7b\x19\x71\x25\xe2\x4a\xfa\x5c\x28\x1b\x37\x11\x8a\x57\x8f\x3e\xed\xed\xfd\xdc\x77\xf9\xc7\xdd\xce\x40\xe2\xdf\x4e\x6f\x2f\xb7\xe5\x60\x9d\x36\x2c\xc7\x7e\xae\x75\x2e\x91\x55\xc2\x86\x50\xee\x9a\xaf\x8d\x61\xa2\xd0\xad\xb5\x59\xb6\x0a\x93\x9d\xd4\x20\xb0\x56\xdb\x2a\xf8\x5c\xff\x6c\x2c\xfd\xbc\x5f\x8e\x54\x8d\x71\x6c\xd0\x99\x0d\x3c\x83\x38\x6e\x3a\x22\x71\x65\x45\xa1\x22\x83\xa1\x91\x46\x82\xf6\x92\x62\x0b\x76\xfa\xec\xb9\xf5\xe5\xe1\xe2\xed\xfb\x72\x99\x09\x03\x71\x75\x10\xf6\xdd\x6b\xc7\x0c\xc4\x57\x87\x2f\xe3\xfb\x8f\x8b\x6f\x48\x23\xe0\x32\x87\x2f\x29\xd5\x0e\x09\x31\x1a\xfe\x43\x33\x0b\x44\xe8\x58\xa1\x5a\x9e\x7a\x24\x1c\xac\x85\x94\xc0\x0b\xe4\xcb\xed\xe9\x7b\xcb\xdb\x68\xf0\x1c\xff\xd7\x4e\x9d\x74\x0e\xd9\x89\xde\xe2\x40\x6b\x21\xde\x0b\x67\x09\xbe\x66\xa3\x9b\xe9\xfc\xf5\x68\xfc\xc3\x59\x3d\xf4\x66\xa3\x9b\xf9\x70\xfa\x1a\x8e\x6a\x90\x34\x18\xe3\x3d\x72\x4f\x13\x5a\xb8\x7d\xf3\x52\x9f\x7f\x14\x52\xb2\x7d\xc6\x6a\x0b\xbd\xbe\x4b\x7d\xde\xe7\xb9\xf8\x3f\x91\x5d\x3e\xa1\xd3\xe7\xb3\x1f\x3b\xb3\xf9\xe4\xcd\x6c\x74\x33\x1e\xdc\xee\xe9\xa3\xa8\xad\x0d\xab\xb6\x36\x85\x7b\x1e\xa2\xe0\xe1\x42\x82\x49\x40\xe5\xcc\xa6\xd2\x82\x8e\x5f\x74\x56\xaf\x96\x79\x7d\x12\x0c\xc1\x2b\xf4\x7a\x7b\x68\x0b\x37\x0b\x35\x2a\x0b\x1e\x60\x26\xbc\xf9\x83\x8e\xa0\x12\x9d\x05\x6f\x69\x7a\x83\xaf\x6a\x54\x27\xe2\x9c\x5b\x48\x71\xa1\x4d\x9d\x02\xa1\x3c\x4d\x6a\x1d\x30\xa7\xb1\x88\x0c\x2c\x84\x44\xa8\x0c\x06\xbe\x17\x66\x3f\x73\x5b\x8b\x85\x85\x37\xa3\xeb\x27\x9d\xee\xd6\xa0\x35\x82\xc4\x15\x52\xef\x04\x13\x76\x86\x37\x17\x22\xf5\x89\xef\x37\x88\x76\xce\x25\xbb\xaf\x51\x0f\xa2\x07\xa7\xba\x08\x7e\xef\x74\xe1\x3d\x06\xbe\xb2\xab\x30\x4d\x00\x41\xca\xdb\x83\x13\xd5\xd2\x8a\x19\xa1\x83\xab\xed\x21\xaa\x45\x66\x6a\x5c\x89\xae\x07\xe8\x78\xff\x78\x0b\xd0\x6d\xfc\x1e\x6b\x25\x37\x8f\xdb\x53\x55\x80\xbb\x70\x5d\xd2\x0b\x62\x77\xf6\x05\x2c\x5f\xa1\x31\x22\xcb\x88\x32\x39\x52\xed\x44\x89\x9d\xe1\x78\x3e\xfd\xf0\x66\x32\x1a\xcf\xc9\xb9\x07\x3e\x3c\x70\xd0\xd2\x33\xa2\x84\xe4\x1b\xf5\x4e\x81\x6d\x93\xe4\x86\x55\xc5\xf6\xea\x80\xc1\x4a\x4b\x4f\xf9\xd2\xc0\x56\x5a\x64\x41\xb9\x64\x1b\xca\x53\xf3\x75\xeb\x0b\x1d\xb5\x9a\x6b\x24\xc9\xc2\x7e\xce\xe8\x5c\xc7\x0b\xa6\x72\x4a\xdd\x56\x5a\x28\x34\x06\xd7\x41\x65\xb8\x77\x24\x85\x9d\x2e\x68\xce\xbd\x69\xab\x22\xdc\x5b\xd0\x3e\xe1\x9a\xdb\xb3\x8b\xff\xe0\xc2\xa2\x56\xd9\x79\x37\xb9\x7d\xfb\x7a\x18\x42\xb3\x62\x26\xd0\xde\x7a\x7b\x13\x82\xaf\x41\x00\x91\x8f\x60\x6a\x9b\xf4\xd7\x83\x2b\x42\xc6\x70\xb5\xc7\xac\x15\xb9\xa2\x44\xed\xf5\x64\x2e\x5c\xe1\xd3\xba\x15\x0f\x48\x75\x96\x08\x6b\x3d\xda\xe4\xec\xec\xc7\xa7\xdd\xf0\x9d\x4e\x73\xa8\x5c\x7c\x7a\x7e\x7e\x7e\x7e\x7a\xf6\xec\xd9\xdf\x94\x73\x76\xf6\xd3\xe9\xb3\xf3\xa7\xe7\x67\x9d\x7f\x05\x00\x00\xff\xff\x13\x42\xf2\x39\x4e\x16\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseCleanInstall = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\x51\x6f\xdb\x36\x14\x85\xdf\xf9\x2b\xce\xac\x62\xd8\x86\x48\x4a\xf3\x32\x60\xc5\x86\x79\x49\x86\x19\x2d\x6c\x20\x76\x57\x14\xdb\x1e\xae\xa8\x2b\xe9\x22\x12\xc9\x91\x57\x75\xfc\xef\x07\x2a\x71\x50\x63\x7e\x32\x75\x0e\x79\x3e\x1e\xde\xe2\x9b\xba\x11\x57\xa7\xc1\x98\x02\xb7\x3e\x9c\xa2\xf4\x83\xe2\xe6\xfa\xed\x8f\x38\x0c\x8c\xf7\x73\xc3\xd1\xb1\x72\xc2\x7a\xd6\xc1\xc7\x54\x99\xc2\x14\xf8\x20\x96\x5d\xe2\x16\xb3\x6b\x39\x42\x07\xc6\x3a\x90\x1d\xf8\xac\x5c\xe1\x4f\x8e\x49\xbc\xc3\x4d\x75\x8d\xef\xb2\x61\xf5\x22\xad\xbe\x7f\x67\x0a\x9c\xfc\x8c\x89\x4e\x70\x5e\x31\x27\x86\x0e\x92\xd0\xc9\xc8\xe0\x27\xcb\x41\x21\x0e\xd6\x4f\x61\x14\x72\x96\x71\x14\x1d\x96\x98\x97\x43\x2a\x53\xe0\xf3\xcb\x11\xbe\x51\x12\x07\x82\xf5\xe1\x04\xdf\x7d\xed\x03\xe9\x02\x9c\x7f\x83\x6a\xf8\xa9\xae\x8f\xc7\x63\x45\x0b\x6c\xe5\x63\x5f\x8f\xcf\xc6\x54\x7f\xd8\xdc\xde\x6f\xf7\xf7\xe5\x4d\x75\xbd\x6c\xf9\xe8\x46\x4e\x09\x91\xff\x9d\x25\x72\x8b\xe6\x04\x0a\x61\x14\x4b\xcd\xc8\x18\xe9\x08\x1f\x41\x7d\x64\x6e\xa1\x3e\xf3\x1e\xa3\xa8\xb8\xfe\x0a\xc9\x77\x7a\xa4\xc8\xa6\x40\x2b\x49\xa3\x34\xb3\x5e\x94\x75\xa6\x93\x74\x61\xf0\x0e\xe4\xb0\x5a\xef\xb1\xd9\xaf\xf0\xdb\x7a\xbf\xd9\x5f\x99\x02\x9f\x36\x87\x3f\x76\x1f\x0f\xf8\xb4\x7e\x78\x58\x6f\x0f\x9b\xfb\x3d\x76\x0f\xb8\xdd\x6d\xef\x36\x87\xcd\x6e\xbb\xc7\xee\x77\xac\xb7\x9f\xf1\x7e\xb3\xbd\xbb\x02\x8b\x0e\x1c\xc1\x4f\x21\x66\x7e\x1f\x21\xb9\x46\x6e\x73\x67\x7b\xe6\x0b\x80\xce\x3f\x03\xa5\xc0\x56\x3a\xb1\x18\xc9\xf5\x33\xf5\x8c\xde\x7f\xe1\xe8\xc4\xf5\x08\x1c\x27\x49\xf9\x31\x13\xc8\xb5\xa6\xc0\x28\x93\x28\xe9\xf2\xe5\x7f\x97\xaa\xf2\x2c\xad\x91\x6c\x94\xa0\x60\x67\x29\xa4\x79\xa4\xdc\xcc\xf2\x46\xd3\xe4\x1d\xee\xbc\x7d\xe4\x28\x53\x4e\x0a\xa4\xca\xd1\x2d\x2c\xe2\x92\xd2\x38\x2e\xb1\x64\x1f\xa9\xe7\x64\x8a\x9c\x9a\x13\x1c\xec\xc8\xb4\x30\xcd\x61\x89\x9c\x9d\x63\xcb\x29\x51\x3c\x9d\xb7\x82\xa2\x4a\x47\x56\xf3\xa8\x82\xab\xbe\x7a\xde\x55\x9e\x75\x09\x9a\x5f\x30\x81\x9b\x97\x3f\xd6\x3b\xa7\x91\xec\xa3\x31\x89\x15\xa5\x07\xc7\xc8\x4f\xa2\xc6\x48\x87\xbf\xf0\xa6\xc0\xcf\xb8\xc6\x3f\xef\x16\x08\x03\xb0\x1d\x3c\x7e\xf9\xf6\x06\xab\xad\x7f\xe5\x3c\x77\xc8\xed\x2a\x5b\x9e\x44\xf1\xd6\x74\x62\x0c\x05\x2d\x7b\x56\xcc\xa1\x25\xe5\xd7\xe5\x99\xa7\x3c\xa1\x2c\x9d\x3f\xf3\x95\x91\x73\x47\xec\xda\x84\x37\xbf\xbe\xba\x97\x3b\xa0\x3c\x99\x38\xa1\x8c\x1d\xfe\x36\x00\xea\x2f\x14\x6b\x9b\x47\xb9\x6e\xb9\xb1\xde\x75\xf5\x0f\x5f\x29\xa3\x34\x35\x05\xad\x47\x49\x9a\x2e\x15\xdf\xbf\xae\x75\x0a\x17\xda\xb2\x36\xff\x05\x00\x00\xff\xff\xdd\xdb\xd0\x5d\x1a\x04\x00\x00")

func imagesBaseCleanInstallBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseCleanInstall,
		"images/base/clean-install",
	)
}

func imagesBaseCleanInstall() (*asset, error) {
	bytes, err := imagesBaseCleanInstallBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/clean-install", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypointMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\x61\x73\xdb\xb8\x11\xfd\x2c\xfc\x8a\x3d\x76\x6e\x2a\xe5\x68\xd2\x92\xcf\x8e\x4f\x4d\x3e\xa8\xb6\x92\x68\xe2\xca\x19\x4b\xa9\x9b\x49\x3d\x09\x08\x2e\x49\x8c\x41\x80\x05\x40\xc9\x6c\x27\xff\xbd\xb3\x20\xed\xc8\xc9\x7d\xb0\x2c\x90\xc0\xdb\xb7\xef\x3d\xac\xd2\x17\xec\xc2\x34\x9d\x95\x65\xe5\x61\x76\x3c\x3d\x87\x6d\x85\xf0\xbe\xcd\xd0\x6a\xf4\xe8\x60\xd1\xfa\xca\x58\x97\x30\x76\x25\x05\x6a\x87\x39\xb4\x3a\x47\x0b\xbe\x42\x58\x34\x5c\x54\x08\xc3\x9b\x18\xfe\x89\xd6\x49\xa3\x61\x96\x1c\xc3\x98\x36\x44\xc3\xab\x68\xf2\x37\xd6\x99\x16\x6a\xde\x81\x36\x1e\x5a\x87\xe0\x2b\xe9\xa0\x90\x0a\x01\x1f\x04\x36\x1e\xa4\x06\x61\xea\x46\x49\xae\x05\xc2\x5e\xfa\x2a\x14\x19\x20\x12\xf6\x69\x00\x30\x99\xe7\x52\x03\x07\x61\x9a\x0e\x4c\x71\xb8\x0b\xb8\x67\x0c\x00\xa0\xf2\xbe\x99\xa7\xe9\x7e\xbf\x4f\x78\x60\x99\x18\x5b\xa6\xaa\xdf\xe5\xd2\xab\xd5\xc5\x72\xbd\x59\x1e\xcd\x92\x63\xc6\x3e\x6a\x85\xce\x81\xc5\xff\xb4\xd2\x62\x0e\x59\x07\xbc\x69\x94\x14\x3c\x53\x08\x8a\xef\xc1\x58\xe0\xa5\x45\xcc\xc1\x1b\xe2\xb9\xb7\xd2\x4b\x5d\xc6\xe0\x4c\xe1\xf7\xdc\x22\xcb\xa5\xf3\x56\x66\xad\x7f\x26\xd0\x23\x2b\xe9\xe0\x70\x83\xd1\xc0\x35\x44\x8b\x0d\xac\x36\x11\xfc\x7d\xb1\x59\x6d\x62\x76\xbb\xda\xbe\xbb\xfe\xb8\x85\xdb\xc5\xcd\xcd\x62\xbd\x5d\x2d\x37\x70\x7d\x03\x17\xd7\xeb\xcb\xd5\x76\x75\xbd\xde\xc0\xf5\x1b\x58\xac\x3f\xc1\xfb\xd5\xfa\x32\x06\x94\xbe\x42\x0b\xf8\xd0\x58\xe2\x6e\x2c\x48\x92\x0e\xf3\x84\x6d\x10\x9f\x15\x2f\x4c\x4f\xc6\x35\x28\x64\x21\x05\x28\xae\xcb\x96\x97\x08\xa5\xd9\xa1\xd5\x52\x97\xd0\xa0\xad\xa5\x23\xf3\x1c\x70\x9d\x33\x25\x6b\xe9\xb9\x0f\xeb\x9f\xda\x49\xd8\x8b\x94\xb1\xf4\x05\xdb\x92\x85\x54\x17\x6b\xd4\xde\x81\x69\x89\x06\x21\xa3\xf6\xb6\x6b\x8c\xd4\x3e\x81\x95\x9f\xb3\x23\xd8\x73\xe9\x5d\xe0\xb2\x59\xbd\xfd\xb8\xb9\x99\xb2\x23\xc2\xd4\x80\x0f\x28\x1c\x8c\xb9\x2d\x77\x9f\xa7\x77\x31\xf4\x5f\xe6\x77\x31\xa0\xde\x7d\x9e\xdf\x4d\x58\x5f\x87\x2b\x65\xf6\x0e\x5a\x47\x1e\x34\x68\x0b\x63\x6b\x30\x41\x05\x2e\x7a\xa6\x52\x07\x9a\x91\x36\x39\x46\x20\x8c\xa6\xa0\xa0\x85\x9d\xe4\xf0\x35\x37\xe2\x3e\x28\x86\xe2\x2b\xfb\x92\x61\x61\x2c\x7e\x81\x3d\x42\xc5\x77\x48\x10\x2d\x57\xaa\x83\x28\x33\xc6\x63\x1e\x05\x24\xa9\xa5\x27\x3d\x00\x77\x68\x3b\x5f\x91\x54\xa8\x28\x66\xca\xe8\xb2\xcf\xa8\xf4\x09\x63\xb7\x08\x82\xeb\xbe\x21\x87\x3a\x7f\x6c\x92\xb8\x86\xa0\x37\xd6\x08\x32\x8a\xd6\x56\x96\x25\x5a\x70\x9e\x5b\x4a\x51\xcf\xb9\x27\x10\xb1\xef\xca\xc1\x9e\xd0\xf6\x08\xdc\x22\xe4\x46\x23\x34\x96\x58\xd7\x74\x86\xeb\x8e\x30\x77\x92\x3c\xa3\x07\xe6\xb0\xf7\x84\xb1\xf5\xf5\x76\x39\xef\x6b\x1f\x9a\x84\x39\x70\x07\x1c\x9c\xd4\xa5\xa2\x04\x4c\x93\x7f\x85\x5b\x18\x43\xeb\x7a\x1c\xd5\xf5\x71\xf1\xb9\x92\x59\xd2\x8b\x5f\xf3\x7b\x74\x20\x3d\x20\x77\x92\xd2\x60\x20\x6b\xa5\xca\xa1\x31\xd6\xf3\x4c\x75\x71\x90\xa9\xb7\x89\x38\x6b\xba\x2c\xe4\xf6\xbe\xe2\x9e\x0e\xe6\x06\xdd\x10\x9c\x14\x96\xdf\x9b\x3c\x88\x0f\x07\x57\xd3\xf1\xc1\xa9\x1f\x93\x04\x9e\xa0\x7e\xce\x51\x9a\x42\xef\x66\xf0\x36\xf4\xe0\x92\x85\x2d\x1d\xa5\x88\x35\x5c\xdc\x13\x4e\xcd\xa5\x66\x4c\xd6\x44\x18\xc6\x6c\x14\x19\x17\x85\xcf\xd4\xc9\x52\x93\xf2\xa3\xc8\x75\x4e\x70\xa5\x22\xc6\x46\x91\x32\x65\xc4\x26\x81\x6d\x87\xae\x17\xd2\x55\xa6\x55\x39\x64\xfd\xfd\x12\x50\x73\x61\x4d\x0c\x59\xeb\x49\x7e\x25\x75\xfb\x40\x19\x1c\xf8\x77\xa6\xfd\xab\x25\x89\x83\xc7\x06\x4a\xf4\x3d\x0c\xd7\x5d\x65\xf6\x84\x3c\x4c\xa9\x9a\xeb\x97\xc3\x7c\xd2\xed\x03\x2d\x8f\x1a\x5e\xa2\x0b\x2f\x06\x7e\xc9\xcb\xa4\xf2\xb5\x7a\x3c\xe5\xe6\x69\x5a\x4a\x5f\xb5\x59\x22\x4c\x9d\xd6\x26\xeb\xfa\x8f\x4c\x99\x2c\x3d\x3d\x9b\xe5\xc5\xb9\x98\xe5\x67\xc5\xef\xe7\x67\xc7\x53\x71\x9e\x4f\xf3\xe2\xe5\xec\xf4\xec\xe4\xfc\x8f\xd3\xb3\x3f\xf2\xd9\xa9\x38\xce\x8a\x69\xda\xdc\x97\x03\xfe\xf0\xef\x4b\xa0\x90\x94\xe6\x2f\x57\xd3\x63\x26\x8c\x76\x1e\x9c\x2c\xad\xaf\xa5\x86\xd7\x70\xf2\x3b\x63\x45\xab\x45\x90\x73\x3c\x81\xff\xb1\x51\x9a\x52\x2e\x77\xa8\x3d\xfc\xd7\xd4\x99\xc4\xc7\xac\xa3\xa3\x94\xd1\x28\xa7\x69\xae\x14\xe9\xf6\x61\x75\x39\x0d\xe6\x71\xd8\x57\x52\x61\x38\xfe\xd8\x4f\x5f\x3a\x97\x98\x68\xf4\xd4\x7b\x3a\x4b\xc9\xee\x46\xe6\x6c\x34\xa8\xb0\x2a\xb5\xb1\x38\x1e\x9c\x4a\x36\xab\xb7\x17\xef\xae\x2e\x27\x2c\x00\x95\x96\x67\xfd\x2d\xb0\xc8\x55\x74\x98\x1d\x61\xea\x9a\x12\x1a\xfe\x6c\xe9\xa0\xb0\xa6\x0e\x03\x8b\x56\x6c\x24\x0b\x50\xa8\xc7\x43\x72\x26\xf0\x0a\x66\xd4\xdc\x48\x99\x32\x79\xc3\x3d\x57\xe3\x68\x6d\x3c\xa0\x36\x6d\x59\xd1\x99\xb6\xcf\xac\x37\x07\x55\x7e\x89\x26\x6c\xf4\x8d\x8d\x44\x9d\xf7\x73\x0c\xe6\xaf\xbf\x87\xf1\x2e\x7e\x16\xcc\xc0\x98\xda\x3b\x0c\x33\x8c\x0d\x8d\x28\x19\x02\xb5\x59\xbd\xbd\xd9\xfe\x63\xb5\xfe\xed\x84\xca\xd4\xdc\x8b\x0a\x5c\xe7\x3c\xd6\xf9\x84\x8d\x04\x81\xd3\xbd\x1c\x8b\x8a\x6b\x82\xde\x04\x89\x62\x98\x4e\x9e\xe4\x5a\x1b\x2f\x8b\x6e\x2c\x62\x38\x50\x8c\x0a\x1d\x3c\x08\x3b\xc7\x8f\x26\xff\x76\x32\x99\xb0\xd0\xf6\x07\x2b\xb5\x57\x7a\x1c\xdd\xf2\xf0\x6b\xf7\x8c\x67\x92\x24\x51\x5f\x86\x68\xbc\x3a\x12\x41\x42\x5a\xfe\xf2\xfa\xc7\x5a\x4f\x42\x06\xc4\x62\x1c\x2d\x1f\x7a\x40\x5e\x78\x9a\x83\x81\xc0\x1c\x7e\xdd\xd1\xd9\xe1\x4c\x14\xd3\xf3\x09\x1b\x8d\x2c\xfa\xd6\x6a\xd2\x35\x28\xf6\xf4\x9b\xd1\x8f\xd6\x3f\xf1\x3a\x86\x7b\xc4\xe6\x71\xb0\xa2\xde\xb1\x67\xc5\x6f\x50\xa0\xdc\xe1\xd3\x88\x8e\x9f\xc6\x86\x37\x81\xc4\xaf\xbb\x7f\xeb\x28\x86\x27\x13\xa9\xcd\xa1\xa1\xe5\x03\x8a\xf1\xd3\x8b\xe0\xe7\x52\xef\xa4\x35\x7a\x3c\x99\xb0\x6f\xec\xff\x01\x00\x00\xff\xff\x39\x8f\xbf\x84\x4f\x09\x00\x00")

func imagesBaseEntrypointMainGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypointMainGo,
		"images/base/entrypoint/main.go",
	)
}

func imagesBaseEntrypointMainGo() (*asset, error) {
	bytes, err := imagesBaseEntrypointMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint/main.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":         imagesBaseDockerfile,
	"images/base/clean-install":      imagesBaseCleanInstall,
	"images/base/entrypoint/main.go": imagesBaseEntrypointMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile":    {imagesBaseDockerfile, map[string]*bintree{}},
			"clean-install": {imagesBaseCleanInstall, map[string]*bintree{}},
			"entrypoint": {nil, map[string]*bintree{
				"main.go": {imagesBaseEntrypointMainGo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
