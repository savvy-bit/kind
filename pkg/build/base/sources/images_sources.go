// Code generated by go-bindata.
// sources:
// ../../../../images/base/Dockerfile
// ../../../../images/base/clean-install
// ../../../../images/base/entrypoint/main.go
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7f\x6f\xdb\xb8\xb2\xfd\x5f\x9f\x62\x20\x07\x6d\xd2\xb5\xac\x34\x69\xbb\xd9\x2c\xb2\xef\xb9\x89\x9b\x35\x9a\xd8\x85\xed\xb4\x28\xf6\x2d\x02\x4a\x1a\x4b\x5c\x53\xa4\x1e\x49\x59\x71\xfb\xfa\x3e\xfb\xc5\x50\x3f\x6c\xa7\xed\xde\xc5\xdd\x7b\x83\x00\xb6\x25\x72\x66\x38\x9c\x39\xe7\x90\x3d\xb8\x54\xc5\x46\xf3\x34\xb3\x70\x72\xfc\xfc\x0c\x16\x19\xc2\xdb\x32\x42\x2d\xd1\xa2\x81\x61\x69\x33\xa5\xcd\xc0\xeb\x79\x3d\xb8\xe1\x31\x4a\x83\x09\x94\x32\x41\x0d\x36\x43\x18\x16\x2c\xce\xb0\x7d\xd3\x87\xf7\xa8\x0d\x57\x12\x4e\x06\xc7\x70\x48\x03\xfc\xe6\x95\x7f\xf4\xb3\xd7\x83\x8d\x2a\x21\x67\x1b\x90\xca\x42\x69\x10\x6c\xc6\x0d\x2c\xb9\x40\xc0\x87\x18\x0b\x0b\x5c\x42\xac\xf2\x42\x70\x26\x63\x84\x8a\xdb\xcc\xb9\x69\x8c\x0c\xbc\x1e\x7c\x6c\x4c\xa8\xc8\x32\x2e\x81\x41\xac\x8a\x0d\xa8\xe5\xee\x38\x60\xd6\x05\x4c\x7f\x99\xb5\xc5\x79\x18\x56\x55\x35\x60\x2e\xd8\x81\xd2\x69\x28\xea\x81\x26\xbc\x19\x5f\x8e\x26\xf3\x51\x70\x32\x38\x76\x53\xee\xa4\x40\x63\x40\xe3\xff\x96\x5c\x63\x02\xd1\x06\x58\x51\x08\x1e\xb3\x48\x20\x08\x56\x81\xd2\xc0\x52\x8d\x98\x80\x55\x14\x6f\xa5\xb9\xe5\x32\xed\x83\x51\x4b\x5b\x31\x8d\x5e\x0f\x12\x6e\xac\xe6\x51\x69\xf7\x92\xd5\x46\xc7\xcd\xde\x00\x25\x81\x49\xf0\x87\x73\x18\xcf\x7d\x78\x3d\x9c\x8f\xe7\x7d\xaf\x07\x1f\xc6\x8b\x5f\xa7\x77\x0b\xf8\x30\x9c\xcd\x86\x93\xc5\x78\x34\x87\xe9\x0c\x2e\xa7\x93\xab\xf1\x62\x3c\x9d\xcc\x61\xfa\x06\x86\x93\x8f\xf0\x76\x3c\xb9\xea\x03\x72\x9b\xa1\x06\x7c\x28\x34\xc5\xaf\x34\x70\x4a\x23\x26\x94\xb3\x39\xe2\x5e\x00\x4b\x55\x07\x64\x0a\x8c\xf9\x92\xc7\x20\x98\x4c\x4b\x96\x22\xa4\x6a\x8d\x5a\x72\x99\x42\x81\x3a\xe7\x86\x36\xd3\x00\x93\x89\xd7\x03\xc1\x73\x6e\x99\x75\x4f\xbe\x5a\xd4\xc0\xf3\x7a\xb0\xe2\x32\x81\x58\x94\xc6\xa2\x86\x88\xd1\x52\x73\x96\x62\x1f\xa2\x92\x0b\x4b\x0b\xdd\x96\xd6\x53\x03\x09\x46\x9c\xc9\x80\x06\x7a\x3d\xa8\x32\x1e\x67\x94\x9b\x88\x19\x1e\x33\x21\x36\xc0\x60\x8d\x7a\x03\x94\xaa\xa2\xc0\x04\x12\x55\xc9\x66\x56\x6d\x19\x0e\xff\xff\xc5\xe9\xed\xeb\x23\xaf\x07\x36\x63\x16\x4c\xc6\x0b\x53\x97\x0d\x03\x93\x33\x21\xa0\xb4\x5c\x70\xbb\x81\xa7\xb1\x40\x26\x03\x2e\x8d\x65\x42\x3c\xdd\xba\x23\x5b\x09\x32\x01\x89\x56\x05\x6d\xe8\x52\x69\xaf\x07\xac\xb0\x41\x8a\x16\xca\x22\x61\x16\xe1\xc9\x93\xee\x49\x63\x02\x0e\xfe\x1b\xbc\x1e\x18\x44\x57\x63\xe6\x3c\x0c\x53\x6e\xb3\x32\x1a\xc4\x2a\x0f\x57\xdd\x42\x77\xbf\x5a\x8d\x18\xe6\x8c\xf2\x13\x52\x4e\x92\x70\x2f\x07\x5e\x0f\x16\xaa\x6e\x8a\x0a\x81\x25\x09\x98\x8d\xb1\x98\x27\x7d\xb8\x9c\x8c\xfb\xb4\x0f\xa0\xdc\x3e\x5b\xa5\x84\x01\x89\x98\xd4\x75\xa8\xcb\x3a\xb7\x2c\xc9\x9d\x99\x37\x4a\xb7\x73\xe1\x07\x48\x54\xbc\x42\x0d\xb1\x92\x4b\x9e\x96\xda\xed\x21\xf5\x5f\x02\x11\x0a\x55\xf5\xdd\x22\x68\x33\x97\x4a\x08\x55\xd1\xf6\x6b\x5c\xa2\x46\x19\xa3\x39\xf7\x7a\xdd\x02\xa9\x8b\x96\x54\xfb\x68\x56\x56\x15\xae\x95\x2a\xbe\xe2\xe1\xbc\xa9\xfd\xb0\x71\x1a\x5e\x2a\x49\xfd\x89\x7a\x2c\x2d\xea\x25\x8b\x31\xdc\xb1\x93\xe0\x1a\x85\x2a\x50\x9b\x81\xc6\x24\x63\xd6\xe5\x2c\x12\x2a\x0d\x4f\x8e\x9f\xbf\x08\x8f\x5f\xd2\xbf\x2e\x25\x95\x62\xd0\xd8\x0c\x68\x5f\xb9\x0c\xea\xd5\x04\x71\xeb\xe1\xaf\x1b\x7e\x15\x1e\xff\x14\x3e\x3f\xfd\xca\x30\x97\x01\x0b\xa4\x92\x41\xa1\xf9\x9a\x0b\x4c\x31\xd9\x35\xef\x0d\x67\xd7\xd4\x97\xa3\xfb\xf1\xed\xf0\x7a\x74\xe1\x97\x51\x29\x6d\x79\xfe\xfc\x6c\x70\xfc\xc2\xf7\xde\xcc\xa6\xb7\x70\xf0\x79\x3b\xe0\x0b\xf5\xc2\x64\xba\x18\x9d\xc3\x70\x76\xf9\x2b\xe4\xa5\xb1\x10\x21\x24\xb8\xe4\x12\x13\x60\xa9\x43\xae\x25\x75\x09\x4d\xde\x8d\x5f\xc5\x66\x50\x2f\xd0\x45\x8e\x32\xe5\x12\xc3\x6e\x37\xea\xaa\x41\x1d\xf6\x4c\xac\x0a\x74\x91\x91\x8f\x0b\x9f\xe5\xc9\xab\x17\xbe\xe7\x2a\xd2\x12\x20\xc1\xd5\xe8\xf5\x78\x38\xb9\x7f\x33\x9b\x4e\x16\xa3\xc9\xd5\x85\x54\x92\xd3\x66\xb0\xd8\xf2\x35\x82\xb1\xaa\x30\x60\x54\x8e\x54\xd9\x50\x31\xd7\xf7\xa6\x5f\xd7\x1f\x37\x0e\xa4\xa9\x11\x40\x53\x77\x30\x9d\x96\x39\x4a\xdb\x87\x0a\x9f\x6a\x84\x43\x16\x1d\x95\x86\xfc\x50\x0c\x56\x01\xb5\x06\x03\x8b\x79\xa1\x34\xd3\x1b\x18\x4d\xde\xd7\x2b\x1d\xb8\x28\xff\x3c\x1a\xcf\xbb\x9c\xbe\xfb\x08\x7b\x3d\x0a\x61\x69\x74\x28\x54\xcc\x44\x18\x71\x19\xee\xbd\xf4\x66\x77\x13\x88\xb3\x5c\x25\xf0\xc3\xc3\x9f\x8f\xf4\x7a\x70\x8d\x16\x12\x2c\x50\x26\x28\x63\x8e\x86\x1a\x2d\xc3\x1d\x88\x02\x26\x34\xb2\x64\x03\x19\x33\xe7\x60\x4c\xd6\xa7\xa4\xf4\xc1\x48\x56\x24\x6e\x74\x9d\x93\x48\xab\x15\xca\x1a\x88\xb8\xb4\x0a\x0e\x91\xc5\x99\x83\x70\x10\x5c\xe2\x11\x75\x4b\x00\x05\x8b\x57\x2c\x45\xea\xd0\x18\x8d\xa1\x74\x10\xe6\x36\x11\x51\xd2\xea\x3d\x7e\x3c\x78\xb7\x9d\x0d\xea\x35\x8f\xd1\xc0\x61\x53\xa6\x47\xdf\x1c\x4d\x76\x9b\xfe\x0e\x21\xdb\x14\xa8\x09\x6f\x20\x84\x2d\xec\x38\x4a\x55\x12\xa5\x35\xce\x44\xce\x4d\xbc\xb5\x73\x58\x23\x24\x47\x07\x3a\xc4\xca\x5c\x82\x2a\x35\xd0\x1a\x09\x67\xb8\x4c\x8f\xea\x84\x49\x1a\xe1\x92\x5b\x16\x70\xa8\x31\x57\x6b\x5a\x4b\x29\x2b\x26\x89\xc9\x5a\xc4\x69\x43\xa7\x69\x6f\xb8\x74\x58\x5e\x21\x91\x9e\x63\xd1\x55\x6e\x52\x72\xf2\x87\x2a\xb5\x64\x22\xf9\xcf\x01\x83\x2b\x92\xbd\x9a\xfa\x1f\xcf\xa9\x02\x07\xe6\x56\x33\x69\x0a\xa5\x6d\xe0\xdc\x43\xcc\x82\x18\xb5\x25\x46\x64\x2e\x6d\xa5\x16\x1d\xab\x07\x85\xa6\xb8\x28\x4f\x41\xac\xf2\x5c\x49\x48\x65\x59\xa4\x27\x20\x4c\x14\x68\x14\x48\xc5\xd4\x9a\xef\x32\xd1\x44\x68\x36\x66\x0d\x82\x47\xcd\xef\xe3\x6e\x20\x2f\x2c\xe5\xc4\x00\x2f\xb4\x2a\x2d\x9e\x00\xda\x8c\xb2\x0e\x46\xc5\xcc\x3a\xfa\x0a\x04\x97\xe5\x03\xe4\xaa\x94\x16\x30\x6a\x26\x94\x09\xae\x61\x45\x0d\xc0\xca\xa5\x09\x6a\x46\x68\xcd\x46\xcc\x64\xa0\xcd\x46\xc6\xcd\xa3\x27\x4f\x60\x49\xec\x1c\x0a\x1e\x75\x20\x5d\x7f\xd2\x07\x97\xdc\x0e\x2c\xd3\x29\xda\x01\x6d\xa6\x09\x21\x90\x2c\x47\xf0\xdb\x15\xd8\xbc\x20\xa1\x66\x02\x83\xb6\x2c\x06\xcd\x16\xfb\x10\x24\x28\xd0\xe2\xd6\x8d\xce\x21\x58\x7e\xd3\x4f\x5e\x0a\xcb\x83\xd2\xa0\xde\x77\xf5\xec\xab\xc9\x68\xe3\xc7\x93\x9f\x7d\x77\xf0\x37\x3c\x39\x28\x08\x96\xe6\x9f\xf9\xf9\x56\x32\xa8\x88\xec\xe3\x99\x94\xec\xbf\x31\x9d\xd2\x1b\x5b\xf1\x97\x2c\x38\xf9\xf3\xdd\xc0\x31\xce\x14\xf8\x33\x64\xc9\xdb\x5b\x93\x5e\x48\xe5\xc3\x2f\xbf\xec\x27\xac\x6d\xab\x01\xf1\x3d\xa1\xdf\xb8\xa9\xfd\xba\x3f\xfa\x8d\xf4\x21\xfc\x30\x04\x36\x19\x2b\x0a\x6c\xf9\xa8\xc2\x4e\xdf\x38\x6a\x68\x84\x75\x87\x16\x2c\x52\x6b\x52\x6b\x04\x9d\x4e\xba\x7e\x8f\xb9\x1a\x2b\xa1\xab\xdd\xb0\x6d\x4d\x0c\x6b\xee\x0c\x7b\x06\x6d\x50\x16\x81\xcd\x30\xd0\x58\x28\xc3\xad\xd2\x1b\xa2\x1b\x99\x74\x36\xb7\x10\x36\xe0\xca\x79\x08\x5d\xf5\x85\x5c\xb6\x68\x6e\x5b\x47\xc1\xaa\x96\x3f\x61\x6f\x8b\xb2\xc1\x0e\xca\x12\x3d\xd5\x3f\x9f\x1a\xb8\x7e\x77\x0d\x2b\xdc\xb8\x17\x24\xb3\x9c\xf6\xe1\x32\x45\x5d\x68\x2e\xed\xde\xf3\xbd\xe8\x82\x56\x0f\x3a\x76\xe0\x8f\x12\xdb\x40\x63\xc7\xfe\x24\x10\x5e\x11\x6d\xa8\xe5\x92\xc7\xdc\xe1\xa0\x29\x0b\x82\x9c\xfa\x68\xb1\x73\xd2\x8a\x4b\xad\x51\x5a\xb1\xa1\x83\x04\x6d\x43\xc1\x09\x7e\x9d\xae\x1d\xec\x20\xe4\x37\x72\x62\x99\x59\x99\xd0\x01\xc0\x57\xd9\xa8\xb9\x77\x7a\xf9\x76\x34\xbb\x7f\x3f\x9a\xcd\xc7\xd3\xc9\x85\xef\xe2\x1a\x3c\xf3\x5d\xba\x1b\x41\xd9\xf1\x36\xca\x75\xdf\x71\xff\x23\xe2\x1f\x74\xc2\xc2\x09\x04\xab\x80\x01\x69\xa6\x4f\xa8\x15\xac\x99\x28\xa9\x2c\x0c\x17\x4e\x34\x36\x22\xb6\xd6\x14\xb0\xd4\x2a\x77\x88\xbb\xc2\x0d\x11\xa4\xff\xa1\x7e\x71\xde\x3e\x04\x55\xda\xa2\x24\xfd\xae\x4a\x91\x38\xef\x11\x15\x9d\xa6\x22\x3b\x34\x36\x51\xa5\x6d\x25\x09\x69\x0c\x9d\x13\xab\x1c\xf9\xb5\xfe\x79\xb7\xb8\x7f\x3b\xfa\x78\x7f\x35\x9d\x2c\xee\x3f\x0c\x67\x93\xfb\xe9\xe4\xfe\x6a\x38\xb9\x1e\xcd\xa6\x77\xf3\xfb\xbb\xb9\xd3\x6c\x4b\x26\x0c\xfa\x35\x23\x10\xae\x07\x4b\x33\xbf\x01\x7f\x5b\xbe\x95\x14\x8a\x25\xbb\x25\x5c\x97\xee\xc1\xe1\xa0\xee\x2f\x65\x5a\x98\xff\xb9\x69\xc3\x83\xf1\x95\x7f\x14\xa6\x45\xea\xc3\xff\x75\x4b\xa1\xba\x09\xb6\x0d\xdb\x3e\xde\x29\x2f\x38\x1e\xbd\x7e\x73\x79\x75\x76\xb6\x1d\x55\x6b\xb8\x83\xcf\xf4\xf9\xc5\x27\x1b\x01\x4d\xdc\xd6\x5e\x87\xec\x00\x7e\x82\x11\xfc\xc6\x74\x9c\x5d\x34\x13\x7e\x87\xbf\xbf\x0c\x38\x38\x14\x26\xba\x6f\x89\x2c\x88\xcd\x11\x18\x47\x35\xfe\x36\xcc\x7d\x2e\xf5\xbb\xae\xbe\x38\xf8\xbc\x5f\x63\x5f\xfc\x5d\xe0\xb9\x9c\x8c\x21\xe2\x92\x69\x12\x19\x56\x41\xa8\x0a\x1b\xc6\x92\x93\x58\x23\x65\x31\xbd\x9a\x1e\x46\x28\x6d\x86\x48\xe2\xf6\xe8\x9c\x3a\x0a\xaa\x6c\x03\x21\x54\x74\xae\xcb\x50\xd7\x5a\xf7\x72\x32\xde\x96\xf1\xf1\xe0\xd5\xe0\xd8\xef\x9e\x2f\x86\xb3\xd7\xc3\x9b\x9b\x0b\x3f\x96\x3c\x28\x44\x99\x72\x69\x82\x26\x43\xc1\xfa\xe0\xf3\xce\xdc\x2f\x03\x9b\x7e\xda\xce\x74\xd2\xfd\x6e\x76\x73\xd1\x95\x83\xb1\x4a\xb3\x14\x07\xa9\x52\xa9\x40\x56\x70\xf3\xe8\x54\xd7\xe6\x30\x94\x68\x2b\xa5\x57\xad\xc3\x70\x6b\xd5\x19\xac\xdd\xb6\x0e\xbe\xd4\x3f\x9b\x48\xbf\xec\x96\x23\x55\x63\x10\x68\xb4\x7a\x03\x2f\x21\x08\x9a\x8e\x08\x6d\x5e\x50\xaa\x28\x60\x68\xac\x91\xa1\x9d\x4d\x31\x19\x3b\x79\xf9\xca\x94\xf9\xfe\xe0\xee\x7d\xbe\x4a\xb8\x86\xa0\xd8\x4b\xfb\xf6\xb5\x65\x1a\x82\xcb\xfd\x97\xc1\xc3\xa7\xe5\x77\xac\x11\x71\xe9\xfd\x97\xb4\xd5\x16\x89\x31\x1a\xd5\xe3\xce\xe2\xdc\x75\x2c\x97\xad\x3a\x3d\xe4\x16\x2a\x2e\x04\xc4\x19\xc6\xab\xee\x0e\xa2\x53\x6b\x04\x3c\x47\xff\xb6\xb3\x26\x9d\x3e\xb6\xa6\x3b\x1e\x68\x23\xc4\x07\x6e\x0d\xd1\xd7\x7c\x7c\x3d\x5b\xdc\x8e\x27\x3f\x9c\xd6\xa0\x37\x1f\x5f\x2f\x46\xb3\x5b\x38\xac\x49\x52\x63\x80\x0f\x18\x97\x84\xd0\xdc\xee\x86\x17\x95\xe9\x27\x2e\x04\xdb\xd5\xa9\x26\x53\xd5\x7d\x54\xa6\x83\x38\xe5\xff\xc5\x93\x8b\xe7\x74\xe6\x7c\xf9\xa3\x37\x5f\x4c\xdf\xcd\xc7\xd7\x93\xe1\xcd\x8e\x3f\xca\x5a\xa5\x59\xd1\xc5\xe4\xae\x2d\x48\x78\xbb\x6b\x19\x26\x00\xa5\xd5\x9b\x42\x71\x3a\x74\xd1\x09\xbd\x58\xa5\xf5\xf9\xcf\x25\x2f\x53\x55\x77\x54\x73\xf7\x2b\x35\x2b\x37\x57\x27\xee\xcd\x1f\x74\xf0\x14\x68\x0d\x94\x86\xd0\x1b\xca\xa2\x66\x75\x92\xcb\xa9\x81\x08\x97\x4a\xd7\x5b\xc0\x65\x49\x48\xad\x1c\xe7\x34\x11\xd5\x97\x32\x02\xa1\xd0\xe8\xf4\x9e\xc3\x7e\x66\xbb\x88\xb9\x81\x77\xe3\xab\xe7\x5e\xaf\x0b\xa8\x42\x10\xb8\x46\xea\x1d\x17\xc2\x36\xf0\xe6\x5a\xa8\x3e\xe7\xfd\x06\xfe\x76\x71\xe1\xf6\xab\xdf\x07\xff\xd1\x59\xce\x87\xdf\xbd\x1e\x7c\x40\xa7\x57\xb6\x15\xa6\x88\x20\xc8\x79\x7b\x5c\xa2\x5a\x5a\x33\xcd\x95\x5b\x6a\x7b\x74\x6a\x99\x99\x1a\x57\xa0\xed\x03\xda\x78\x70\xd4\x11\x74\x9b\xbf\x67\x4a\x8a\xcd\xb3\xf6\x2c\xe5\xe8\xce\x5d\x92\xf4\x9d\xd9\x6d\x7c\x8e\xcb\xd7\xa8\x35\x4f\x12\x92\x4c\x96\x5c\x5b\x9e\xa3\x37\x9a\x2c\x66\x1f\xdf\x4d\xc7\x93\x05\x2d\xee\xd1\x1a\x1e\x2d\xd0\xd0\x33\x92\x84\xb4\x36\x77\x75\x85\x6d\x93\xa4\x9a\x15\x59\x77\x61\xc0\x60\xad\x44\x49\xfb\xa5\x80\xad\x15\x4f\x9c\x73\xc1\x36\xb4\x4f\xcd\xd7\x6e\x2d\x74\xc0\x6a\x2e\x8f\x04\x73\xf3\x63\x46\xa7\xb9\x38\x63\x32\xa5\xad\xeb\xac\x35\xf7\x63\x57\xce\xa5\xbb\x7d\x25\x87\x5e\x0f\x54\x1c\x97\xba\xad\x0a\x77\x5b\x41\xf3\xb8\x6d\xee\x10\xcf\xff\x85\x6b\x8a\xda\xa5\xf7\x7e\x7a\x73\x77\x3b\x72\xa9\x59\x33\xed\x64\x6f\x3d\xbd\x49\xc1\xb7\x28\x80\xc4\x87\x0b\xb5\xdd\xf4\xdb\xe1\x25\x31\xa3\xbb\xe0\x64\xc6\xf0\x54\xd2\x46\xed\xf4\xe4\xce\xfd\xdb\xbe\xa8\x4e\x42\x6e\x4c\x89\x26\x3c\x3d\xfd\xf1\x45\xcf\x7d\xa7\x33\x1c\x4a\x1b\x9c\x9c\x9d\x9d\x9d\x9d\x9c\xbe\x7c\xf9\x37\xed\x9c\x9e\xfe\x74\xf2\xf2\xec\xc5\xd9\xa9\xf7\x8f\x00\x00\x00\xff\xff\x4b\xde\x8e\xc2\x54\x17\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseCleanInstall = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\x51\x6f\xdb\x36\x14\x85\xdf\xf9\x2b\xce\xac\x62\xd8\x86\x48\x4a\xf3\x32\x60\xc5\x86\x79\x49\x86\x19\x2d\x6c\x20\x76\x57\x14\xdb\x1e\xae\xa8\x2b\xe9\x22\x12\xc9\x91\x57\x75\xfc\xef\x07\x2a\x71\x50\x63\x7e\x32\x75\x0e\x79\x3e\x1e\xde\xe2\x9b\xba\x11\x57\xa7\xc1\x98\x02\xb7\x3e\x9c\xa2\xf4\x83\xe2\xe6\xfa\xed\x8f\x38\x0c\x8c\xf7\x73\xc3\xd1\xb1\x72\xc2\x7a\xd6\xc1\xc7\x54\x99\xc2\x14\xf8\x20\x96\x5d\xe2\x16\xb3\x6b\x39\x42\x07\xc6\x3a\x90\x1d\xf8\xac\x5c\xe1\x4f\x8e\x49\xbc\xc3\x4d\x75\x8d\xef\xb2\x61\xf5\x22\xad\xbe\x7f\x67\x0a\x9c\xfc\x8c\x89\x4e\x70\x5e\x31\x27\x86\x0e\x92\xd0\xc9\xc8\xe0\x27\xcb\x41\x21\x0e\xd6\x4f\x61\x14\x72\x96\x71\x14\x1d\x96\x98\x97\x43\x2a\x53\xe0\xf3\xcb\x11\xbe\x51\x12\x07\x82\xf5\xe1\x04\xdf\x7d\xed\x03\xe9\x02\x9c\x7f\x83\x6a\xf8\xa9\xae\x8f\xc7\x63\x45\x0b\x6c\xe5\x63\x5f\x8f\xcf\xc6\x54\x7f\xd8\xdc\xde\x6f\xf7\xf7\xe5\x4d\x75\xbd\x6c\xf9\xe8\x46\x4e\x09\x91\xff\x9d\x25\x72\x8b\xe6\x04\x0a\x61\x14\x4b\xcd\xc8\x18\xe9\x08\x1f\x41\x7d\x64\x6e\xa1\x3e\xf3\x1e\xa3\xa8\xb8\xfe\x0a\xc9\x77\x7a\xa4\xc8\xa6\x40\x2b\x49\xa3\x34\xb3\x5e\x94\x75\xa6\x93\x74\x61\xf0\x0e\xe4\xb0\x5a\xef\xb1\xd9\xaf\xf0\xdb\x7a\xbf\xd9\x5f\x99\x02\x9f\x36\x87\x3f\x76\x1f\x0f\xf8\xb4\x7e\x78\x58\x6f\x0f\x9b\xfb\x3d\x76\x0f\xb8\xdd\x6d\xef\x36\x87\xcd\x6e\xbb\xc7\xee\x77\xac\xb7\x9f\xf1\x7e\xb3\xbd\xbb\x02\x8b\x0e\x1c\xc1\x4f\x21\x66\x7e\x1f\x21\xb9\x46\x6e\x73\x67\x7b\xe6\x0b\x80\xce\x3f\x03\xa5\xc0\x56\x3a\xb1\x18\xc9\xf5\x33\xf5\x8c\xde\x7f\xe1\xe8\xc4\xf5\x08\x1c\x27\x49\xf9\x31\x13\xc8\xb5\xa6\xc0\x28\x93\x28\xe9\xf2\xe5\x7f\x97\xaa\xf2\x2c\xad\x91\x6c\x94\xa0\x60\x67\x29\xa4\x79\xa4\xdc\xcc\xf2\x46\xd3\xe4\x1d\xee\xbc\x7d\xe4\x28\x53\x4e\x0a\xa4\xca\xd1\x2d\x2c\xe2\x92\xd2\x38\x2e\xb1\x64\x1f\xa9\xe7\x64\x8a\x9c\x9a\x13\x1c\xec\xc8\xb4\x30\xcd\x61\x89\x9c\x9d\x63\xcb\x29\x51\x3c\x9d\xb7\x82\xa2\x4a\x47\x56\xf3\xa8\x82\xab\xbe\x7a\xde\x55\x9e\x75\x09\x9a\x5f\x30\x81\x9b\x97\x3f\xd6\x3b\xa7\x91\xec\xa3\x31\x89\x15\xa5\x07\xc7\xc8\x4f\xa2\xc6\x48\x87\xbf\xf0\xa6\xc0\xcf\xb8\xc6\x3f\xef\x16\x08\x03\xb0\x1d\x3c\x7e\xf9\xf6\x06\xab\xad\x7f\xe5\x3c\x77\xc8\xed\x2a\x5b\x9e\x44\xf1\xd6\x74\x62\x0c\x05\x2d\x7b\x56\xcc\xa1\x25\xe5\xd7\xe5\x99\xa7\x3c\xa1\x2c\x9d\x3f\xf3\x95\x91\x73\x47\xec\xda\x84\x37\xbf\xbe\xba\x97\x3b\xa0\x3c\x99\x38\xa1\x8c\x1d\xfe\x36\x00\xea\x2f\x14\x6b\x9b\x47\xb9\x6e\xb9\xb1\xde\x75\xf5\x0f\x5f\x29\xa3\x34\x35\x05\xad\x47\x49\x9a\x2e\x15\xdf\xbf\xae\x75\x0a\x17\xda\xb2\x36\xff\x05\x00\x00\xff\xff\xdd\xdb\xd0\x5d\x1a\x04\x00\x00")

func imagesBaseCleanInstallBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseCleanInstall,
		"images/base/clean-install",
	)
}

func imagesBaseCleanInstall() (*asset, error) {
	bytes, err := imagesBaseCleanInstallBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/clean-install", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypointMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\x61\x73\xdb\xb8\x11\xfd\x2c\xfc\x8a\x3d\x76\x6e\x2a\xe5\x68\xd2\x92\xcf\x8e\x4f\x4d\x3e\xa8\xb6\x92\x68\xe2\xca\x19\x4b\xa9\x9b\x49\x3d\x09\x08\x2e\x49\x8c\x41\x80\x05\x40\xc9\x6c\x27\xff\xbd\xb3\x20\xed\xc8\xc9\x7d\xb0\x2c\x90\xc0\xdb\xb7\xef\x3d\xac\xd2\x17\xec\xc2\x34\x9d\x95\x65\xe5\x61\x76\x3c\x3d\x87\x6d\x85\xf0\xbe\xcd\xd0\x6a\xf4\xe8\x60\xd1\xfa\xca\x58\x97\x30\x76\x25\x05\x6a\x87\x39\xb4\x3a\x47\x0b\xbe\x42\x58\x34\x5c\x54\x08\xc3\x9b\x18\xfe\x89\xd6\x49\xa3\x61\x96\x1c\xc3\x98\x36\x44\xc3\xab\x68\xf2\x37\xd6\x99\x16\x6a\xde\x81\x36\x1e\x5a\x87\xe0\x2b\xe9\xa0\x90\x0a\x01\x1f\x04\x36\x1e\xa4\x06\x61\xea\x46\x49\xae\x05\xc2\x5e\xfa\x2a\x14\x19\x20\x12\xf6\x69\x00\x30\x99\xe7\x52\x03\x07\x61\x9a\x0e\x4c\x71\xb8\x0b\xb8\x67\x0c\x00\xa0\xf2\xbe\x99\xa7\xe9\x7e\xbf\x4f\x78\x60\x99\x18\x5b\xa6\xaa\xdf\xe5\xd2\xab\xd5\xc5\x72\xbd\x59\x1e\xcd\x92\x63\xc6\x3e\x6a\x85\xce\x81\xc5\xff\xb4\xd2\x62\x0e\x59\x07\xbc\x69\x94\x14\x3c\x53\x08\x8a\xef\xc1\x58\xe0\xa5\x45\xcc\xc1\x1b\xe2\xb9\xb7\xd2\x4b\x5d\xc6\xe0\x4c\xe1\xf7\xdc\x22\xcb\xa5\xf3\x56\x66\xad\x7f\x26\xd0\x23\x2b\xe9\xe0\x70\x83\xd1\xc0\x35\x44\x8b\x0d\xac\x36\x11\xfc\x7d\xb1\x59\x6d\x62\x76\xbb\xda\xbe\xbb\xfe\xb8\x85\xdb\xc5\xcd\xcd\x62\xbd\x5d\x2d\x37\x70\x7d\x03\x17\xd7\xeb\xcb\xd5\x76\x75\xbd\xde\xc0\xf5\x1b\x58\xac\x3f\xc1\xfb\xd5\xfa\x32\x06\x94\xbe\x42\x0b\xf8\xd0\x58\xe2\x6e\x2c\x48\x92\x0e\xf3\x84\x6d\x10\x9f\x15\x2f\x4c\x4f\xc6\x35\x28\x64\x21\x05\x28\xae\xcb\x96\x97\x08\xa5\xd9\xa1\xd5\x52\x97\xd0\xa0\xad\xa5\x23\xf3\x1c\x70\x9d\x33\x25\x6b\xe9\xb9\x0f\xeb\x9f\xda\x49\xd8\x8b\x94\xb1\xf4\x05\xdb\x92\x85\x54\x17\x6b\xd4\xde\x81\x69\x89\x06\x21\xa3\xf6\xb6\x6b\x8c\xd4\x3e\x81\x95\x9f\xb3\x23\xd8\x73\xe9\x5d\xe0\xb2\x59\xbd\xfd\xb8\xb9\x99\xb2\x23\xc2\xd4\x80\x0f\x28\x1c\x8c\xb9\x2d\x77\x9f\xa7\x77\x31\xf4\x5f\xe6\x77\x31\xa0\xde\x7d\x9e\xdf\x4d\x58\x5f\x87\x2b\x65\xf6\x0e\x5a\x47\x1e\x34\x68\x0b\x63\x6b\x30\x41\x05\x2e\x7a\xa6\x52\x07\x9a\x91\x36\x39\x46\x20\x8c\xa6\xa0\xa0\x85\x9d\xe4\xf0\x35\x37\xe2\x3e\x28\x86\xe2\x2b\xfb\x92\x61\x61\x2c\x7e\x81\x3d\x42\xc5\x77\x48\x10\x2d\x57\xaa\x83\x28\x33\xc6\x63\x1e\x05\x24\xa9\xa5\x27\x3d\x00\x77\x68\x3b\x5f\x91\x54\xa8\x28\x66\xca\xe8\xb2\xcf\xa8\xf4\x09\x63\xb7\x08\x82\xeb\xbe\x21\x87\x3a\x7f\x6c\x92\xb8\x86\xa0\x37\xd6\x08\x32\x8a\xd6\x56\x96\x25\x5a\x70\x9e\x5b\x4a\x51\xcf\xb9\x27\x10\xb1\xef\xca\xc1\x9e\xd0\xf6\x08\xdc\x22\xe4\x46\x23\x34\x96\x58\xd7\x74\x86\xeb\x8e\x30\x77\x92\x3c\xa3\x07\xe6\xb0\xf7\x84\xb1\xf5\xf5\x76\x39\xef\x6b\x1f\x9a\x84\x39\x70\x07\x1c\x9c\xd4\xa5\xa2\x04\x4c\x93\x7f\x85\x5b\x18\x43\xeb\x7a\x1c\xd5\xf5\x71\xf1\xb9\x92\x59\xd2\x8b\x5f\xf3\x7b\x74\x20\x3d\x20\x77\x92\xd2\x60\x20\x6b\xa5\xca\xa1\x31\xd6\xf3\x4c\x75\x71\x90\xa9\xb7\x89\x38\x6b\xba\x2c\xe4\xf6\xbe\xe2\x9e\x0e\xe6\x06\xdd\x10\x9c\x14\x96\xdf\x9b\x3c\x88\x0f\x07\x57\xd3\xf1\xc1\xa9\x1f\x93\x04\x9e\xa0\x7e\xce\x51\x9a\x42\xef\x66\xf0\x36\xf4\xe0\x92\x85\x2d\x1d\xa5\x88\x35\x5c\xdc\x13\x4e\xcd\xa5\x66\x4c\xd6\x44\x18\xc6\x6c\x14\x19\x17\x85\xcf\xd4\xc9\x52\x93\xf2\xa3\xc8\x75\x4e\x70\xa5\x22\xc6\x46\x91\x32\x65\xc4\x26\x81\x6d\x87\xae\x17\xd2\x55\xa6\x55\x39\x64\xfd\xfd\x12\x50\x73\x61\x4d\x0c\x59\xeb\x49\x7e\x25\x75\xfb\x40\x19\x1c\xf8\x77\xa6\xfd\xab\x25\x89\x83\xc7\x06\x4a\xf4\x3d\x0c\xd7\x5d\x65\xf6\x84\x3c\x4c\xa9\x9a\xeb\x97\xc3\x7c\xd2\xed\x03\x2d\x8f\x1a\x5e\xa2\x0b\x2f\x06\x7e\xc9\xcb\xa4\xf2\xb5\x7a\x3c\xe5\xe6\x69\x5a\x4a\x5f\xb5\x59\x22\x4c\x9d\xd6\x26\xeb\xfa\x8f\x4c\x99\x2c\x3d\x3d\x9b\xe5\xc5\xb9\x98\xe5\x67\xc5\xef\xe7\x67\xc7\x53\x71\x9e\x4f\xf3\xe2\xe5\xec\xf4\xec\xe4\xfc\x8f\xd3\xb3\x3f\xf2\xd9\xa9\x38\xce\x8a\x69\xda\xdc\x97\x03\xfe\xf0\xef\x4b\xa0\x90\x94\xe6\x2f\x57\xd3\x63\x26\x8c\x76\x1e\x9c\x2c\xad\xaf\xa5\x86\xd7\x70\xf2\x3b\x63\x45\xab\x45\x90\x73\x3c\x81\xff\xb1\x51\x9a\x52\x2e\x77\xa8\x3d\xfc\xd7\xd4\x99\xc4\xc7\xac\xa3\xa3\x94\xd1\x28\xa7\x69\xae\x14\xe9\xf6\x61\x75\x39\x0d\xe6\x71\xd8\x57\x52\x61\x38\xfe\xd8\x4f\x5f\x3a\x97\x98\x68\xf4\xd4\x7b\x3a\x4b\xc9\xee\x46\xe6\x6c\x34\xa8\xb0\x2a\xb5\xb1\x38\x1e\x9c\x4a\x36\xab\xb7\x17\xef\xae\x2e\x27\x2c\x00\x95\x96\x67\xfd\x2d\xb0\xc8\x55\x74\x98\x1d\x61\xea\x9a\x12\x1a\xfe\x6c\xe9\xa0\xb0\xa6\x0e\x03\x8b\x56\x6c\x24\x0b\x50\xa8\xc7\x43\x72\x26\xf0\x0a\x66\xd4\xdc\x48\x99\x32\x79\xc3\x3d\x57\xe3\x68\x6d\x3c\xa0\x36\x6d\x59\xd1\x99\xb6\xcf\xac\x37\x07\x55\x7e\x89\x26\x6c\xf4\x8d\x8d\x44\x9d\xf7\x73\x0c\xe6\xaf\xbf\x87\xf1\x2e\x7e\x16\xcc\xc0\x98\xda\x3b\x0c\x33\x8c\x0d\x8d\x28\x19\x02\xb5\x59\xbd\xbd\xd9\xfe\x63\xb5\xfe\xed\x84\xca\xd4\xdc\x8b\x0a\x5c\xe7\x3c\xd6\xf9\x84\x8d\x04\x81\xd3\xbd\x1c\x8b\x8a\x6b\x82\xde\x04\x89\x62\x98\x4e\x9e\xe4\x5a\x1b\x2f\x8b\x6e\x2c\x62\x38\x50\x8c\x0a\x1d\x3c\x08\x3b\xc7\x8f\x26\xff\x76\x32\x99\xb0\xd0\xf6\x07\x2b\xb5\x57\x7a\x1c\xdd\xf2\xf0\x6b\xf7\x8c\x67\x92\x24\x51\x5f\x86\x68\xbc\x3a\x12\x41\x42\x5a\xfe\xf2\xfa\xc7\x5a\x4f\x42\x06\xc4\x62\x1c\x2d\x1f\x7a\x40\x5e\x78\x9a\x83\x81\xc0\x1c\x7e\xdd\xd1\xd9\xe1\x4c\x14\xd3\xf3\x09\x1b\x8d\x2c\xfa\xd6\x6a\xd2\x35\x28\xf6\xf4\x9b\xd1\x8f\xd6\x3f\xf1\x3a\x86\x7b\xc4\xe6\x71\xb0\xa2\xde\xb1\x67\xc5\x6f\x50\xa0\xdc\xe1\xd3\x88\x8e\x9f\xc6\x86\x37\x81\xc4\xaf\xbb\x7f\xeb\x28\x86\x27\x13\xa9\xcd\xa1\xa1\xe5\x03\x8a\xf1\xd3\x8b\xe0\xe7\x52\xef\xa4\x35\x7a\x3c\x99\xb0\x6f\xec\xff\x01\x00\x00\xff\xff\x39\x8f\xbf\x84\x4f\x09\x00\x00")

func imagesBaseEntrypointMainGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypointMainGo,
		"images/base/entrypoint/main.go",
	)
}

func imagesBaseEntrypointMainGo() (*asset, error) {
	bytes, err := imagesBaseEntrypointMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint/main.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":         imagesBaseDockerfile,
	"images/base/clean-install":      imagesBaseCleanInstall,
	"images/base/entrypoint/main.go": imagesBaseEntrypointMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile":    {imagesBaseDockerfile, map[string]*bintree{}},
			"clean-install": {imagesBaseCleanInstall, map[string]*bintree{}},
			"entrypoint": {nil, map[string]*bintree{
				"main.go": {imagesBaseEntrypointMainGo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
