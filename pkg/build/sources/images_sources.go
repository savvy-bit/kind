// Code generated by go-bindata.
// sources:
// ../../../images/base/Dockerfile
// ../../../images/base/entrypoint/main.go
// ../../../images/base/journalctl-to-tty.service
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7d\x6f\xdb\x46\xd2\xff\x5f\x9f\x62\x40\x19\x89\xdd\x8a\xa4\x63\xc7\xa9\xeb\xc2\x78\x1e\xc5\x56\x5c\x21\x8e\x14\x48\x4a\x83\xa0\x57\x18\x4b\x72\x44\x6e\xb5\xdc\xe5\xed\x8b\x14\x25\xe7\x7e\xf6\xc3\x2c\x49\xbd\xd8\xce\x5d\x0f\xbd\x2b\x0a\x44\xe6\xee\xce\xcc\xce\xcb\x6f\x7e\xb3\x5d\xb8\x52\xd5\x5a\xf3\xbc\xb0\x70\x72\xfc\xe2\x1c\x66\x05\xc2\x5b\x97\xa0\x96\x68\xd1\x40\xdf\xd9\x42\x69\x13\x75\xba\x9d\x2e\xdc\xf2\x14\xa5\xc1\x0c\x9c\xcc\x50\x83\x2d\x10\xfa\x15\x4b\x0b\x6c\x57\x7a\xf0\x0b\x6a\xc3\x95\x84\x93\xe8\x18\x0e\x69\x43\xd0\x2c\x05\x47\x3f\x75\xba\xb0\x56\x0e\x4a\xb6\x06\xa9\x2c\x38\x83\x60\x0b\x6e\x60\xce\x05\x02\x7e\x4e\xb1\xb2\xc0\x25\xa4\xaa\xac\x04\x67\x32\x45\x58\x71\x5b\x78\x35\x8d\x90\xa8\xd3\x85\x4f\x8d\x08\x95\x58\xc6\x25\x30\x48\x55\xb5\x06\x35\xdf\xdd\x07\xcc\x7a\x83\xe9\xbf\xc2\xda\xea\x22\x8e\x57\xab\x55\xc4\xbc\xb1\x91\xd2\x79\x2c\xea\x8d\x26\xbe\x1d\x5e\x0d\x46\xd3\x41\x78\x12\x1d\xfb\x23\x1f\xa4\x40\x63\x40\xe3\xdf\x1d\xd7\x98\x41\xb2\x06\x56\x55\x82\xa7\x2c\x11\x08\x82\xad\x40\x69\x60\xb9\x46\xcc\xc0\x2a\xb2\x77\xa5\xb9\xe5\x32\xef\x81\x51\x73\xbb\x62\x1a\x3b\x5d\xc8\xb8\xb1\x9a\x27\xce\xee\x39\xab\xb5\x8e\x9b\xbd\x0d\x4a\x02\x93\x10\xf4\xa7\x30\x9c\x06\xf0\xba\x3f\x1d\x4e\x7b\x9d\x2e\x7c\x1c\xce\x7e\x1e\x7f\x98\xc1\xc7\xfe\x64\xd2\x1f\xcd\x86\x83\x29\x8c\x27\x70\x35\x1e\x5d\x0f\x67\xc3\xf1\x68\x0a\xe3\x37\xd0\x1f\x7d\x82\xb7\xc3\xd1\x75\x0f\x90\xdb\x02\x35\xe0\xe7\x4a\x93\xfd\x4a\x03\x27\x37\x62\x46\x3e\x9b\x22\xee\x19\x30\x57\xb5\x41\xa6\xc2\x94\xcf\x79\x0a\x82\xc9\xdc\xb1\x1c\x21\x57\x4b\xd4\x92\xcb\x1c\x2a\xd4\x25\x37\x14\x4c\x03\x4c\x66\x9d\x2e\x08\x5e\x72\xcb\xac\xff\xf2\xe8\x52\x51\xa7\xd3\x85\x05\x97\x19\xa4\xc2\x19\x8b\x1a\x12\x46\x57\x2d\x59\x8e\x3d\x48\x1c\x17\x96\x2e\xba\x4d\xad\xe7\x06\x32\x4c\x38\x93\x21\x6d\xec\x74\x61\x55\xf0\xb4\x20\xdf\x24\xcc\xf0\x94\x09\xb1\x06\x06\x4b\xd4\x6b\x20\x57\x55\x15\x66\x90\xa9\x95\x6c\x4e\xd5\x92\xe1\xf0\x8f\x97\xa7\xef\x5e\x1f\x75\xba\x60\x0b\x66\xc1\x14\xbc\x32\x75\xda\x30\x30\x25\x13\x02\x9c\xe5\x82\xdb\x35\x3c\x4f\x05\x32\x19\x72\x69\x2c\x13\xe2\xf9\x56\x1d\xc9\xca\x90\x09\xc8\xb4\xaa\x28\xa0\x73\xa5\x3b\x5d\x60\x95\x0d\x73\xb4\xe0\xaa\x8c\x59\x84\x67\xcf\x36\x5f\x1a\x11\x70\xf0\xff\xd0\xe9\x82\x41\xf4\x39\x66\x2e\xe2\x38\xe7\xb6\x70\x49\x94\xaa\x32\x5e\x6c\x2e\xba\xfb\xd3\x6a\xc4\xb8\x64\xe4\x9f\x98\x7c\x92\xc5\x7b\x3e\xe8\x74\x61\xa6\xea\xa2\x58\x21\xb0\x2c\x03\xb3\x36\x16\xcb\xac\x07\x57\xa3\x61\x8f\xe2\x00\xca\xc7\xd9\x2a\x25\x0c\x48\xc4\xac\xce\x43\xed\x6a\xdf\xb2\xac\xf4\x62\xde\x28\xdd\x9e\x85\xef\x21\x53\xe9\x02\x35\xa4\x4a\xce\x79\xee\xb4\x8f\x21\xd5\x5f\x06\x09\x0a\xb5\xea\xf9\x4b\x50\x30\xe7\x4a\x08\xb5\xa2\xf0\x6b\x9c\xa3\x46\x99\xa2\xb9\xe8\x74\x37\x17\xa4\x2a\x9a\x53\xee\xa3\x59\x58\x55\xf9\x52\x5a\xf1\x05\x8f\xa7\x4d\xee\xc7\x8d\xd2\xf8\x4a\x49\xaa\x4f\xd4\x43\x69\x51\xcf\x59\x8a\xf1\x8e\x9c\x0c\x97\x28\x54\x85\xda\x44\x1a\xb3\x82\x59\xef\xb3\x44\xa8\x3c\x3e\x39\x7e\xf1\x32\x3e\x3e\xa3\xff\xb5\x93\x94\x8a\x61\x23\x33\xa4\xb8\x72\x19\xd6\xb7\x09\xd3\x56\xc3\x9f\x17\xfc\x2a\x3e\xfe\x31\x7e\x71\xfa\x48\x30\x97\x21\x0b\xa5\x92\x61\xa5\xf9\x92\x0b\xcc\x31\xdb\x15\x4f\x61\x19\x5f\x8f\x0f\x13\x94\xb6\x40\x14\x19\xea\xa3\x0b\x2a\x35\xa1\x34\x82\x71\x55\xa5\x34\x41\x40\x13\x1b\xa6\xd3\x02\x4d\x0f\x86\x83\x76\xad\x86\xca\xc9\xd5\xcf\xc0\x74\x1e\x35\xe1\x91\x6a\x55\x87\x9a\x1b\x30\x96\x0b\x41\x99\xd8\x9f\xdc\x80\x51\x14\xfd\x94\x49\xd0\x48\x20\xc9\xe9\xbc\x56\x2e\x2f\x94\xab\x45\xf9\xd4\xa1\x92\xe1\xd6\x7f\xa3\xfb\x72\xe3\x4d\xa0\xcd\xca\x6f\xda\x5c\x20\xea\x90\x54\x52\x7f\x19\xb0\x32\x7b\xf5\x32\xf0\x1f\x5e\xf7\xa7\x83\xbb\xe1\xbb\xfe\xcd\xe0\xee\x97\xc1\x64\x3a\x1c\x8f\x2e\x83\xe3\xe8\x34\x3a\x79\xb8\x7c\x19\x2c\xce\x4d\x94\xa7\x3a\xe2\x6a\x37\x5f\xc3\x83\xaf\x24\xf4\xfe\xe2\xe0\xeb\x63\x59\xf7\x41\xe7\xcd\x64\xfc\x0e\x76\xd7\xee\xc9\x93\xa3\xf1\x6c\x70\x51\x3b\xa3\x74\xc6\x42\x82\x90\xe1\x9c\x4b\xcc\x80\xe5\x1e\xd1\xe7\x84\x1e\x74\x78\x37\xae\x2a\x35\x51\x1d\x78\x1f\x51\x94\x39\x97\x18\x6f\xb2\xb4\xae\x26\xd4\x71\xd7\xa4\xaa\xc2\xc7\x37\xf6\x95\x6a\xbd\x8b\xae\x07\xaf\x87\xfd\xd1\xdd\x9b\xc9\x78\x34\x1b\x8c\xae\x2f\xa5\x92\x9c\x92\x94\xa5\x96\x2f\x11\x8c\x55\x95\x01\xa3\x4a\xa4\x8a\x87\x15\xf3\x78\x68\x7a\x9b\x60\x51\xf3\x22\x80\x00\x4d\xa8\xc1\x74\xee\x4a\x94\xb6\x07\x2b\x7c\xae\x11\x0e\x59\x72\xe4\x0c\xe9\x21\x1b\xac\x02\x82\x0c\x06\x16\xcb\x4a\x69\xa6\xd7\x30\x18\xfd\x52\xdf\xb4\x8e\xcb\xbf\xb6\xa6\xd3\x85\x1b\xb4\x90\x61\x85\x32\x43\x99\x72\x34\x94\x8d\x94\x03\x1b\x78\x05\x26\x34\xb2\x6c\x0d\x05\x33\x17\x60\x4c\xd1\x23\xc3\x7b\x60\x24\xab\x32\xbf\xbb\xb6\x3b\xd1\x6a\x81\xb2\x06\x51\x2e\xad\xa2\xc2\x0e\xa1\x62\xe9\x82\xe5\x48\x60\x92\xa2\x31\x64\x21\xb5\x87\x06\xe4\xe8\x1e\xb5\xdb\x1f\x6e\xde\x45\x1e\x83\x7a\xc9\x53\x34\x70\xd8\x54\xd4\xd1\x93\xbb\x49\x6e\x03\x45\x31\x14\xeb\x0a\x35\x41\x23\xc4\xb0\x45\x48\xdf\xfd\x95\x44\x69\x8d\x17\x51\x72\x93\x6e\xe5\x1c\xd6\x60\xce\xd1\xe3\xa3\xaf\x0d\x09\xca\x69\xa0\x2b\x11\x24\x72\x99\x1f\xd5\xfe\x91\xbe\x86\x08\xf2\x5d\x05\x87\x1a\x4b\xb5\xa4\xbb\x38\xb9\x62\x92\x9a\x6e\x0b\x8e\xad\xe9\x47\xff\x3b\x74\x9a\x7c\x18\xc1\x5e\xf3\x81\xbf\x75\x3c\x35\xf1\x1d\xc5\x6a\x26\x0d\x81\x44\xe8\xd5\x43\xca\xc2\x14\xb5\xa5\xb6\xcc\xbc\x43\x9c\x16\x1b\x6a\x11\x56\x9a\xec\x22\x0f\x84\xa9\x2a\x4b\x25\x21\x97\xae\xca\x4f\x40\x98\x24\xd4\x28\x90\xb2\xa2\x15\xbf\xb9\x63\x63\xa1\x59\x9b\xe5\x66\x91\x57\x96\x28\x8d\x01\x5e\x69\xe5\x2c\x9e\x00\xda\x82\x7c\x08\x46\xa5\xcc\xfa\xbe\x19\x0a\x2e\xdd\x67\x28\x95\x93\x16\x30\x69\x0e\xb8\x0c\x97\xb0\x28\x55\x06\xcc\xcd\x4d\x58\xb7\xa2\x56\x6c\xc2\x4c\x01\xda\xac\x65\xda\x7c\x7a\xf6\x0c\xe6\x44\x0b\x62\xc1\x93\x4d\x77\xa8\xff\xa5\x7f\xb8\xe4\x36\xb2\x4c\xe7\x68\x23\x0a\x8d\x89\x21\x94\xac\x44\x08\x5a\xab\x6d\x59\x11\x43\x34\xa1\x41\xeb\xaa\xa8\x09\x58\x00\x61\x86\x02\x2d\x6e\xd5\xe8\x12\xc2\xf9\x93\x7a\x4a\x27\x2c\x0f\x9d\x41\xbd\xaf\xea\xbb\x47\x87\xd1\xa6\x0f\x0f\x7f\xf7\xcd\xcd\x4f\x68\x12\x2a\x65\x22\x9c\x9b\x7f\xa7\xe7\x29\x67\x50\xe2\xd8\x87\x27\xc9\xd9\x7f\xe1\x38\xb9\x37\xb5\xe2\x4f\x49\xf0\xbc\xeb\xc1\x79\xc2\xcd\x61\x93\xb5\x75\x66\xf7\x1a\xe6\x44\x35\x6d\x08\x00\x0a\x56\x55\xd8\xc2\xf6\x0a\x37\xf4\xc8\x23\x68\xc3\xcb\x37\x15\xcc\x12\xe5\x41\x8d\xd0\xcb\x33\xdf\x6f\x01\x7c\x23\x25\xf6\x19\x18\xb7\x45\x85\xb1\x4b\x9c\xb4\x2e\xee\x1a\xb4\xa1\xab\x42\x5b\x60\xa8\xb1\x52\x86\x5b\xa5\xd7\x84\xca\x32\xdb\xc8\xdc\xc2\x8a\xef\x5c\x2a\x35\xb1\xcf\xa1\x98\xcb\x16\x50\x6d\xab\x28\x5c\xd4\xec\x29\xee\x6e\x91\x2f\xdc\x41\x3e\x42\xf1\xfa\xcf\xe7\x06\x6e\xde\xdf\xc0\x02\xd7\x7e\x81\x58\x9a\xa7\x4e\x5c\xe6\xa8\x2b\xcd\xa5\xdd\xfb\xbe\x67\x5d\xd8\xd2\x49\x0f\xd0\xfc\x81\x63\x1b\xb8\xda\x34\xc9\x17\x3f\x44\xc7\xa7\x84\xdc\x6a\x3e\xe7\x29\xf7\x94\xb8\x61\x14\xf5\x64\xb2\x33\xa8\xa5\x4e\x6b\x94\x56\xac\x7b\x0d\x7f\xa8\xb8\xac\x99\x00\xb3\xd1\x0e\xb6\x3d\xe1\x13\xcb\xcc\xc2\xc4\xbe\x8c\x1f\x79\xa3\x6e\x51\xe3\xab\xb7\x83\xc9\x96\x25\x78\xbb\xa2\x93\x3f\x52\x0c\x8f\xff\x68\x08\x81\xb1\x1a\x6d\x5a\x04\x3e\x04\x0d\x47\xdd\xb4\x3c\x94\xcb\x9e\x6f\x9b\x0f\x7a\x66\xb4\xe9\xc9\xbe\xb7\x5a\x05\x0c\x88\x86\x7d\x41\xad\x60\xc9\x84\xa3\x54\x31\x5c\x78\x1e\xda\xf0\xe2\xba\x1d\xc3\x5c\xab\xd2\xe3\xe7\x02\xd7\xd4\xc8\x82\x8f\xf5\xc2\x45\xfb\x11\x94\xb3\x95\xa3\x91\x40\x39\x91\x79\xed\x09\x25\xa2\xa6\xc4\x3b\x34\x36\x23\xe2\xd4\x74\x73\x6a\xcf\xba\xe4\x92\x89\xa3\x9a\xfc\xf4\xdf\xcf\xee\xde\x0e\x3e\xdd\x5d\x8f\x47\xb3\xbb\x8f\xfd\xc9\xe8\x6e\x3c\xba\xbb\xee\x8f\x6e\x06\x93\xf1\x87\xe9\xdd\x87\xa9\xa7\x45\x73\x26\x0c\x06\x35\xbe\x13\x4a\x87\x73\x33\xbd\x85\x60\x9b\xd2\x2b\x29\x14\xcb\x76\xd3\xba\x4e\xe7\x83\xc3\xa8\x86\x1a\x65\x5a\xd0\xfe\x09\x30\x2d\x14\x04\x07\xc3\xeb\xe0\x28\xce\xab\x3c\x80\x7f\x6c\xae\x42\xb9\x14\x6e\x4b\xb8\xfd\xbc\x93\x72\x70\x3c\x78\xfd\xe6\xea\xfa\xfc\x7c\xbb\xab\xa6\x3f\x0d\x47\x0b\x48\x46\x48\x07\xb7\xf9\xb8\xc1\x6c\x80\x20\xc3\x04\x7e\x25\xe2\x7a\xd9\x1c\xf8\x0d\xfe\xfa\x35\xe0\xe0\x50\x98\xe4\xae\x6d\x4b\x61\x6a\x8e\xc0\xf8\x26\x12\x6c\xcd\xdc\xef\x8c\xc1\xa6\xd2\x2f\x0f\xbe\xee\xe7\xdd\x7d\xb0\x0b\x46\x57\xa3\x21\x24\x5c\x32\x4d\x64\xc0\x2a\x88\x55\x65\xe3\x54\xf2\x38\xe1\xf2\x69\xbe\x9e\xa9\x14\x56\xc5\x1a\x62\x58\xd1\xa8\x58\xa0\xae\x69\xe2\xd5\x68\xb8\x4b\x80\x5f\x45\xc7\xc1\xe6\xfb\xac\x3f\x79\xdd\xbf\xbd\xbd\x0c\x52\xc9\xc3\x4a\xb8\x9c\x4b\xd3\xd2\xde\x70\x79\xf0\x75\xe7\xec\x7d\x64\xf3\x2f\xdb\x93\x9e\xf5\x7e\x98\xdc\x5e\x6e\xd2\xc1\x58\xa5\x59\x8e\x51\xae\x54\x2e\x90\x55\xdc\x3c\x18\x14\x5b\x1f\xc6\x12\xed\x4a\xe9\x45\xab\x30\xde\x4a\xf5\x02\x6b\xb5\xad\x82\xfb\xfa\xcf\xc6\xd2\xfb\xdd\x74\xa4\x6c\x0c\x43\x8d\x56\xaf\xe1\x0c\xc2\xb0\xa9\x88\xd8\x96\x15\xb9\x8a\x0c\x86\x46\x1a\x09\xda\x09\x8a\x29\xd8\xc9\xd9\x2b\xe3\xca\xfd\xcd\x9b\xf5\x72\x91\x71\x0d\x61\xb5\xe7\xf6\xed\xb2\x65\x1a\xc2\xab\xfd\xc5\xf0\xf3\x97\xf9\x9e\x34\x8a\x66\x3f\xcb\x68\x50\x6f\x78\x8a\x93\xf5\xf4\xe2\x53\xe8\x77\xe5\xb4\x64\x22\xb5\xe2\xd1\x40\x03\xd6\xae\x1b\x94\x23\x58\x16\x2a\x27\xb2\xe8\x11\xa1\x15\x15\xd7\xef\x1b\x0d\xb9\x8b\x3a\x57\xe3\xf7\x9f\x76\x44\x86\x56\x85\xd6\xae\x5b\x32\xf1\x64\xdf\xf7\x8e\xac\x7f\x93\x11\x28\xfd\x0b\xd0\x23\x19\x74\x0d\x8b\xd4\xef\x1a\xd5\xfe\x21\x82\x7b\x6c\xe1\xb2\xe5\xbb\x87\xdc\xc2\x8a\x66\xbc\xb4\xc0\x74\xb1\x79\x80\xd9\x5e\x09\xe5\xf2\xe8\xbf\x36\x68\xd3\x88\xb1\x15\xbd\xe9\x62\xad\x85\xf8\x99\x5b\x43\xcd\x77\x3a\xbc\x99\xcc\xde\x0d\x47\xdf\x9f\xd6\xf0\x3c\x1d\xde\xcc\x06\x93\x77\x70\x58\xb7\x78\x8d\x21\x7e\xc6\xd4\x51\x7f\xe1\x76\xd7\xbc\xc4\xe5\x5f\xb8\x10\x6c\x97\x1f\x9b\x42\xad\xee\x12\x97\x47\x69\xce\xff\x8f\x67\x97\x2f\x68\xe0\x3e\xfb\xa1\x33\x9d\x8d\xdf\x4f\x87\x37\xa3\xfe\xed\x8e\x3e\xf2\xda\x4a\xb3\x6a\x63\x93\x7f\xb3\x21\x2a\xef\xdf\xa4\x18\xf9\xdb\xea\x75\xa5\x38\x4d\x56\x06\x11\xaa\x45\x5e\x0f\x79\xde\x79\xc5\xce\xf0\xec\x1f\x97\x6a\x4e\xd1\xbc\x1b\xf9\x95\xdf\x69\xba\x14\x68\x0d\x38\x43\x7d\x06\x5c\x55\x73\x12\xa2\xe9\xb9\x81\x04\xe7\x34\xbe\x93\x9f\xb8\x74\x7e\x7c\xf7\x1d\xb3\xb1\xa8\x7e\x91\x12\x08\x95\x46\x9f\x26\xbe\x4b\x31\xbb\xb1\x98\x1b\x78\x3f\xbc\x7e\x41\x99\xd7\x18\xb4\x42\x10\xb8\x44\xaa\x72\x6f\xc2\xd6\xf0\xe6\x4d\xac\x4e\xc3\x5f\x21\xd8\x5e\x2e\xde\xfe\x0c\x7a\x10\xc4\xce\xe8\x9a\x44\x52\xd1\xc4\x01\xfc\xd6\xe9\xc2\x47\xf4\x6c\x6b\x9b\x61\x8a\x5a\x19\x29\x6f\x07\x30\xca\xa5\x25\xd3\x5c\xf9\xab\xb6\xc3\x58\xcb\x2b\x08\x62\x88\x2a\xf7\x00\x6d\x1a\x1d\x75\x06\xa3\xd9\xe4\xd3\xfb\xf1\x70\x34\x23\x5b\x1e\xa8\x7c\x60\x8f\xa1\x6f\xc4\x22\xe9\xaf\x30\x14\x2a\x0f\x6b\x86\x78\x99\x2a\x69\x14\x41\xf9\x6f\xdf\x78\x20\x61\x4f\x16\x37\x99\x4b\x71\x96\x2a\x43\x48\x94\xb2\xae\xa2\x0a\xe6\xe9\x7f\x98\x5e\xe7\xc7\x3f\xbe\x38\x3d\xf9\x06\xd4\x13\xc9\xf0\x19\xd5\x6a\x7f\xd7\xbf\x22\x7b\xfc\xdb\x28\x33\x86\xe7\x92\xf8\xc7\x8e\xca\x9d\xa7\xbb\x7d\x1c\xc8\x62\x6e\x8c\x43\x13\x9f\x9e\xfe\xf0\xb2\xeb\x7f\xd3\xe4\x85\xd2\x86\x27\xe7\xe7\xe7\xe7\x27\xa7\x67\x67\x7f\x51\xce\xe9\xe9\x8f\x27\x67\xe7\x2f\xcf\x4f\x3b\xff\x0c\x00\x00\xff\xff\x47\xe1\xb7\x3e\x8f\x17\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypointMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\x61\x73\xdb\xb8\x11\xfd\x2c\xfc\x8a\x3d\x76\x6e\x2a\xe5\x68\xd2\x92\xcf\x8e\x4f\x4d\x3e\xa8\xb6\x92\x68\xe2\xca\x19\x4b\xa9\x9b\x49\x3d\x09\x08\x2e\x49\x8c\x41\x80\x05\x40\xc9\x6c\x27\xff\xbd\xb3\x20\xed\xc8\xc9\x7d\xb0\x2c\x90\xc0\xdb\xb7\xef\x3d\xac\xd2\x17\xec\xc2\x34\x9d\x95\x65\xe5\x61\x76\x3c\x3d\x87\x6d\x85\xf0\xbe\xcd\xd0\x6a\xf4\xe8\x60\xd1\xfa\xca\x58\x97\x30\x76\x25\x05\x6a\x87\x39\xb4\x3a\x47\x0b\xbe\x42\x58\x34\x5c\x54\x08\xc3\x9b\x18\xfe\x89\xd6\x49\xa3\x61\x96\x1c\xc3\x98\x36\x44\xc3\xab\x68\xf2\x37\xd6\x99\x16\x6a\xde\x81\x36\x1e\x5a\x87\xe0\x2b\xe9\xa0\x90\x0a\x01\x1f\x04\x36\x1e\xa4\x06\x61\xea\x46\x49\xae\x05\xc2\x5e\xfa\x2a\x14\x19\x20\x12\xf6\x69\x00\x30\x99\xe7\x52\x03\x07\x61\x9a\x0e\x4c\x71\xb8\x0b\xb8\x67\x0c\x00\xa0\xf2\xbe\x99\xa7\xe9\x7e\xbf\x4f\x78\x60\x99\x18\x5b\xa6\xaa\xdf\xe5\xd2\xab\xd5\xc5\x72\xbd\x59\x1e\xcd\x92\x63\xc6\x3e\x6a\x85\xce\x81\xc5\xff\xb4\xd2\x62\x0e\x59\x07\xbc\x69\x94\x14\x3c\x53\x08\x8a\xef\xc1\x58\xe0\xa5\x45\xcc\xc1\x1b\xe2\xb9\xb7\xd2\x4b\x5d\xc6\xe0\x4c\xe1\xf7\xdc\x22\xcb\xa5\xf3\x56\x66\xad\x7f\x26\xd0\x23\x2b\xe9\xe0\x70\x83\xd1\xc0\x35\x44\x8b\x0d\xac\x36\x11\xfc\x7d\xb1\x59\x6d\x62\x76\xbb\xda\xbe\xbb\xfe\xb8\x85\xdb\xc5\xcd\xcd\x62\xbd\x5d\x2d\x37\x70\x7d\x03\x17\xd7\xeb\xcb\xd5\x76\x75\xbd\xde\xc0\xf5\x1b\x58\xac\x3f\xc1\xfb\xd5\xfa\x32\x06\x94\xbe\x42\x0b\xf8\xd0\x58\xe2\x6e\x2c\x48\x92\x0e\xf3\x84\x6d\x10\x9f\x15\x2f\x4c\x4f\xc6\x35\x28\x64\x21\x05\x28\xae\xcb\x96\x97\x08\xa5\xd9\xa1\xd5\x52\x97\xd0\xa0\xad\xa5\x23\xf3\x1c\x70\x9d\x33\x25\x6b\xe9\xb9\x0f\xeb\x9f\xda\x49\xd8\x8b\x94\xb1\xf4\x05\xdb\x92\x85\x54\x17\x6b\xd4\xde\x81\x69\x89\x06\x21\xa3\xf6\xb6\x6b\x8c\xd4\x3e\x81\x95\x9f\xb3\x23\xd8\x73\xe9\x5d\xe0\xb2\x59\xbd\xfd\xb8\xb9\x99\xb2\x23\xc2\xd4\x80\x0f\x28\x1c\x8c\xb9\x2d\x77\x9f\xa7\x77\x31\xf4\x5f\xe6\x77\x31\xa0\xde\x7d\x9e\xdf\x4d\x58\x5f\x87\x2b\x65\xf6\x0e\x5a\x47\x1e\x34\x68\x0b\x63\x6b\x30\x41\x05\x2e\x7a\xa6\x52\x07\x9a\x91\x36\x39\x46\x20\x8c\xa6\xa0\xa0\x85\x9d\xe4\xf0\x35\x37\xe2\x3e\x28\x86\xe2\x2b\xfb\x92\x61\x61\x2c\x7e\x81\x3d\x42\xc5\x77\x48\x10\x2d\x57\xaa\x83\x28\x33\xc6\x63\x1e\x05\x24\xa9\xa5\x27\x3d\x00\x77\x68\x3b\x5f\x91\x54\xa8\x28\x66\xca\xe8\xb2\xcf\xa8\xf4\x09\x63\xb7\x08\x82\xeb\xbe\x21\x87\x3a\x7f\x6c\x92\xb8\x86\xa0\x37\xd6\x08\x32\x8a\xd6\x56\x96\x25\x5a\x70\x9e\x5b\x4a\x51\xcf\xb9\x27\x10\xb1\xef\xca\xc1\x9e\xd0\xf6\x08\xdc\x22\xe4\x46\x23\x34\x96\x58\xd7\x74\x86\xeb\x8e\x30\x77\x92\x3c\xa3\x07\xe6\xb0\xf7\x84\xb1\xf5\xf5\x76\x39\xef\x6b\x1f\x9a\x84\x39\x70\x07\x1c\x9c\xd4\xa5\xa2\x04\x4c\x93\x7f\x85\x5b\x18\x43\xeb\x7a\x1c\xd5\xf5\x71\xf1\xb9\x92\x59\xd2\x8b\x5f\xf3\x7b\x74\x20\x3d\x20\x77\x92\xd2\x60\x20\x6b\xa5\xca\xa1\x31\xd6\xf3\x4c\x75\x71\x90\xa9\xb7\x89\x38\x6b\xba\x2c\xe4\xf6\xbe\xe2\x9e\x0e\xe6\x06\xdd\x10\x9c\x14\x96\xdf\x9b\x3c\x88\x0f\x07\x57\xd3\xf1\xc1\xa9\x1f\x93\x04\x9e\xa0\x7e\xce\x51\x9a\x42\xef\x66\xf0\x36\xf4\xe0\x92\x85\x2d\x1d\xa5\x88\x35\x5c\xdc\x13\x4e\xcd\xa5\x66\x4c\xd6\x44\x18\xc6\x6c\x14\x19\x17\x85\xcf\xd4\xc9\x52\x93\xf2\xa3\xc8\x75\x4e\x70\xa5\x22\xc6\x46\x91\x32\x65\xc4\x26\x81\x6d\x87\xae\x17\xd2\x55\xa6\x55\x39\x64\xfd\xfd\x12\x50\x73\x61\x4d\x0c\x59\xeb\x49\x7e\x25\x75\xfb\x40\x19\x1c\xf8\x77\xa6\xfd\xab\x25\x89\x83\xc7\x06\x4a\xf4\x3d\x0c\xd7\x5d\x65\xf6\x84\x3c\x4c\xa9\x9a\xeb\x97\xc3\x7c\xd2\xed\x03\x2d\x8f\x1a\x5e\xa2\x0b\x2f\x06\x7e\xc9\xcb\xa4\xf2\xb5\x7a\x3c\xe5\xe6\x69\x5a\x4a\x5f\xb5\x59\x22\x4c\x9d\xd6\x26\xeb\xfa\x8f\x4c\x99\x2c\x3d\x3d\x9b\xe5\xc5\xb9\x98\xe5\x67\xc5\xef\xe7\x67\xc7\x53\x71\x9e\x4f\xf3\xe2\xe5\xec\xf4\xec\xe4\xfc\x8f\xd3\xb3\x3f\xf2\xd9\xa9\x38\xce\x8a\x69\xda\xdc\x97\x03\xfe\xf0\xef\x4b\xa0\x90\x94\xe6\x2f\x57\xd3\x63\x26\x8c\x76\x1e\x9c\x2c\xad\xaf\xa5\x86\xd7\x70\xf2\x3b\x63\x45\xab\x45\x90\x73\x3c\x81\xff\xb1\x51\x9a\x52\x2e\x77\xa8\x3d\xfc\xd7\xd4\x99\xc4\xc7\xac\xa3\xa3\x94\xd1\x28\xa7\x69\xae\x14\xe9\xf6\x61\x75\x39\x0d\xe6\x71\xd8\x57\x52\x61\x38\xfe\xd8\x4f\x5f\x3a\x97\x98\x68\xf4\xd4\x7b\x3a\x4b\xc9\xee\x46\xe6\x6c\x34\xa8\xb0\x2a\xb5\xb1\x38\x1e\x9c\x4a\x36\xab\xb7\x17\xef\xae\x2e\x27\x2c\x00\x95\x96\x67\xfd\x2d\xb0\xc8\x55\x74\x98\x1d\x61\xea\x9a\x12\x1a\xfe\x6c\xe9\xa0\xb0\xa6\x0e\x03\x8b\x56\x6c\x24\x0b\x50\xa8\xc7\x43\x72\x26\xf0\x0a\x66\xd4\xdc\x48\x99\x32\x79\xc3\x3d\x57\xe3\x68\x6d\x3c\xa0\x36\x6d\x59\xd1\x99\xb6\xcf\xac\x37\x07\x55\x7e\x89\x26\x6c\xf4\x8d\x8d\x44\x9d\xf7\x73\x0c\xe6\xaf\xbf\x87\xf1\x2e\x7e\x16\xcc\xc0\x98\xda\x3b\x0c\x33\x8c\x0d\x8d\x28\x19\x02\xb5\x59\xbd\xbd\xd9\xfe\x63\xb5\xfe\xed\x84\xca\xd4\xdc\x8b\x0a\x5c\xe7\x3c\xd6\xf9\x84\x8d\x04\x81\xd3\xbd\x1c\x8b\x8a\x6b\x82\xde\x04\x89\x62\x98\x4e\x9e\xe4\x5a\x1b\x2f\x8b\x6e\x2c\x62\x38\x50\x8c\x0a\x1d\x3c\x08\x3b\xc7\x8f\x26\xff\x76\x32\x99\xb0\xd0\xf6\x07\x2b\xb5\x57\x7a\x1c\xdd\xf2\xf0\x6b\xf7\x8c\x67\x92\x24\x51\x5f\x86\x68\xbc\x3a\x12\x41\x42\x5a\xfe\xf2\xfa\xc7\x5a\x4f\x42\x06\xc4\x62\x1c\x2d\x1f\x7a\x40\x5e\x78\x9a\x83\x81\xc0\x1c\x7e\xdd\xd1\xd9\xe1\x4c\x14\xd3\xf3\x09\x1b\x8d\x2c\xfa\xd6\x6a\xd2\x35\x28\xf6\xf4\x9b\xd1\x8f\xd6\x3f\xf1\x3a\x86\x7b\xc4\xe6\x71\xb0\xa2\xde\xb1\x67\xc5\x6f\x50\xa0\xdc\xe1\xd3\x88\x8e\x9f\xc6\x86\x37\x81\xc4\xaf\xbb\x7f\xeb\x28\x86\x27\x13\xa9\xcd\xa1\xa1\xe5\x03\x8a\xf1\xd3\x8b\xe0\xe7\x52\xef\xa4\x35\x7a\x3c\x99\xb0\x6f\xec\xff\x01\x00\x00\xff\xff\x39\x8f\xbf\x84\x4f\x09\x00\x00")

func imagesBaseEntrypointMainGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypointMainGo,
		"images/base/entrypoint/main.go",
	)
}

func imagesBaseEntrypointMainGo() (*asset, error) {
	bytes, err := imagesBaseEntrypointMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint/main.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseJournalctlToTtyService = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xc1\x6e\xe3\x36\x10\xbd\xf3\x2b\x06\xd1\xa5\x05\x2c\x29\xcd\xa9\x48\xe1\x83\x37\x49\x51\x77\x17\x36\x60\x39\x0d\x16\x41\x0e\x23\x6a\x2c\x4d\x97\x22\x55\xce\x68\x15\xfd\x7d\x41\xd9\x69\x13\x14\xd5\x49\x9c\x79\xf3\xf8\xe6\x3d\x66\x70\x17\x86\x39\x72\xdb\x29\xdc\x5c\xff\xf4\x33\x1c\x3b\x82\xcf\x63\x4d\xd1\x93\x92\xc0\x66\xd4\x2e\x44\x29\x4c\x66\x32\xf8\xc2\x96\xbc\x50\x03\xa3\x6f\x28\x82\x76\x04\x9b\x01\x6d\x47\x6f\x9d\x15\xfc\x41\x51\x38\x78\xb8\x29\xae\xe1\x87\x04\xb8\xba\xb4\xae\x7e\xfc\xc5\x64\x30\x87\x11\x7a\x9c\xc1\x07\x85\x51\x08\xb4\x63\x81\x13\x3b\x02\x7a\xb5\x34\x28\xb0\x07\x1b\xfa\xc1\x31\x7a\x4b\x30\xb1\x76\xcb\x35\x17\x92\xc2\x64\xf0\xf5\x42\x11\x6a\x45\xf6\x80\x60\xc3\x30\x43\x38\xbd\xc7\x01\xea\x22\x38\x7d\x9d\xea\x70\x5b\x96\xd3\x34\x15\xb8\x88\x2d\x42\x6c\x4b\x77\x06\x4a\xf9\x65\x7b\xf7\xb0\xab\x1e\xf2\x9b\xe2\x7a\x19\x79\xf4\x8e\x44\x20\xd2\x5f\x23\x47\x6a\xa0\x9e\x01\x87\xc1\xb1\xc5\xda\x11\x38\x9c\x20\x44\xc0\x36\x12\x35\xa0\x21\xe9\x9d\x22\x2b\xfb\x76\x05\x12\x4e\x3a\x61\x24\x93\x41\xc3\xa2\x91\xeb\x51\x3f\x98\xf5\xa6\x8e\xe5\x03\x20\x78\x40\x0f\x57\x9b\x0a\xb6\xd5\x15\x7c\xda\x54\xdb\x6a\x65\x32\x78\xda\x1e\x7f\xdb\x3f\x1e\xe1\x69\x73\x38\x6c\x76\xc7\xed\x43\x05\xfb\x03\xdc\xed\x77\xf7\xdb\xe3\x76\xbf\xab\x60\xff\x2b\x6c\x76\x5f\xe1\xf3\x76\x77\xbf\x02\x62\xed\x28\x02\xbd\x0e\x31\xe9\x0f\x11\x38\xd9\x48\x4d\xf2\xac\x22\xfa\x20\xe0\x14\xce\x82\x64\x20\xcb\x27\xb6\xe0\xd0\xb7\x23\xb6\x04\x6d\xf8\x4e\xd1\xb3\x6f\x61\xa0\xd8\xb3\xa4\x30\x05\xd0\x37\x26\x03\xc7\x3d\x2b\xea\x52\xf9\xcf\x52\x85\x31\x19\xb0\x97\xe1\xcd\xb5\x96\xb5\x1b\xeb\xc2\x86\xbe\x6c\xb8\x5f\x38\x6e\x4d\xb6\xc4\x21\xb7\x65\xf9\xae\x1d\x06\xf2\xa2\x68\xbf\x95\xc8\x51\x3a\x1e\xf2\x1e\x51\xca\xda\x85\xba\xec\x51\x94\x62\xc9\x3d\xb6\x24\x65\xaa\xe7\x11\xed\xb7\xdc\x06\xaf\x31\x38\x47\xb1\x14\x1b\x79\x50\x29\xff\x0c\x63\xf4\xe8\xac\xba\x5c\x43\xae\x3a\x17\x42\xf1\x3b\xdb\x94\xc7\x31\xbd\xb3\xcb\x11\xe2\xe8\x05\xfe\x45\xa7\x0c\x4f\xc1\xb9\x30\x41\x1f\x1a\x5a\xc1\x10\xd8\xa7\x5c\x50\x97\x05\x55\xe7\x14\xc7\xd4\xb1\xed\xc0\x91\x0a\x8c\x89\xeb\xec\xe8\x85\x06\x5c\x68\x25\x11\xa5\x5a\xd2\x86\xec\x29\x82\x68\x13\x46\x2d\xcc\xf3\xa3\x67\x7d\x31\xf7\x74\xd6\xca\xc1\xaf\x7f\x3f\x0f\x36\x69\x12\x44\x23\x61\x4f\xd1\x1c\xce\xcf\x4e\xd6\x32\x8b\x52\xdf\xe4\x17\xfe\xe6\x9f\x5d\x36\x27\xa5\xf8\xff\x6d\xf3\x5c\x9d\xff\x5e\xcc\x81\x44\x31\xea\x1a\xdd\x84\xb3\xbc\x1d\x2b\xb2\xeb\x6b\xf3\xf0\x4a\xb6\x5a\xba\x65\xcd\xfe\x9d\x75\x90\xe7\x17\x2f\xf2\xdc\x87\x5c\x91\x9d\xa9\x14\x7d\x83\xb1\xd9\x8f\x3a\x8c\xba\x56\x9d\x8d\x79\xde\xa6\xc8\x9c\x7b\x31\x4f\x98\xcc\xfa\x34\xaf\xfb\xd1\x29\xe7\xa3\x50\x2c\x14\x63\x4b\x6a\xfe\x0e\x00\x00\xff\xff\xbb\xd7\xb0\x75\x5d\x04\x00\x00")

func imagesBaseJournalctlToTtyServiceBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseJournalctlToTtyService,
		"images/base/journalctl-to-tty.service",
	)
}

func imagesBaseJournalctlToTtyService() (*asset, error) {
	bytes, err := imagesBaseJournalctlToTtyServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/journalctl-to-tty.service", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":                imagesBaseDockerfile,
	"images/base/entrypoint/main.go":        imagesBaseEntrypointMainGo,
	"images/base/journalctl-to-tty.service": imagesBaseJournalctlToTtyService,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile": {imagesBaseDockerfile, map[string]*bintree{}},
			"entrypoint": {nil, map[string]*bintree{
				"main.go": {imagesBaseEntrypointMainGo, map[string]*bintree{}},
			}},
			"journalctl-to-tty.service": {imagesBaseJournalctlToTtyService, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
