// Code generated by go-bindata.
// sources:
// ../../../images/node/Dockerfile
// ../../../images/node/entrypoint/main.go
// ../../../images/node/journalctl-to-tty.service
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesNodeDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xfb\x6f\xdb\x46\xf2\xff\x5d\x7f\xc5\x80\x32\x12\xbb\x15\x49\x3f\x92\xd4\x75\x61\x7c\xbf\x8a\xad\xb8\x42\x1c\x29\x90\x94\x06\x41\xaf\x30\x96\xe4\x88\xdc\x6a\xb9\xcb\xdb\x87\x14\x25\xe7\xfe\xed\x87\x59\x92\x7a\xd8\xce\x5d\x0f\xbd\x2b\x0a\xc4\xe2\xee\xce\xcc\xce\xe3\x33\x9f\xd9\x2e\x5c\xa9\x6a\xad\x79\x5e\x58\x38\x3d\x3e\x39\x87\x59\x81\xf0\xd6\x25\xa8\x25\x5a\x34\xd0\x77\xb6\x50\xda\x44\x9d\x6e\xa7\x0b\xb7\x3c\x45\x69\x30\x03\x27\x33\xd4\x60\x0b\x84\x7e\xc5\xd2\x02\xdb\x95\x1e\xfc\x82\xda\x70\x25\xe1\x34\x3a\x86\x43\xda\x10\x34\x4b\xc1\xd1\x4f\x9d\x2e\xac\x95\x83\x92\xad\x41\x2a\x0b\xce\x20\xd8\x82\x1b\x98\x73\x81\x80\x9f\x53\xac\x2c\x70\x09\xa9\x2a\x2b\xc1\x99\x4c\x11\x56\xdc\x16\x5e\x4d\x23\x24\xea\x74\xe1\x53\x23\x42\x25\x96\x71\x09\x0c\x52\x55\xad\x41\xcd\x77\xf7\x01\xb3\xde\x60\xfa\xaf\xb0\xb6\xba\x88\xe3\xd5\x6a\x15\x31\x6f\x6c\xa4\x74\x1e\x8b\x7a\xa3\x89\x6f\x87\x57\x83\xd1\x74\x10\x9e\x46\xc7\xfe\xc8\x07\x29\xd0\x18\xd0\xf8\x77\xc7\x35\x66\x90\xac\x81\x55\x95\xe0\x29\x4b\x04\x82\x60\x2b\x50\x1a\x58\xae\x11\x33\xb0\x8a\xec\x5d\x69\x6e\xb9\xcc\x7b\x60\xd4\xdc\xae\x98\xc6\x4e\x17\x32\x6e\xac\xe6\x89\xb3\x7b\xce\x6a\xad\xe3\x66\x6f\x83\x92\xc0\x24\x04\xfd\x29\x0c\xa7\x01\xbc\xee\x4f\x87\xd3\x5e\xa7\x0b\x1f\x87\xb3\x9f\xc7\x1f\x66\xf0\xb1\x3f\x99\xf4\x47\xb3\xe1\x60\x0a\xe3\x09\x5c\x8d\x47\xd7\xc3\xd9\x70\x3c\x9a\xc2\xf8\x0d\xf4\x47\x9f\xe0\xed\x70\x74\xdd\x03\xe4\xb6\x40\x0d\xf8\xb9\xd2\x64\xbf\xd2\xc0\xc9\x8d\x98\x91\xcf\xa6\x88\x7b\x06\xcc\x55\x6d\x90\xa9\x30\xe5\x73\x9e\x82\x60\x32\x77\x2c\x47\xc8\xd5\x12\xb5\xe4\x32\x87\x0a\x75\xc9\x0d\x05\xd3\x00\x93\x59\xa7\x0b\x82\x97\xdc\x32\xeb\xbf\x3c\xba\x54\xd4\xe9\x74\x61\xc1\x65\x06\xa9\x70\xc6\xa2\x86\x84\xd1\x55\x4b\x96\x63\x0f\x12\xc7\x85\xa5\x8b\x6e\x53\xeb\xb9\x81\x0c\x13\xce\x64\x48\x1b\x3b\x5d\x58\x15\x3c\x2d\xc8\x37\x09\x33\x3c\x65\x42\xac\x81\xc1\x12\xf5\x1a\xc8\x55\x55\x85\x19\x64\x6a\x25\x9b\x53\xb5\x64\x38\xfc\xe3\xc5\xd9\xbb\xd7\x47\x9d\x2e\xd8\x82\x59\x30\x05\xaf\x4c\x9d\x36\x0c\x4c\xc9\x84\x00\x67\xb9\xe0\x76\x0d\xcf\x53\x81\x4c\x86\x5c\x1a\xcb\x84\x78\xbe\x55\x47\xb2\x32\x64\x02\x32\xad\x2a\x0a\xe8\x5c\xe9\x4e\x17\x58\x65\xc3\x1c\x2d\xb8\x2a\x63\x16\xe1\xd9\xb3\xcd\x97\x46\x04\x1c\xfc\x3f\x74\xba\x60\x10\x7d\x8e\x99\x8b\x38\xce\xb9\x2d\x5c\x12\xa5\xaa\x8c\x17\x9b\x8b\xee\xfe\x69\x35\x62\x5c\x32\xf2\x4f\x4c\x3e\xc9\xe2\x3d\x1f\x74\xba\x30\x53\x75\x51\xac\x10\x58\x96\x81\x59\x1b\x8b\x65\xd6\x83\xab\xd1\xb0\x47\x71\x00\xe5\xe3\x6c\x95\x12\x06\x24\x62\x56\xe7\xa1\x76\xb5\x6f\x59\x56\x7a\x31\x6f\x94\x6e\xcf\xc2\xf7\x90\xa9\x74\x81\x1a\x52\x25\xe7\x3c\x77\xda\xc7\x90\xea\x2f\x83\x04\x85\x5a\xf5\xfc\x25\x28\x98\x73\x25\x84\x5a\x51\xf8\x35\xce\x51\xa3\x4c\xd1\x5c\x74\xba\x9b\x0b\x52\x15\xcd\x29\xf7\xd1\x2c\xac\xaa\x7c\x29\xad\xf8\x82\xc7\xd3\x26\xf7\xe3\x46\x69\x7c\xa5\x24\xd5\x27\xea\xa1\xb4\xa8\xe7\x2c\xc5\x78\x47\x4e\x86\x4b\x14\xaa\x42\x6d\x22\x8d\x59\xc1\xac\xf7\x59\x22\x54\x1e\x9f\x1e\x9f\xbc\x88\x8f\x5f\xd2\xff\xda\x49\x4a\xc5\xb0\x91\x19\x52\x5c\xb9\x0c\xeb\xdb\x84\x69\xab\xe1\xcf\x0b\x7e\x15\x1f\xff\x18\x9f\x9c\x3d\x12\xcc\x65\xc8\x42\xa9\x64\x58\x69\xbe\xe4\x02\x73\xcc\x76\xc5\x53\x58\xc6\xd7\xe3\xc3\x04\xa5\x2d\x10\x45\x86\xfa\xe8\x82\x4a\x4d\x28\x8d\x60\x5c\x55\x29\x4d\x10\xd0\xc4\x86\xe9\xb4\x40\xd3\x83\xe1\xa0\x5d\xab\xa1\x72\x72\xf5\x33\x30\x9d\x47\x4d\x78\xa4\x5a\xd5\xa1\xe6\x06\x8c\xe5\x42\x50\x26\xf6\x27\x37\x60\x14\x45\x3f\x65\x12\x34\x12\x48\x72\x3a\xaf\x95\xcb\x0b\xe5\x6a\x51\x3e\x75\xa8\x64\xb8\xf5\xdf\xe8\xbe\xdc\x78\x13\x68\xb3\xf2\x9b\x36\x17\x88\x3a\x24\x95\xd4\x5f\x06\xac\xcc\x5e\xbd\x08\xfc\x87\xd7\xfd\xe9\xe0\x6e\xf8\xae\x7f\x33\xb8\xfb\x65\x30\x99\x0e\xc7\xa3\xcb\xe0\x38\x3a\x8b\x4e\x1e\x2e\x5f\x06\x8b\x73\x13\xe5\xa9\x8e\xb8\xda\xcd\xd7\xf0\xe0\x2b\x09\xbd\xbf\x38\xf8\xfa\x58\xd6\x7d\xd0\x79\x33\x19\xbf\x83\xdd\xb5\x7b\xf2\xe4\x68\x3c\x1b\x5c\xd4\xce\x28\x9d\xb1\x90\x20\x64\x38\xe7\x12\x33\x60\xb9\x47\xf4\x39\xa1\x07\x1d\xde\x8d\xab\x4a\x4d\x54\x07\xde\x47\x14\x65\xce\x25\xc6\x9b\x2c\xad\xab\x09\x75\xdc\x35\xa9\xaa\xf0\xf1\x8d\x7d\xa5\x5a\xef\xa2\xeb\xc1\xeb\x61\x7f\x74\xf7\x66\x32\x1e\xcd\x06\xa3\xeb\x4b\xa9\x24\xa7\x24\x65\xa9\xe5\x4b\x04\x63\x55\x65\xc0\xa8\x12\xa9\xe2\x61\xc5\x3c\x1e\x9a\xde\x26\x58\xd4\xbc\x08\x20\x40\x13\x6a\x30\x9d\xbb\x12\xa5\xed\xc1\x0a\x9f\x6b\x84\x43\x96\x1c\x39\x43\x7a\xc8\x06\xab\x80\x20\x83\x81\xc5\xb2\x52\x9a\xe9\x35\x0c\x46\xbf\xd4\x37\xad\xe3\xf2\xaf\xad\xe9\x74\xe1\x06\x2d\x64\x58\xa1\xcc\x50\xa6\x1c\x0d\x65\x23\xe5\xc0\x06\x5e\x81\x09\x8d\x2c\x5b\x43\xc1\xcc\x05\x18\x53\xf4\xc8\xf0\x1e\x18\xc9\xaa\xcc\xef\xae\xed\x4e\xb4\x5a\xa0\xac\x41\x94\x4b\xab\xa8\xb0\x43\xa8\x58\xba\x60\x39\x12\x98\xa4\x68\x0c\x59\x48\xed\xa1\x01\x39\xba\x47\xed\xf6\x87\x9b\x77\x91\xc7\xa0\x5e\xf2\x14\x0d\x1c\x36\x15\x75\xf4\xe4\x6e\x92\xdb\x40\x51\x0c\xc5\xba\x42\x4d\xd0\x08\x31\x6c\x11\xd2\x77\x7f\x25\x51\x5a\xe3\x45\x94\xdc\xa4\x5b\x39\x87\x35\x98\x73\xf4\xf8\xe8\x6b\x43\x82\x72\x1a\xe8\x4a\x04\x89\x5c\xe6\x47\xb5\x7f\xa4\xaf\x21\x82\x7c\x57\xc1\xa1\xc6\x52\x2d\xe9\x2e\x4e\xae\x98\xa4\xa6\xdb\x82\x63\x6b\xfa\xd1\xff\x0e\x9d\x26\x1f\x46\xb0\xd7\x7c\xe0\x6f\x1d\x4f\x4d\x7c\x47\xb1\x9a\x49\x43\x20\x11\x7a\xf5\x90\xb2\x30\x45\x6d\xa9\x2d\x33\xef\x10\xa7\xc5\x86\x5a\x84\x95\x26\xbb\xc8\x03\x61\xaa\xca\x52\x49\xc8\xa5\xab\xf2\x53\x10\x26\x09\x35\x0a\xa4\xac\x68\xc5\x6f\xee\xd8\x58\x68\xd6\x66\xb9\x59\xe4\x95\x25\x4a\x63\x80\x57\x5a\x39\x8b\xa7\x80\xb6\x20\x1f\x82\x51\x29\xb3\xbe\x6f\x86\x82\x4b\xf7\x19\x4a\xe5\xa4\x05\x4c\x9a\x03\x2e\xc3\x25\x2c\x4a\x95\x01\x73\x73\x13\xd6\xad\xa8\x15\x9b\x30\x53\x34\x3f\x9e\x3d\x83\x39\x11\x82\x58\xf0\x64\xd3\x17\xea\x7f\xe9\x1f\x2e\xb9\x8d\x2c\xd3\x39\xda\x88\x82\x62\x62\x08\x25\x2b\x11\x82\xd6\x5e\x5b\x56\xc4\x0d\x4d\x68\xd0\xba\x2a\x6a\x42\x15\x40\x98\xa1\x40\x8b\x5b\x35\xba\x84\x70\xfe\xa4\x9e\xd2\x09\xcb\x43\x67\x50\xef\xab\xfa\xee\xd1\x61\xb4\xe9\xc3\xc3\xdf\x7d\x73\xf3\x13\x9a\x84\x4a\x99\x08\xe7\xe6\xdf\xe9\x79\xca\x19\x94\x32\xf6\xe1\x49\x72\xf3\x5f\x38\x4e\xee\x4d\xad\xf8\x53\x12\x3c\xe3\x7a\x70\x9e\x10\x73\xd8\xe4\x6b\x9d\xd3\xbd\x86\x33\x51\x35\x1b\x2a\xfd\x82\x55\x15\xb6\x80\xbd\xc2\x0d\x31\xf2\xd8\xd9\x30\xf2\x4d\xed\xb2\x44\x79\x38\x23\xdc\xf2\x9c\xf7\x5b\xd0\xde\x48\x89\x7d\xee\xc5\x6d\x39\x61\xec\x12\x27\xad\x8b\xbb\x06\x6d\xe8\xaa\xd0\x16\x18\x6a\xac\x94\xe1\x56\xe9\x35\xe1\xb1\xcc\x36\x32\xb7\x80\xe2\x7b\x96\x4a\x4d\xec\x73\x28\xe6\xb2\x85\x52\xdb\x2a\x0a\x17\x35\x6f\x8a\xbb\x5b\xcc\x0b\x77\x30\x8f\xf0\xbb\xfe\xf9\xdc\xc0\xcd\xfb\x1b\x58\xe0\xda\x2f\x10\x3f\xf3\xa4\x89\xcb\x1c\x75\xa5\xb9\xb4\x7b\xdf\xf7\xac\x0b\x5b\x22\xe9\xa1\x99\x3f\x70\x6c\x03\x54\x9b\xf6\x78\xf2\x43\x74\x7c\x46\x98\xad\xe6\x73\x9e\x72\x4f\x86\x1b\x2e\x51\xcf\x24\x3b\x23\x5a\xea\xb4\x46\x69\xc5\xba\xd7\x30\x87\x8a\xcb\x9a\x03\x30\x1b\xed\xa0\xda\x13\x3e\xb1\xcc\x2c\x4c\xec\x0b\xf8\x91\x37\xea\xe6\x34\xbe\x7a\x3b\x98\x6c\xf9\x81\xb7\x2b\x3a\xfd\x23\xc5\xf0\xf8\x8f\x86\x0a\x18\xab\xd1\xa6\x45\xe0\x43\xd0\xb0\xd3\x4d\xb3\x43\xb9\xec\xf9\x86\xf9\xa0\x5b\x46\x9b\x6e\xec\xbb\xaa\x55\xc0\x80\x08\xd8\x17\xd4\x0a\x96\x4c\x38\x4a\x15\xc3\x85\x67\xa0\x0d\x23\xae\x1b\x31\xcc\xb5\x2a\x3d\x72\x2e\x70\x4d\x2d\x2c\xf8\x58\x2f\x5c\xb4\x1f\x41\x39\x5b\x39\x1a\x06\x94\x13\x99\xd7\x9e\x50\x22\x6a\x4a\xbc\x43\x63\x33\xa2\x4c\x4d\x1f\xa7\xc6\xac\x4b\x2e\x99\x38\xaa\x69\x4f\xff\xfd\xec\xee\xed\xe0\xd3\xdd\xf5\x78\x34\xbb\xfb\xd8\x9f\x8c\xee\xc6\xa3\xbb\xeb\xfe\xe8\x66\x30\x19\x7f\x98\xde\x7d\x98\x7a\x42\x34\x67\xc2\x60\x50\x23\x3b\xe1\x73\x38\x37\xd3\x5b\x08\xb6\x29\xbd\x92\x42\xb1\x6c\x37\xad\xeb\x74\x3e\x38\x8c\x6a\xa8\x51\xa6\x85\xeb\x9f\x00\xd3\x42\x41\x70\x30\xbc\x0e\x8e\xe2\xbc\xca\x03\xf8\xc7\xe6\x2a\x94\x4b\xe1\xb6\x84\xdb\xcf\x3b\x29\x07\xc7\x83\xd7\x6f\xae\xae\xcf\xcf\xb7\xbb\x6a\xe2\xd3\xb0\xb3\x80\x64\x84\x74\x70\x9b\x8f\x1b\xb4\x06\x08\x32\x4c\xe0\x57\xa2\xac\x97\xcd\x81\xdf\xe0\xaf\x5f\x03\x0e\x0e\x85\x49\xee\xda\x86\x14\xa6\xe6\x08\x8c\x6f\x1f\xc1\xd6\xcc\xfd\x9e\x18\x6c\x2a\xfd\xf2\xe0\xeb\x7e\xde\xdd\x07\xbb\x60\x74\x35\x1a\x42\xc2\x25\xd3\x44\x03\xac\x82\x58\x55\x36\x4e\x25\x8f\x13\x2e\x9f\x66\xea\x99\x4a\x61\x55\xac\x21\x86\x15\x0d\x89\x05\xea\x9a\x20\x5e\x8d\x86\xbb\xd4\xf7\x55\x74\x1c\x6c\xbe\xcf\xfa\x93\xd7\xfd\xdb\xdb\xcb\x20\x95\x3c\xac\x84\xcb\xb9\x34\x2d\xe1\x0d\x97\x07\x5f\x77\xce\xde\x47\x36\xff\xb2\x3d\xe9\xf9\xee\x87\xc9\xed\xe5\x26\x1d\x8c\x55\x9a\xe5\x18\xe5\x4a\xe5\x02\x59\xc5\xcd\x83\x11\xb1\xf5\x61\x2c\xd1\xae\x94\x5e\xb4\x0a\xe3\xad\x54\x2f\xb0\x56\xdb\x2a\xb8\xaf\x7f\x36\x96\xde\xef\xa6\x23\x65\x63\x18\x6a\xb4\x7a\x0d\x2f\x21\x0c\x9b\x8a\x88\x6d\x59\x91\xab\xc8\x60\x68\xa4\x91\xa0\x9d\xa0\x98\x82\x9d\xbe\x7c\x65\x5c\xb9\xbf\x79\xb3\x5e\x2e\x32\xae\x21\xac\xf6\xdc\xbe\x5d\xb6\x4c\x43\x78\xb5\xbf\x18\x7e\xfe\x32\xdf\x93\x46\xd1\xec\x67\x19\x8d\xe8\x0d\x43\x71\xb2\x9e\x5b\x7c\x0a\xfd\xae\x9c\x96\x4c\xa4\x56\x3c\x1a\x65\xc0\xda\x75\x83\x72\x04\xcb\x42\xe5\x44\x13\x3d\x22\xb4\xa2\xe2\xfa\x65\xa3\xa1\x75\x51\xe7\x6a\xfc\xfe\xd3\x8e\xc8\xd0\xaa\xd0\xda\x75\x4b\x26\x9e\xec\xfb\xde\x91\xf5\xdf\x64\x04\x4a\xff\xf6\xf3\x48\x06\x5d\xc3\x22\xf5\xbb\x46\xb5\x7f\x82\xe0\x1e\x5b\xb8\x6c\x99\xee\x21\xb7\xb0\xa2\xe9\x2e\x2d\x30\x5d\x6c\x9e\x5e\xb6\x57\x42\xb9\x3c\xfa\xaf\x8d\xd8\x34\x5c\x6c\x45\x6f\xba\x58\x6b\x21\x7e\xe6\xd6\x50\xf3\x9d\x0e\x6f\x26\xb3\x77\xc3\xd1\xf7\x67\x35\x3c\x4f\x87\x37\xb3\xc1\xe4\x1d\x1c\xd6\x2d\x5e\x63\x88\x9f\x31\x75\xd4\x5f\xb8\xdd\x35\x2f\x71\xf9\x17\x2e\x04\xdb\x65\xc6\xa6\x50\xab\xbb\xc4\xe5\x51\x9a\xf3\xff\xe3\xd9\xe5\x09\x8d\xda\x2f\x7f\xe8\x4c\x67\xe3\xf7\xd3\xe1\xcd\xa8\x7f\xbb\xa3\x8f\xbc\xb6\xd2\xac\xda\xd8\xe4\x5f\x6b\x88\xc4\xfb\xd7\x28\x46\xfe\xb6\x7a\x5d\x29\x4e\x33\x95\x41\x84\x6a\x91\xd7\xe3\x9d\x77\x5e\xb1\x33\x36\xfb\x67\xa5\x9a\x53\x34\x2f\x46\x7e\xe5\x77\x9a\x2b\x05\x5a\x03\xce\x50\x9f\x01\x57\xd5\x9c\x84\x08\x7a\x6e\x20\xc1\x39\x0d\xee\xe4\x27\x2e\x9d\x1f\xdc\x7d\xc7\x6c\x2c\xaa\xdf\xa2\x04\x42\xa5\xd1\xa7\x89\xef\x52\xcc\x6e\x2c\xe6\x06\xde\x0f\xaf\x4f\x28\xf3\x1a\x83\x56\x08\x02\x97\x48\x55\xee\x4d\xd8\x1a\xde\xbc\x86\xd5\x69\xf8\x2b\x04\xdb\xcb\xc5\xdb\x3f\x83\x1e\x04\xb1\x33\xba\x26\x91\x54\x34\x71\x00\xbf\x75\xba\xf0\x11\x3d\xdb\xda\x66\x98\xa2\x56\x46\xca\xdb\xd1\x8b\x72\x69\xc9\x34\x57\xfe\xaa\xed\x18\xd6\xf2\x0a\x82\x18\xa2\xca\x3d\x40\x9b\x46\x47\x9d\xc1\x68\x36\xf9\xf4\x7e\x3c\x1c\xcd\xc8\x96\x07\x2a\x1f\xd8\x63\xe8\x1b\xb1\x48\xfa\x15\x86\x42\xe5\x61\xcd\x10\x2f\x53\x25\x8d\x22\x28\xff\xed\x1b\x4f\x23\xec\xc9\xe2\x26\x73\x29\xce\x52\x65\x08\x89\x52\xd6\x55\x54\xc1\x3c\xfd\x0f\xd3\xeb\xfc\xf8\xc7\x93\xb3\xd3\x6f\x40\x3d\x91\x0c\x9f\x51\xad\xf6\x77\xfd\x2b\xb2\xc7\xbf\x8a\x32\x63\x78\x2e\x89\x7f\xec\xa8\xdc\x79\xb4\xdb\xc7\x81\x2c\xe6\xc6\x38\x34\xf1\xd9\xd9\x0f\x2f\xba\xfe\x6f\x9a\xb9\x50\xda\xf0\xf4\xfc\xfc\xfc\xfc\xf4\xec\xe5\xcb\xbf\x28\xe7\xec\xec\xc7\xd3\x97\xe7\x2f\xce\xcf\x3a\xff\x0c\x00\x00\xff\xff\x0c\x85\x44\x5c\x89\x17\x00\x00")

func imagesNodeDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesNodeDockerfile,
		"images/node/Dockerfile",
	)
}

func imagesNodeDockerfile() (*asset, error) {
	bytes, err := imagesNodeDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/node/Dockerfile", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesNodeEntrypointMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\x61\x73\xdb\xb8\x11\xfd\x2c\xfc\x8a\x3d\x76\x6e\x2a\xe5\x68\xd2\x92\xcf\x8e\x4f\x4d\x3e\xa8\xb6\x92\x68\xe2\xca\x19\x4b\xa9\x9b\x49\x3d\x09\x08\x2e\x49\x8c\x41\x80\x05\x40\xc9\x6c\x27\xff\xbd\xb3\x20\xed\xc8\xc9\x7d\xb0\x2c\x90\xc0\xdb\xb7\xef\x3d\xac\xd2\x17\xec\xc2\x34\x9d\x95\x65\xe5\x61\x76\x3c\x3d\x87\x6d\x85\xf0\xbe\xcd\xd0\x6a\xf4\xe8\x60\xd1\xfa\xca\x58\x97\x30\x76\x25\x05\x6a\x87\x39\xb4\x3a\x47\x0b\xbe\x42\x58\x34\x5c\x54\x08\xc3\x9b\x18\xfe\x89\xd6\x49\xa3\x61\x96\x1c\xc3\x98\x36\x44\xc3\xab\x68\xf2\x37\xd6\x99\x16\x6a\xde\x81\x36\x1e\x5a\x87\xe0\x2b\xe9\xa0\x90\x0a\x01\x1f\x04\x36\x1e\xa4\x06\x61\xea\x46\x49\xae\x05\xc2\x5e\xfa\x2a\x14\x19\x20\x12\xf6\x69\x00\x30\x99\xe7\x52\x03\x07\x61\x9a\x0e\x4c\x71\xb8\x0b\xb8\x67\x0c\x00\xa0\xf2\xbe\x99\xa7\xe9\x7e\xbf\x4f\x78\x60\x99\x18\x5b\xa6\xaa\xdf\xe5\xd2\xab\xd5\xc5\x72\xbd\x59\x1e\xcd\x92\x63\xc6\x3e\x6a\x85\xce\x81\xc5\xff\xb4\xd2\x62\x0e\x59\x07\xbc\x69\x94\x14\x3c\x53\x08\x8a\xef\xc1\x58\xe0\xa5\x45\xcc\xc1\x1b\xe2\xb9\xb7\xd2\x4b\x5d\xc6\xe0\x4c\xe1\xf7\xdc\x22\xcb\xa5\xf3\x56\x66\xad\x7f\x26\xd0\x23\x2b\xe9\xe0\x70\x83\xd1\xc0\x35\x44\x8b\x0d\xac\x36\x11\xfc\x7d\xb1\x59\x6d\x62\x76\xbb\xda\xbe\xbb\xfe\xb8\x85\xdb\xc5\xcd\xcd\x62\xbd\x5d\x2d\x37\x70\x7d\x03\x17\xd7\xeb\xcb\xd5\x76\x75\xbd\xde\xc0\xf5\x1b\x58\xac\x3f\xc1\xfb\xd5\xfa\x32\x06\x94\xbe\x42\x0b\xf8\xd0\x58\xe2\x6e\x2c\x48\x92\x0e\xf3\x84\x6d\x10\x9f\x15\x2f\x4c\x4f\xc6\x35\x28\x64\x21\x05\x28\xae\xcb\x96\x97\x08\xa5\xd9\xa1\xd5\x52\x97\xd0\xa0\xad\xa5\x23\xf3\x1c\x70\x9d\x33\x25\x6b\xe9\xb9\x0f\xeb\x9f\xda\x49\xd8\x8b\x94\xb1\xf4\x05\xdb\x92\x85\x54\x17\x6b\xd4\xde\x81\x69\x89\x06\x21\xa3\xf6\xb6\x6b\x8c\xd4\x3e\x81\x95\x9f\xb3\x23\xd8\x73\xe9\x5d\xe0\xb2\x59\xbd\xfd\xb8\xb9\x99\xb2\x23\xc2\xd4\x80\x0f\x28\x1c\x8c\xb9\x2d\x77\x9f\xa7\x77\x31\xf4\x5f\xe6\x77\x31\xa0\xde\x7d\x9e\xdf\x4d\x58\x5f\x87\x2b\x65\xf6\x0e\x5a\x47\x1e\x34\x68\x0b\x63\x6b\x30\x41\x05\x2e\x7a\xa6\x52\x07\x9a\x91\x36\x39\x46\x20\x8c\xa6\xa0\xa0\x85\x9d\xe4\xf0\x35\x37\xe2\x3e\x28\x86\xe2\x2b\xfb\x92\x61\x61\x2c\x7e\x81\x3d\x42\xc5\x77\x48\x10\x2d\x57\xaa\x83\x28\x33\xc6\x63\x1e\x05\x24\xa9\xa5\x27\x3d\x00\x77\x68\x3b\x5f\x91\x54\xa8\x28\x66\xca\xe8\xb2\xcf\xa8\xf4\x09\x63\xb7\x08\x82\xeb\xbe\x21\x87\x3a\x7f\x6c\x92\xb8\x86\xa0\x37\xd6\x08\x32\x8a\xd6\x56\x96\x25\x5a\x70\x9e\x5b\x4a\x51\xcf\xb9\x27\x10\xb1\xef\xca\xc1\x9e\xd0\xf6\x08\xdc\x22\xe4\x46\x23\x34\x96\x58\xd7\x74\x86\xeb\x8e\x30\x77\x92\x3c\xa3\x07\xe6\xb0\xf7\x84\xb1\xf5\xf5\x76\x39\xef\x6b\x1f\x9a\x84\x39\x70\x07\x1c\x9c\xd4\xa5\xa2\x04\x4c\x93\x7f\x85\x5b\x18\x43\xeb\x7a\x1c\xd5\xf5\x71\xf1\xb9\x92\x59\xd2\x8b\x5f\xf3\x7b\x74\x20\x3d\x20\x77\x92\xd2\x60\x20\x6b\xa5\xca\xa1\x31\xd6\xf3\x4c\x75\x71\x90\xa9\xb7\x89\x38\x6b\xba\x2c\xe4\xf6\xbe\xe2\x9e\x0e\xe6\x06\xdd\x10\x9c\x14\x96\xdf\x9b\x3c\x88\x0f\x07\x57\xd3\xf1\xc1\xa9\x1f\x93\x04\x9e\xa0\x7e\xce\x51\x9a\x42\xef\x66\xf0\x36\xf4\xe0\x92\x85\x2d\x1d\xa5\x88\x35\x5c\xdc\x13\x4e\xcd\xa5\x66\x4c\xd6\x44\x18\xc6\x6c\x14\x19\x17\x85\xcf\xd4\xc9\x52\x93\xf2\xa3\xc8\x75\x4e\x70\xa5\x22\xc6\x46\x91\x32\x65\xc4\x26\x81\x6d\x87\xae\x17\xd2\x55\xa6\x55\x39\x64\xfd\xfd\x12\x50\x73\x61\x4d\x0c\x59\xeb\x49\x7e\x25\x75\xfb\x40\x19\x1c\xf8\x77\xa6\xfd\xab\x25\x89\x83\xc7\x06\x4a\xf4\x3d\x0c\xd7\x5d\x65\xf6\x84\x3c\x4c\xa9\x9a\xeb\x97\xc3\x7c\xd2\xed\x03\x2d\x8f\x1a\x5e\xa2\x0b\x2f\x06\x7e\xc9\xcb\xa4\xf2\xb5\x7a\x3c\xe5\xe6\x69\x5a\x4a\x5f\xb5\x59\x22\x4c\x9d\xd6\x26\xeb\xfa\x8f\x4c\x99\x2c\x3d\x3d\x9b\xe5\xc5\xb9\x98\xe5\x67\xc5\xef\xe7\x67\xc7\x53\x71\x9e\x4f\xf3\xe2\xe5\xec\xf4\xec\xe4\xfc\x8f\xd3\xb3\x3f\xf2\xd9\xa9\x38\xce\x8a\x69\xda\xdc\x97\x03\xfe\xf0\xef\x4b\xa0\x90\x94\xe6\x2f\x57\xd3\x63\x26\x8c\x76\x1e\x9c\x2c\xad\xaf\xa5\x86\xd7\x70\xf2\x3b\x63\x45\xab\x45\x90\x73\x3c\x81\xff\xb1\x51\x9a\x52\x2e\x77\xa8\x3d\xfc\xd7\xd4\x99\xc4\xc7\xac\xa3\xa3\x94\xd1\x28\xa7\x69\xae\x14\xe9\xf6\x61\x75\x39\x0d\xe6\x71\xd8\x57\x52\x61\x38\xfe\xd8\x4f\x5f\x3a\x97\x98\x68\xf4\xd4\x7b\x3a\x4b\xc9\xee\x46\xe6\x6c\x34\xa8\xb0\x2a\xb5\xb1\x38\x1e\x9c\x4a\x36\xab\xb7\x17\xef\xae\x2e\x27\x2c\x00\x95\x96\x67\xfd\x2d\xb0\xc8\x55\x74\x98\x1d\x61\xea\x9a\x12\x1a\xfe\x6c\xe9\xa0\xb0\xa6\x0e\x03\x8b\x56\x6c\x24\x0b\x50\xa8\xc7\x43\x72\x26\xf0\x0a\x66\xd4\xdc\x48\x99\x32\x79\xc3\x3d\x57\xe3\x68\x6d\x3c\xa0\x36\x6d\x59\xd1\x99\xb6\xcf\xac\x37\x07\x55\x7e\x89\x26\x6c\xf4\x8d\x8d\x44\x9d\xf7\x73\x0c\xe6\xaf\xbf\x87\xf1\x2e\x7e\x16\xcc\xc0\x98\xda\x3b\x0c\x33\x8c\x0d\x8d\x28\x19\x02\xb5\x59\xbd\xbd\xd9\xfe\x63\xb5\xfe\xed\x84\xca\xd4\xdc\x8b\x0a\x5c\xe7\x3c\xd6\xf9\x84\x8d\x04\x81\xd3\xbd\x1c\x8b\x8a\x6b\x82\xde\x04\x89\x62\x98\x4e\x9e\xe4\x5a\x1b\x2f\x8b\x6e\x2c\x62\x38\x50\x8c\x0a\x1d\x3c\x08\x3b\xc7\x8f\x26\xff\x76\x32\x99\xb0\xd0\xf6\x07\x2b\xb5\x57\x7a\x1c\xdd\xf2\xf0\x6b\xf7\x8c\x67\x92\x24\x51\x5f\x86\x68\xbc\x3a\x12\x41\x42\x5a\xfe\xf2\xfa\xc7\x5a\x4f\x42\x06\xc4\x62\x1c\x2d\x1f\x7a\x40\x5e\x78\x9a\x83\x81\xc0\x1c\x7e\xdd\xd1\xd9\xe1\x4c\x14\xd3\xf3\x09\x1b\x8d\x2c\xfa\xd6\x6a\xd2\x35\x28\xf6\xf4\x9b\xd1\x8f\xd6\x3f\xf1\x3a\x86\x7b\xc4\xe6\x71\xb0\xa2\xde\xb1\x67\xc5\x6f\x50\xa0\xdc\xe1\xd3\x88\x8e\x9f\xc6\x86\x37\x81\xc4\xaf\xbb\x7f\xeb\x28\x86\x27\x13\xa9\xcd\xa1\xa1\xe5\x03\x8a\xf1\xd3\x8b\xe0\xe7\x52\xef\xa4\x35\x7a\x3c\x99\xb0\x6f\xec\xff\x01\x00\x00\xff\xff\x39\x8f\xbf\x84\x4f\x09\x00\x00")

func imagesNodeEntrypointMainGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesNodeEntrypointMainGo,
		"images/node/entrypoint/main.go",
	)
}

func imagesNodeEntrypointMainGo() (*asset, error) {
	bytes, err := imagesNodeEntrypointMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/node/entrypoint/main.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesNodeJournalctlToTtyService = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xc1\x6e\xe3\x36\x10\xbd\xf3\x2b\x06\xd1\xa5\x05\x2c\x29\xcd\xa9\x48\xe1\x83\x37\x49\x51\x77\x17\x36\x60\x39\x0d\x16\x41\x0e\x23\x6a\x2c\x4d\x97\x22\x55\xce\x68\x15\xfd\x7d\x41\xd9\x69\x13\x14\xd5\x49\x9c\x79\xf3\xf8\xe6\x3d\x66\x70\x17\x86\x39\x72\xdb\x29\xdc\x5c\xff\xf4\x33\x1c\x3b\x82\xcf\x63\x4d\xd1\x93\x92\xc0\x66\xd4\x2e\x44\x29\x4c\x66\x32\xf8\xc2\x96\xbc\x50\x03\xa3\x6f\x28\x82\x76\x04\x9b\x01\x6d\x47\x6f\x9d\x15\xfc\x41\x51\x38\x78\xb8\x29\xae\xe1\x87\x04\xb8\xba\xb4\xae\x7e\xfc\xc5\x64\x30\x87\x11\x7a\x9c\xc1\x07\x85\x51\x08\xb4\x63\x81\x13\x3b\x02\x7a\xb5\x34\x28\xb0\x07\x1b\xfa\xc1\x31\x7a\x4b\x30\xb1\x76\xcb\x35\x17\x92\xc2\x64\xf0\xf5\x42\x11\x6a\x45\xf6\x80\x60\xc3\x30\x43\x38\xbd\xc7\x01\xea\x22\x38\x7d\x9d\xea\x70\x5b\x96\xd3\x34\x15\xb8\x88\x2d\x42\x6c\x4b\x77\x06\x4a\xf9\x65\x7b\xf7\xb0\xab\x1e\xf2\x9b\xe2\x7a\x19\x79\xf4\x8e\x44\x20\xd2\x5f\x23\x47\x6a\xa0\x9e\x01\x87\xc1\xb1\xc5\xda\x11\x38\x9c\x20\x44\xc0\x36\x12\x35\xa0\x21\xe9\x9d\x22\x2b\xfb\x76\x05\x12\x4e\x3a\x61\x24\x93\x41\xc3\xa2\x91\xeb\x51\x3f\x98\xf5\xa6\x8e\xe5\x03\x20\x78\x40\x0f\x57\x9b\x0a\xb6\xd5\x15\x7c\xda\x54\xdb\x6a\x65\x32\x78\xda\x1e\x7f\xdb\x3f\x1e\xe1\x69\x73\x38\x6c\x76\xc7\xed\x43\x05\xfb\x03\xdc\xed\x77\xf7\xdb\xe3\x76\xbf\xab\x60\xff\x2b\x6c\x76\x5f\xe1\xf3\x76\x77\xbf\x02\x62\xed\x28\x02\xbd\x0e\x31\xe9\x0f\x11\x38\xd9\x48\x4d\xf2\xac\x22\xfa\x20\xe0\x14\xce\x82\x64\x20\xcb\x27\xb6\xe0\xd0\xb7\x23\xb6\x04\x6d\xf8\x4e\xd1\xb3\x6f\x61\xa0\xd8\xb3\xa4\x30\x05\xd0\x37\x26\x03\xc7\x3d\x2b\xea\x52\xf9\xcf\x52\x85\x31\x19\xb0\x97\xe1\xcd\xb5\x96\xb5\x1b\xeb\xc2\x86\xbe\x6c\xb8\x5f\x38\x6e\x4d\xb6\xc4\x21\xb7\x65\xf9\xae\x1d\x06\xf2\xa2\x68\xbf\x95\xc8\x51\x3a\x1e\xf2\x1e\x51\xca\xda\x85\xba\xec\x51\x94\x62\xc9\x3d\xb6\x24\x65\xaa\xe7\x11\xed\xb7\xdc\x06\xaf\x31\x38\x47\xb1\x14\x1b\x79\x50\x29\xff\x0c\x63\xf4\xe8\xac\xba\x5c\x43\xae\x3a\x17\x42\xf1\x3b\xdb\x94\xc7\x31\xbd\xb3\xcb\x11\xe2\xe8\x05\xfe\x45\xa7\x0c\x4f\xc1\xb9\x30\x41\x1f\x1a\x5a\xc1\x10\xd8\xa7\x5c\x50\x97\x05\x55\xe7\x14\xc7\xd4\xb1\xed\xc0\x91\x0a\x8c\x89\xeb\xec\xe8\x85\x06\x5c\x68\x25\x11\xa5\x5a\xd2\x86\xec\x29\x82\x68\x13\x46\x2d\xcc\xf3\xa3\x67\x7d\x31\xf7\x74\xd6\xca\xc1\xaf\x7f\x3f\x0f\x36\x69\x12\x44\x23\x61\x4f\xd1\x1c\xce\xcf\x4e\xd6\x32\x8b\x52\xdf\xe4\x17\xfe\xe6\x9f\x5d\x36\x27\xa5\xf8\xff\x6d\xf3\x5c\x9d\xff\x5e\xcc\x81\x44\x31\xea\x1a\xdd\x84\xb3\xbc\x1d\x2b\xb2\xeb\x6b\xf3\xf0\x4a\xb6\x5a\xba\x65\xcd\xfe\x9d\x75\x90\xe7\x17\x2f\xf2\xdc\x87\x5c\x91\x9d\xa9\x14\x7d\x83\xb1\xd9\x8f\x3a\x8c\xba\x56\x9d\x8d\x79\xde\xa6\xc8\x9c\x7b\x31\x4f\x98\xcc\xfa\x34\xaf\xfb\xd1\x29\xe7\xa3\x50\x2c\x14\x63\x4b\x6a\xfe\x0e\x00\x00\xff\xff\xbb\xd7\xb0\x75\x5d\x04\x00\x00")

func imagesNodeJournalctlToTtyServiceBytes() ([]byte, error) {
	return bindataRead(
		_imagesNodeJournalctlToTtyService,
		"images/node/journalctl-to-tty.service",
	)
}

func imagesNodeJournalctlToTtyService() (*asset, error) {
	bytes, err := imagesNodeJournalctlToTtyServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/node/journalctl-to-tty.service", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/node/Dockerfile":                imagesNodeDockerfile,
	"images/node/entrypoint/main.go":        imagesNodeEntrypointMainGo,
	"images/node/journalctl-to-tty.service": imagesNodeJournalctlToTtyService,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"node": {nil, map[string]*bintree{
			"Dockerfile": {imagesNodeDockerfile, map[string]*bintree{}},
			"entrypoint": {nil, map[string]*bintree{
				"main.go": {imagesNodeEntrypointMainGo, map[string]*bintree{}},
			}},
			"journalctl-to-tty.service": {imagesNodeJournalctlToTtyService, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
